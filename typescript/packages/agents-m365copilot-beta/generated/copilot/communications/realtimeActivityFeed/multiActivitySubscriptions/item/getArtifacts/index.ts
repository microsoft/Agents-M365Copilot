/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { ArtifactType, ArtifactTypeObject, createGetArtifactsResponseFromDiscriminatorValue, serializeGetArtifactsResponse, type GetArtifactsResponse } from '../../../../../../models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetArtifactsPostRequestBody}
 */
// @ts-ignore
export function createGetArtifactsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetArtifactsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param GetArtifactsPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetArtifactsPostRequestBody(getArtifactsPostRequestBody: Partial<GetArtifactsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "artifactTypes": n => { getArtifactsPostRequestBody.artifactTypes = n.getCollectionOfEnumValues<ArtifactType>(ArtifactTypeObject); },
        "backingStoreEnabled": n => { getArtifactsPostRequestBody.backingStoreEnabled = true; },
        "maxResults": n => { getArtifactsPostRequestBody.maxResults = n.getNumberValue(); },
        "rangeInSec": n => { getArtifactsPostRequestBody.rangeInSec = n.getNumberValue(); },
        "seedDateTime": n => { getArtifactsPostRequestBody.seedDateTime = n.getDateValue(); },
        "userId": n => { getArtifactsPostRequestBody.userId = n.getStringValue(); },
    }
}
export interface GetArtifactsPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The artifactTypes property
     */
    artifactTypes?: ArtifactType[] | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The maxResults property
     */
    maxResults?: number | null;
    /**
     * The rangeInSec property
     */
    rangeInSec?: number | null;
    /**
     * The seedDateTime property
     */
    seedDateTime?: Date | null;
    /**
     * The userId property
     */
    userId?: string | null;
}
/**
 * Provides operations to call the getArtifacts method.
 */
export interface GetArtifactsRequestBuilder extends BaseRequestBuilder<GetArtifactsRequestBuilder> {
    /**
     * Invoke action getArtifacts
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetArtifactsResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: GetArtifactsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetArtifactsResponse | undefined>;
    /**
     * Invoke action getArtifacts
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: GetArtifactsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param GetArtifactsPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetArtifactsPostRequestBody(writer: SerializationWriter, getArtifactsPostRequestBody: Partial<GetArtifactsPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!getArtifactsPostRequestBody || isSerializingDerivedType) { return; }
    if(getArtifactsPostRequestBody.artifactTypes)
    writer.writeCollectionOfEnumValues<ArtifactType>("artifactTypes", getArtifactsPostRequestBody.artifactTypes);
    writer.writeNumberValue("maxResults", getArtifactsPostRequestBody.maxResults);
    writer.writeNumberValue("rangeInSec", getArtifactsPostRequestBody.rangeInSec);
    writer.writeDateValue("seedDateTime", getArtifactsPostRequestBody.seedDateTime);
    writer.writeStringValue("userId", getArtifactsPostRequestBody.userId);
    writer.writeAdditionalData(getArtifactsPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const GetArtifactsRequestBuilderUriTemplate = "{+baseurl}/copilot/communications/realtimeActivityFeed/multiActivitySubscriptions/{multiActivitySubscription%2Did}/getArtifacts";
/**
 * Metadata for all the requests in the request builder.
 */
export const GetArtifactsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: GetArtifactsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetArtifactsResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGetArtifactsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
