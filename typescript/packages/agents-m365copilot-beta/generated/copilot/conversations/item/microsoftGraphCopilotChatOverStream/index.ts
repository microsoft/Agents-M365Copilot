/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCopilotContextMessageFromDiscriminatorValue, createCopilotConversationLocationFromDiscriminatorValue, createCopilotConversationRequestMessageParameterFromDiscriminatorValue, serializeCopilotContextMessage, serializeCopilotConversationLocation, serializeCopilotConversationRequestMessageParameter, type CopilotContextMessage, type CopilotConversationLocation, type CopilotConversationRequestMessageParameter } from '../../../../models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChatOverStreamPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The additionalContext property
     */
    additionalContext?: CopilotContextMessage[] | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * Represents a location.
     */
    locationHint?: CopilotConversationLocation | null;
    /**
     * The message property
     */
    message?: CopilotConversationRequestMessageParameter | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatOverStreamPostRequestBody}
 */
// @ts-ignore
export function createChatOverStreamPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatOverStreamPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatOverStreamPostRequestBody(chatOverStreamPostRequestBody: Partial<ChatOverStreamPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "additionalContext": n => { chatOverStreamPostRequestBody.additionalContext = n.getCollectionOfObjectValues<CopilotContextMessage>(createCopilotContextMessageFromDiscriminatorValue); },
        "backingStoreEnabled": n => { chatOverStreamPostRequestBody.backingStoreEnabled = true; },
        "locationHint": n => { chatOverStreamPostRequestBody.locationHint = n.getObjectValue<CopilotConversationLocation>(createCopilotConversationLocationFromDiscriminatorValue); },
        "message": n => { chatOverStreamPostRequestBody.message = n.getObjectValue<CopilotConversationRequestMessageParameter>(createCopilotConversationRequestMessageParameterFromDiscriminatorValue); },
    }
}
/**
 * Provides operations to call the chatOverStream method.
 */
export interface MicrosoftGraphCopilotChatOverStreamRequestBuilder extends BaseRequestBuilder<MicrosoftGraphCopilotChatOverStreamRequestBuilder> {
    /**
     * Chat with Copilot in this conversation. This endpoint streams its results over Server-Sent Events (SSE).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     post(body: ChatOverStreamPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Chat with Copilot in this conversation. This endpoint streams its results over Server-Sent Events (SSE).
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     toPostRequestInformation(body: ChatOverStreamPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatOverStreamPostRequestBody(writer: SerializationWriter, chatOverStreamPostRequestBody: Partial<ChatOverStreamPostRequestBody> | undefined | null = {}) : void {
    if (chatOverStreamPostRequestBody) {
        writer.writeCollectionOfObjectValues<CopilotContextMessage>("additionalContext", chatOverStreamPostRequestBody.additionalContext, serializeCopilotContextMessage);
        writer.writeObjectValue<CopilotConversationLocation>("locationHint", chatOverStreamPostRequestBody.locationHint, serializeCopilotConversationLocation);
        writer.writeObjectValue<CopilotConversationRequestMessageParameter>("message", chatOverStreamPostRequestBody.message, serializeCopilotConversationRequestMessageParameter);
        writer.writeAdditionalData(chatOverStreamPostRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const MicrosoftGraphCopilotChatOverStreamRequestBuilderUriTemplate = "{+baseurl}/copilot/conversations/{copilotConversation%2Did}/microsoft.graph.copilot.chatOverStream";
/**
 * Metadata for all the requests in the request builder.
 */
export const MicrosoftGraphCopilotChatOverStreamRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MicrosoftGraphCopilotChatOverStreamRequestBuilderUriTemplate,
        responseBodyContentType: "application/octet-stream",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChatOverStreamPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
