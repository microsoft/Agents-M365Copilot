/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoIdentity, serializeIdentity, type Identity } from '../index.js';
// @ts-ignore
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubmissionUserIdentity}
 */
// @ts-ignore
export function createSubmissionUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubmissionUserIdentity;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubmissionUserIdentity(submissionUserIdentity: Partial<SubmissionUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(submissionUserIdentity),
        "email": n => { submissionUserIdentity.email = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubmissionUserIdentity(writer: SerializationWriter, submissionUserIdentity: Partial<SubmissionUserIdentity> | undefined | null = {}) : void {
    if (submissionUserIdentity) {
        serializeIdentity(writer, submissionUserIdentity)
        writer.writeStringValue("email", submissionUserIdentity.email);
    }
}
export interface SubmissionUserIdentity extends Identity, Parsable {
    /**
     * The email of user who is making the submission when logged in (delegated token case).
     */
    email?: string | null;
}
/* tslint:enable */
/* eslint-enable */
