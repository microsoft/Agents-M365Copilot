/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoSubmissionUserIdentity, serializeSubmissionUserIdentity, type SubmissionUserIdentity } from './security/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActionItem extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The ownerDisplayName property
     */
    ownerDisplayName?: string | null;
    /**
     * The text property
     */
    text?: string | null;
    /**
     * The title property
     */
    title?: string | null;
}
export type ActivityStatus = (typeof ActivityStatusObject)[keyof typeof ActivityStatusObject];
export interface ActivityTransport extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The connectionType property
     */
    connectionType?: ConnectionType | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
export interface AiInteraction extends Entity, Parsable {
    /**
     * The appClass property
     */
    appClass?: string | null;
    /**
     * The attachments property
     */
    attachments?: AiInteractionAttachment[] | null;
    /**
     * The body property
     */
    body?: ItemBody | null;
    /**
     * The contexts property
     */
    contexts?: AiInteractionContext[] | null;
    /**
     * The conversationType property
     */
    conversationType?: string | null;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date | null;
    /**
     * The etag property
     */
    etag?: string | null;
    /**
     * The from property
     */
    from?: IdentitySet | null;
    /**
     * The interactionType property
     */
    interactionType?: AiInteractionType | null;
    /**
     * The links property
     */
    links?: AiInteractionLink[] | null;
    /**
     * The locale property
     */
    locale?: string | null;
    /**
     * The mentions property
     */
    mentions?: AiInteractionMention[] | null;
    /**
     * The requestId property
     */
    requestId?: string | null;
    /**
     * The sessionId property
     */
    sessionId?: string | null;
}
export interface AiInteractionAttachment extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The attachmentId property
     */
    attachmentId?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The content property
     */
    content?: string | null;
    /**
     * The contentType property
     */
    contentType?: string | null;
    /**
     * The contentUrl property
     */
    contentUrl?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface AiInteractionContext extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The contextReference property
     */
    contextReference?: string | null;
    /**
     * The contextType property
     */
    contextType?: string | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface AiInteractionHistory extends Entity, Parsable {
}
export interface AiInteractionLink extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The linkType property
     */
    linkType?: string | null;
    /**
     * The linkUrl property
     */
    linkUrl?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface AiInteractionMention extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The mentioned property
     */
    mentioned?: AiInteractionMentionedIdentitySet | null;
    /**
     * The mentionId property
     */
    mentionId?: number | null;
    /**
     * The mentionText property
     */
    mentionText?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface AiInteractionMentionedIdentitySet extends IdentitySet, Parsable {
    /**
     * The conversation property
     */
    conversation?: TeamworkConversationIdentity | null;
    /**
     * The tag property
     */
    tag?: TeamworkTagIdentity | null;
}
export type AiInteractionType = (typeof AiInteractionTypeObject)[keyof typeof AiInteractionTypeObject];
export interface AiOnlineMeeting extends Entity, Parsable {
    /**
     * The aiInsights property
     */
    aiInsights?: CallAiInsight[] | null;
}
export interface AiOnlineMeetingCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AiOnlineMeeting[] | null;
}
export interface AiUser extends Entity, Parsable {
    /**
     * The interactionHistory property
     */
    interactionHistory?: AiInteractionHistory | null;
    /**
     * The onlineMeetings property
     */
    onlineMeetings?: AiOnlineMeeting[] | null;
}
export interface AiUserCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AiUser[] | null;
}
export interface ApprovalIdentitySet extends IdentitySet, Parsable {
    /**
     * The Microsoft Entra group associated with the approval item.
     */
    group?: Identity | null;
}
export interface AuditUserIdentity extends Parsable, UserIdentity {
    /**
     * For user sign ins, the identifier of the tenant that the user is a member of.
     */
    homeTenantId?: string | null;
    /**
     * For user sign ins, the name of the tenant that the user is a member of. Only populated in cases where the home tenant has provided affirmative consent to Microsoft Entra ID to show the tenant content.
     */
    homeTenantName?: string | null;
}
export interface AzureCommunicationServicesUserIdentity extends Identity, Parsable {
    /**
     * The Azure Communication Services resource ID associated with the user.
     */
    azureCommunicationServicesResourceId?: string | null;
}
export interface BaseActivity extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The resultInfo property
     */
    resultInfo?: ResultInfo | null;
    /**
     * The status property
     */
    status?: ActivityStatus | null;
    /**
     * The transport property
     */
    transport?: ActivityTransport | null;
}
export interface BaseCollectionPaginationCountResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataCount property
     */
    odataCount?: number | null;
    /**
     * The OdataNextLink property
     */
    odataNextLink?: string | null;
}
export type BodyType = (typeof BodyTypeObject)[keyof typeof BodyTypeObject];
export interface CallAiInsight extends Entity, Parsable {
    /**
     * The actionItems property
     */
    actionItems?: ActionItem[] | null;
    /**
     * The callId property
     */
    callId?: string | null;
    /**
     * The contentCorrelationId property
     */
    contentCorrelationId?: string | null;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date | null;
    /**
     * The endDateTime property
     */
    endDateTime?: Date | null;
    /**
     * The meetingNotes property
     */
    meetingNotes?: MeetingNote[] | null;
    /**
     * The viewpoint property
     */
    viewpoint?: CallAiInsightViewPoint | null;
}
export interface CallAiInsightCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: CallAiInsight[] | null;
}
export interface CallAiInsightViewPoint extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The mentionEvents property
     */
    mentionEvents?: MentionEvent[] | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface ChatInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The unique identifier for a message in a Microsoft Teams channel.
     */
    messageId?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The ID of the reply message.
     */
    replyChainMessageId?: string | null;
    /**
     * The unique identifier for a thread in Microsoft Teams.
     */
    threadId?: string | null;
}
export interface ChatMessageFromIdentitySet extends IdentitySet, Parsable {
}
export interface ChatMessageMentionedIdentitySet extends IdentitySet, Parsable {
    /**
     * If present, represents a conversation (for example, team, channel, or chat) @mentioned in a message.
     */
    conversation?: TeamworkConversationIdentity | null;
    /**
     * If present, represents a tag @mentioned in a team message.
     */
    tag?: TeamworkTagIdentity | null;
}
export interface ChatMessageReactionIdentitySet extends IdentitySet, Parsable {
}
export interface CommunicationsApplicationIdentity extends Identity, Parsable {
    /**
     * First-party Microsoft application that presents this identity.
     */
    applicationType?: string | null;
    /**
     * True if the participant shouldn't be shown in other participants' rosters.
     */
    hidden?: boolean | null;
}
export interface CommunicationsApplicationInstanceIdentity extends Identity, Parsable {
    /**
     * True if the participant shouldn't be shown in other participants' rosters.
     */
    hidden?: boolean | null;
    /**
     * The tenant ID of the application.
     */
    tenantId?: string | null;
}
export interface CommunicationsEncryptedIdentity extends Identity, Parsable {
}
export interface CommunicationsGuestIdentity extends Identity, Parsable {
    /**
     * The email of the guest user.
     */
    email?: string | null;
}
export interface CommunicationsIdentitySet extends IdentitySet, Parsable {
    /**
     * The application instance associated with this action.
     */
    applicationInstance?: Identity | null;
    /**
     * An identity the participant would like to present itself as to the other participants in the call.
     */
    assertedIdentity?: Identity | null;
    /**
     * The Azure Communication Services user associated with this action.
     */
    azureCommunicationServicesUser?: Identity | null;
    /**
     * The encrypted user associated with this action.
     */
    encrypted?: Identity | null;
    /**
     * Type of endpoint the participant uses. Possible values are: default, voicemail, skypeForBusiness, skypeForBusinessVoipPhone and unknownFutureValue.
     */
    endpointType?: EndpointType | null;
    /**
     * The guest user associated with this action.
     */
    guest?: Identity | null;
    /**
     * The Skype for Business on-premises user associated with this action.
     */
    onPremises?: Identity | null;
    /**
     * The phone user associated with this action.
     */
    phone?: Identity | null;
}
export interface CommunicationsPhoneIdentity extends Identity, Parsable {
}
export interface CommunicationsUserIdentity extends Identity, Parsable {
    /**
     * The user's tenant ID.
     */
    tenantId?: string | null;
}
export interface ConnectionItem extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The connectionId property
     */
    connectionId?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export type ConnectionType = (typeof ConnectionTypeObject)[keyof typeof ConnectionTypeObject];
export interface CopilotAdmin extends Entity, Parsable {
    /**
     * The settings property
     */
    settings?: CopilotAdminSetting | null;
}
export interface CopilotAdminLimitedMode extends Entity, Parsable {
    /**
     * The groupId property
     */
    groupId?: string | null;
    /**
     * The isEnabledForGroup property
     */
    isEnabledForGroup?: boolean | null;
}
export interface CopilotAdminSetting extends Entity, Parsable {
    /**
     * The limitedMode property
     */
    limitedMode?: CopilotAdminLimitedMode | null;
}
export interface CopilotCommunicationsRoot extends Entity, Parsable {
    /**
     * The realtimeActivityFeed property
     */
    realtimeActivityFeed?: RealtimeActivityFeedRoot | null;
}
export interface CopilotPeopleAdminSetting extends Entity, Parsable {
    /**
     * The enhancedPersonalization property
     */
    enhancedPersonalization?: EnhancedPersonalizationSetting | null;
}
export interface CopilotSetting extends Entity, Parsable {
    /**
     * The people property
     */
    people?: CopilotPeopleAdminSetting | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionItem}
 */
// @ts-ignore
export function createActionItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActivityTransport}
 */
// @ts-ignore
export function createActivityTransportFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActivityTransport;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionAttachment}
 */
// @ts-ignore
export function createAiInteractionAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionContext}
 */
// @ts-ignore
export function createAiInteractionContextFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionContext;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteraction}
 */
// @ts-ignore
export function createAiInteractionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteraction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionHistory}
 */
// @ts-ignore
export function createAiInteractionHistoryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionHistory;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionLink}
 */
// @ts-ignore
export function createAiInteractionLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionMentionedIdentitySet}
 */
// @ts-ignore
export function createAiInteractionMentionedIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionMentionedIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionMention}
 */
// @ts-ignore
export function createAiInteractionMentionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionMention;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiOnlineMeetingCollectionResponse}
 */
// @ts-ignore
export function createAiOnlineMeetingCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiOnlineMeetingCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiOnlineMeeting}
 */
// @ts-ignore
export function createAiOnlineMeetingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiOnlineMeeting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiUserCollectionResponse}
 */
// @ts-ignore
export function createAiUserCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiUserCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiUser}
 */
// @ts-ignore
export function createAiUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ApprovalIdentitySet}
 */
// @ts-ignore
export function createApprovalIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoApprovalIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AuditUserIdentity}
 */
// @ts-ignore
export function createAuditUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAuditUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureCommunicationServicesUserIdentity}
 */
// @ts-ignore
export function createAzureCommunicationServicesUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureCommunicationServicesUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BaseActivity}
 */
// @ts-ignore
export function createBaseActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.transcriptActivity":
                    return deserializeIntoTranscriptActivity;
            }
        }
    }
    return deserializeIntoBaseActivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BaseCollectionPaginationCountResponse}
 */
// @ts-ignore
export function createBaseCollectionPaginationCountResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBaseCollectionPaginationCountResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CallAiInsightCollectionResponse}
 */
// @ts-ignore
export function createCallAiInsightCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCallAiInsightCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CallAiInsight}
 */
// @ts-ignore
export function createCallAiInsightFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCallAiInsight;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CallAiInsightViewPoint}
 */
// @ts-ignore
export function createCallAiInsightViewPointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCallAiInsightViewPoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatInfo}
 */
// @ts-ignore
export function createChatInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatMessageFromIdentitySet}
 */
// @ts-ignore
export function createChatMessageFromIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatMessageFromIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatMessageMentionedIdentitySet}
 */
// @ts-ignore
export function createChatMessageMentionedIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatMessageMentionedIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatMessageReactionIdentitySet}
 */
// @ts-ignore
export function createChatMessageReactionIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatMessageReactionIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsApplicationIdentity}
 */
// @ts-ignore
export function createCommunicationsApplicationIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsApplicationIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsApplicationInstanceIdentity}
 */
// @ts-ignore
export function createCommunicationsApplicationInstanceIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsApplicationInstanceIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsEncryptedIdentity}
 */
// @ts-ignore
export function createCommunicationsEncryptedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsEncryptedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsGuestIdentity}
 */
// @ts-ignore
export function createCommunicationsGuestIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsGuestIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsIdentitySet}
 */
// @ts-ignore
export function createCommunicationsIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsPhoneIdentity}
 */
// @ts-ignore
export function createCommunicationsPhoneIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsPhoneIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsUserIdentity}
 */
// @ts-ignore
export function createCommunicationsUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConnectionItem}
 */
// @ts-ignore
export function createConnectionItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConnectionItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotAdmin}
 */
// @ts-ignore
export function createCopilotAdminFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotAdmin;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotAdminLimitedMode}
 */
// @ts-ignore
export function createCopilotAdminLimitedModeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotAdminLimitedMode;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotAdminSetting}
 */
// @ts-ignore
export function createCopilotAdminSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotAdminSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotCommunicationsRoot}
 */
// @ts-ignore
export function createCopilotCommunicationsRootFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotCommunicationsRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotPeopleAdminSetting}
 */
// @ts-ignore
export function createCopilotPeopleAdminSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotPeopleAdminSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotSetting}
 */
// @ts-ignore
export function createCopilotSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DataSourceConfiguration}
 */
// @ts-ignore
export function createDataSourceConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDataSourceConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DetailsInfo}
 */
// @ts-ignore
export function createDetailsInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDetailsInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Dictionaries}
 */
// @ts-ignore
export function createDictionariesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.searchResourceMetadataDictionary":
                    return deserializeIntoSearchResourceMetadataDictionary;
            }
        }
    }
    return deserializeIntoDictionaries;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmailIdentity}
 */
// @ts-ignore
export function createEmailIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmailIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EngagementIdentitySet}
 */
// @ts-ignore
export function createEngagementIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEngagementIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnhancedPersonalizationSetting}
 */
// @ts-ignore
export function createEnhancedPersonalizationSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnhancedPersonalizationSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Entity}
 */
// @ts-ignore
export function createEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.aiInteraction":
                    return deserializeIntoAiInteraction;
                case "#microsoft.graph.aiInteractionHistory":
                    return deserializeIntoAiInteractionHistory;
                case "#microsoft.graph.aiOnlineMeeting":
                    return deserializeIntoAiOnlineMeeting;
                case "#microsoft.graph.aiUser":
                    return deserializeIntoAiUser;
                case "#microsoft.graph.callAiInsight":
                    return deserializeIntoCallAiInsight;
                case "#microsoft.graph.copilotAdmin":
                    return deserializeIntoCopilotAdmin;
                case "#microsoft.graph.copilotAdminLimitedMode":
                    return deserializeIntoCopilotAdminLimitedMode;
                case "#microsoft.graph.copilotAdminSetting":
                    return deserializeIntoCopilotAdminSetting;
                case "#microsoft.graph.copilotCommunicationsRoot":
                    return deserializeIntoCopilotCommunicationsRoot;
                case "#microsoft.graph.copilotPeopleAdminSetting":
                    return deserializeIntoCopilotPeopleAdminSetting;
                case "#microsoft.graph.copilotSetting":
                    return deserializeIntoCopilotSetting;
                case "#microsoft.graph.enhancedPersonalizationSetting":
                    return deserializeIntoEnhancedPersonalizationSetting;
                case "#microsoft.graph.multiActivitySubscription":
                    return deserializeIntoMultiActivitySubscription;
                case "#microsoft.graph.realtimeActivityFeedRoot":
                    return deserializeIntoRealtimeActivityFeedRoot;
                case "#microsoft.graph.realtimeActivityMeeting":
                    return deserializeIntoRealtimeActivityMeeting;
                case "#microsoft.graph.realTimeTranscript":
                    return deserializeIntoRealTimeTranscript;
            }
        }
    }
    return deserializeIntoEntity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExternalItemConfiguration}
 */
// @ts-ignore
export function createExternalItemConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExternalItemConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Identity}
 */
// @ts-ignore
export function createIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.auditUserIdentity":
                    return deserializeIntoAuditUserIdentity;
                case "#microsoft.graph.azureCommunicationServicesUserIdentity":
                    return deserializeIntoAzureCommunicationServicesUserIdentity;
                case "#microsoft.graph.callRecords.userIdentity":
                    return deserializeIntoUserIdentity;
                case "#microsoft.graph.communicationsApplicationIdentity":
                    return deserializeIntoCommunicationsApplicationIdentity;
                case "#microsoft.graph.communicationsApplicationInstanceIdentity":
                    return deserializeIntoCommunicationsApplicationInstanceIdentity;
                case "#microsoft.graph.communicationsEncryptedIdentity":
                    return deserializeIntoCommunicationsEncryptedIdentity;
                case "#microsoft.graph.communicationsGuestIdentity":
                    return deserializeIntoCommunicationsGuestIdentity;
                case "#microsoft.graph.communicationsPhoneIdentity":
                    return deserializeIntoCommunicationsPhoneIdentity;
                case "#microsoft.graph.communicationsUserIdentity":
                    return deserializeIntoCommunicationsUserIdentity;
                case "#microsoft.graph.emailIdentity":
                    return deserializeIntoEmailIdentity;
                case "#microsoft.graph.initiator":
                    return deserializeIntoInitiator;
                case "#microsoft.graph.programResource":
                    return deserializeIntoProgramResource;
                case "#microsoft.graph.provisionedIdentity":
                    return deserializeIntoProvisionedIdentity;
                case "#microsoft.graph.provisioningServicePrincipal":
                    return deserializeIntoProvisioningServicePrincipal;
                case "#microsoft.graph.provisioningSystem":
                    return deserializeIntoProvisioningSystem;
                case "#microsoft.graph.security.submissionUserIdentity":
                    return deserializeIntoSubmissionUserIdentity;
                case "#microsoft.graph.servicePrincipalIdentity":
                    return deserializeIntoServicePrincipalIdentity;
                case "#microsoft.graph.sharePointIdentity":
                    return deserializeIntoSharePointIdentity;
                case "#microsoft.graph.sourceProvisionedIdentity":
                    return deserializeIntoSourceProvisionedIdentity;
                case "#microsoft.graph.targetProvisionedIdentity":
                    return deserializeIntoTargetProvisionedIdentity;
                case "#microsoft.graph.teamworkApplicationIdentity":
                    return deserializeIntoTeamworkApplicationIdentity;
                case "#microsoft.graph.teamworkConversationIdentity":
                    return deserializeIntoTeamworkConversationIdentity;
                case "#microsoft.graph.teamworkTagIdentity":
                    return deserializeIntoTeamworkTagIdentity;
                case "#microsoft.graph.teamworkUserIdentity":
                    return deserializeIntoTeamworkUserIdentity;
                case "#microsoft.graph.userIdentity":
                    return deserializeIntoUserIdentity;
            }
        }
    }
    return deserializeIntoIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IdentitySet}
 */
// @ts-ignore
export function createIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.aiInteractionMentionedIdentitySet":
                    return deserializeIntoAiInteractionMentionedIdentitySet;
                case "#microsoft.graph.approvalIdentitySet":
                    return deserializeIntoApprovalIdentitySet;
                case "#microsoft.graph.chatMessageFromIdentitySet":
                    return deserializeIntoChatMessageFromIdentitySet;
                case "#microsoft.graph.chatMessageMentionedIdentitySet":
                    return deserializeIntoChatMessageMentionedIdentitySet;
                case "#microsoft.graph.chatMessageReactionIdentitySet":
                    return deserializeIntoChatMessageReactionIdentitySet;
                case "#microsoft.graph.communicationsIdentitySet":
                    return deserializeIntoCommunicationsIdentitySet;
                case "#microsoft.graph.engagementIdentitySet":
                    return deserializeIntoEngagementIdentitySet;
                case "#microsoft.graph.sharePointIdentitySet":
                    return deserializeIntoSharePointIdentitySet;
            }
        }
    }
    return deserializeIntoIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Initiator}
 */
// @ts-ignore
export function createInitiatorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInitiator;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ItemBody}
 */
// @ts-ignore
export function createItemBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoItemBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {JoinMeetingIdMeetingInfo}
 */
// @ts-ignore
export function createJoinMeetingIdMeetingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoJoinMeetingIdMeetingInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MeetingInfo}
 */
// @ts-ignore
export function createMeetingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.joinMeetingIdMeetingInfo":
                    return deserializeIntoJoinMeetingIdMeetingInfo;
                case "#microsoft.graph.organizerMeetingInfo":
                    return deserializeIntoOrganizerMeetingInfo;
                case "#microsoft.graph.tokenMeetingInfo":
                    return deserializeIntoTokenMeetingInfo;
            }
        }
    }
    return deserializeIntoMeetingInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MeetingNote}
 */
// @ts-ignore
export function createMeetingNoteFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMeetingNote;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MeetingNoteSubpoint}
 */
// @ts-ignore
export function createMeetingNoteSubpointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMeetingNoteSubpoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MentionEvent}
 */
// @ts-ignore
export function createMentionEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMentionEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MultiActivitySubscriptionCollectionResponse}
 */
// @ts-ignore
export function createMultiActivitySubscriptionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMultiActivitySubscriptionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MultiActivitySubscription}
 */
// @ts-ignore
export function createMultiActivitySubscriptionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMultiActivitySubscription;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OrganizerMeetingInfo}
 */
// @ts-ignore
export function createOrganizerMeetingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOrganizerMeetingInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProgramResource}
 */
// @ts-ignore
export function createProgramResourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProgramResource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvisionedIdentity}
 */
// @ts-ignore
export function createProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvisionedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvisioningServicePrincipal}
 */
// @ts-ignore
export function createProvisioningServicePrincipalFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvisioningServicePrincipal;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvisioningSystem}
 */
// @ts-ignore
export function createProvisioningSystemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvisioningSystem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RealtimeActivityFeedRoot}
 */
// @ts-ignore
export function createRealtimeActivityFeedRootFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRealtimeActivityFeedRoot;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RealtimeActivityMeetingCollectionResponse}
 */
// @ts-ignore
export function createRealtimeActivityMeetingCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRealtimeActivityMeetingCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RealtimeActivityMeeting}
 */
// @ts-ignore
export function createRealtimeActivityMeetingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRealtimeActivityMeeting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RealTimeTranscriptCollectionResponse}
 */
// @ts-ignore
export function createRealTimeTranscriptCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRealTimeTranscriptCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RealTimeTranscript}
 */
// @ts-ignore
export function createRealTimeTranscriptFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRealTimeTranscript;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResultInfo}
 */
// @ts-ignore
export function createResultInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResultInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalExtract}
 */
// @ts-ignore
export function createRetrievalExtractFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRetrievalExtract;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalHit}
 */
// @ts-ignore
export function createRetrievalHitFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRetrievalHit;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalResponse}
 */
// @ts-ignore
export function createRetrievalResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRetrievalResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchResourceMetadataDictionary}
 */
// @ts-ignore
export function createSearchResourceMetadataDictionaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchResourceMetadataDictionary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchSensitivityLabelInfo}
 */
// @ts-ignore
export function createSearchSensitivityLabelInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchSensitivityLabelInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServicePrincipalIdentity}
 */
// @ts-ignore
export function createServicePrincipalIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServicePrincipalIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SharePointIdentity}
 */
// @ts-ignore
export function createSharePointIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSharePointIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SharePointIdentitySet}
 */
// @ts-ignore
export function createSharePointIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSharePointIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SourceProvisionedIdentity}
 */
// @ts-ignore
export function createSourceProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSourceProvisionedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SpeakerInfo}
 */
// @ts-ignore
export function createSpeakerInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSpeakerInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscriptionActivities}
 */
// @ts-ignore
export function createSubscriptionActivitiesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscriptionActivities;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TargetProvisionedIdentity}
 */
// @ts-ignore
export function createTargetProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTargetProvisionedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkApplicationIdentity}
 */
// @ts-ignore
export function createTeamworkApplicationIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkApplicationIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkConversationIdentity}
 */
// @ts-ignore
export function createTeamworkConversationIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkConversationIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkTagIdentity}
 */
// @ts-ignore
export function createTeamworkTagIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkTagIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkUserIdentity}
 */
// @ts-ignore
export function createTeamworkUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TokenMeetingInfo}
 */
// @ts-ignore
export function createTokenMeetingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTokenMeetingInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TranscriptActivity}
 */
// @ts-ignore
export function createTranscriptActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTranscriptActivity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TranscriptPayload}
 */
// @ts-ignore
export function createTranscriptPayloadFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTranscriptPayload;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TranscriptSpeaker}
 */
// @ts-ignore
export function createTranscriptSpeakerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTranscriptSpeaker;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserIdentity}
 */
// @ts-ignore
export function createUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.auditUserIdentity":
                    return deserializeIntoAuditUserIdentity;
            }
        }
    }
    return deserializeIntoUserIdentity;
}
export interface DataSourceConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The externalItem property
     */
    externalItem?: ExternalItemConfiguration | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
/**
 * The deserialization information for the current model
 * @param ActionItem The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionItem(actionItem: Partial<ActionItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { actionItem.backingStoreEnabled = true; },
        "@odata.type": n => { actionItem.odataType = n.getStringValue(); },
        "ownerDisplayName": n => { actionItem.ownerDisplayName = n.getStringValue(); },
        "text": n => { actionItem.text = n.getStringValue(); },
        "title": n => { actionItem.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ActivityTransport The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActivityTransport(activityTransport: Partial<ActivityTransport> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { activityTransport.backingStoreEnabled = true; },
        "connectionType": n => { activityTransport.connectionType = n.getEnumValue<ConnectionType>(ConnectionTypeObject); },
        "@odata.type": n => { activityTransport.odataType = n.getStringValue(); },
        "url": n => { activityTransport.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteraction The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteraction(aiInteraction: Partial<AiInteraction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteraction),
        "appClass": n => { aiInteraction.appClass = n.getStringValue(); },
        "attachments": n => { aiInteraction.attachments = n.getCollectionOfObjectValues<AiInteractionAttachment>(createAiInteractionAttachmentFromDiscriminatorValue); },
        "body": n => { aiInteraction.body = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "contexts": n => { aiInteraction.contexts = n.getCollectionOfObjectValues<AiInteractionContext>(createAiInteractionContextFromDiscriminatorValue); },
        "conversationType": n => { aiInteraction.conversationType = n.getStringValue(); },
        "createdDateTime": n => { aiInteraction.createdDateTime = n.getDateValue(); },
        "etag": n => { aiInteraction.etag = n.getStringValue(); },
        "from": n => { aiInteraction.from = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "interactionType": n => { aiInteraction.interactionType = n.getEnumValue<AiInteractionType>(AiInteractionTypeObject); },
        "links": n => { aiInteraction.links = n.getCollectionOfObjectValues<AiInteractionLink>(createAiInteractionLinkFromDiscriminatorValue); },
        "locale": n => { aiInteraction.locale = n.getStringValue(); },
        "mentions": n => { aiInteraction.mentions = n.getCollectionOfObjectValues<AiInteractionMention>(createAiInteractionMentionFromDiscriminatorValue); },
        "requestId": n => { aiInteraction.requestId = n.getStringValue(); },
        "sessionId": n => { aiInteraction.sessionId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteractionAttachment The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionAttachment(aiInteractionAttachment: Partial<AiInteractionAttachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "attachmentId": n => { aiInteractionAttachment.attachmentId = n.getStringValue(); },
        "backingStoreEnabled": n => { aiInteractionAttachment.backingStoreEnabled = true; },
        "content": n => { aiInteractionAttachment.content = n.getStringValue(); },
        "contentType": n => { aiInteractionAttachment.contentType = n.getStringValue(); },
        "contentUrl": n => { aiInteractionAttachment.contentUrl = n.getStringValue(); },
        "name": n => { aiInteractionAttachment.name = n.getStringValue(); },
        "@odata.type": n => { aiInteractionAttachment.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteractionContext The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionContext(aiInteractionContext: Partial<AiInteractionContext> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { aiInteractionContext.backingStoreEnabled = true; },
        "contextReference": n => { aiInteractionContext.contextReference = n.getStringValue(); },
        "contextType": n => { aiInteractionContext.contextType = n.getStringValue(); },
        "displayName": n => { aiInteractionContext.displayName = n.getStringValue(); },
        "@odata.type": n => { aiInteractionContext.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteractionHistory The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionHistory(aiInteractionHistory: Partial<AiInteractionHistory> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteractionHistory),
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteractionLink The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionLink(aiInteractionLink: Partial<AiInteractionLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { aiInteractionLink.backingStoreEnabled = true; },
        "displayName": n => { aiInteractionLink.displayName = n.getStringValue(); },
        "linkType": n => { aiInteractionLink.linkType = n.getStringValue(); },
        "linkUrl": n => { aiInteractionLink.linkUrl = n.getStringValue(); },
        "@odata.type": n => { aiInteractionLink.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteractionMention The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionMention(aiInteractionMention: Partial<AiInteractionMention> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { aiInteractionMention.backingStoreEnabled = true; },
        "mentioned": n => { aiInteractionMention.mentioned = n.getObjectValue<AiInteractionMentionedIdentitySet>(createAiInteractionMentionedIdentitySetFromDiscriminatorValue); },
        "mentionId": n => { aiInteractionMention.mentionId = n.getNumberValue(); },
        "mentionText": n => { aiInteractionMention.mentionText = n.getStringValue(); },
        "@odata.type": n => { aiInteractionMention.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiInteractionMentionedIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionMentionedIdentitySet(aiInteractionMentionedIdentitySet: Partial<AiInteractionMentionedIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(aiInteractionMentionedIdentitySet),
        "conversation": n => { aiInteractionMentionedIdentitySet.conversation = n.getObjectValue<TeamworkConversationIdentity>(createTeamworkConversationIdentityFromDiscriminatorValue); },
        "tag": n => { aiInteractionMentionedIdentitySet.tag = n.getObjectValue<TeamworkTagIdentity>(createTeamworkTagIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiOnlineMeeting The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiOnlineMeeting(aiOnlineMeeting: Partial<AiOnlineMeeting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiOnlineMeeting),
        "aiInsights": n => { aiOnlineMeeting.aiInsights = n.getCollectionOfObjectValues<CallAiInsight>(createCallAiInsightFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiOnlineMeetingCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiOnlineMeetingCollectionResponse(aiOnlineMeetingCollectionResponse: Partial<AiOnlineMeetingCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(aiOnlineMeetingCollectionResponse),
        "value": n => { aiOnlineMeetingCollectionResponse.value = n.getCollectionOfObjectValues<AiOnlineMeeting>(createAiOnlineMeetingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiUser The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiUser(aiUser: Partial<AiUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiUser),
        "interactionHistory": n => { aiUser.interactionHistory = n.getObjectValue<AiInteractionHistory>(createAiInteractionHistoryFromDiscriminatorValue); },
        "onlineMeetings": n => { aiUser.onlineMeetings = n.getCollectionOfObjectValues<AiOnlineMeeting>(createAiOnlineMeetingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AiUserCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiUserCollectionResponse(aiUserCollectionResponse: Partial<AiUserCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(aiUserCollectionResponse),
        "value": n => { aiUserCollectionResponse.value = n.getCollectionOfObjectValues<AiUser>(createAiUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ApprovalIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoApprovalIdentitySet(approvalIdentitySet: Partial<ApprovalIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(approvalIdentitySet),
        "group": n => { approvalIdentitySet.group = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param AuditUserIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAuditUserIdentity(auditUserIdentity: Partial<AuditUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUserIdentity(auditUserIdentity),
        "homeTenantId": n => { auditUserIdentity.homeTenantId = n.getStringValue(); },
        "homeTenantName": n => { auditUserIdentity.homeTenantName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param AzureCommunicationServicesUserIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAzureCommunicationServicesUserIdentity(azureCommunicationServicesUserIdentity: Partial<AzureCommunicationServicesUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(azureCommunicationServicesUserIdentity),
        "azureCommunicationServicesResourceId": n => { azureCommunicationServicesUserIdentity.azureCommunicationServicesResourceId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param BaseActivity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBaseActivity(baseActivity: Partial<BaseActivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { baseActivity.backingStoreEnabled = true; },
        "@odata.type": n => { baseActivity.odataType = n.getStringValue(); },
        "resultInfo": n => { baseActivity.resultInfo = n.getObjectValue<ResultInfo>(createResultInfoFromDiscriminatorValue); },
        "status": n => { baseActivity.status = n.getEnumValue<ActivityStatus>(ActivityStatusObject); },
        "transport": n => { baseActivity.transport = n.getObjectValue<ActivityTransport>(createActivityTransportFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param BaseCollectionPaginationCountResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBaseCollectionPaginationCountResponse(baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { baseCollectionPaginationCountResponse.backingStoreEnabled = true; },
        "@odata.count": n => { baseCollectionPaginationCountResponse.odataCount = n.getNumberValue(); },
        "@odata.nextLink": n => { baseCollectionPaginationCountResponse.odataNextLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CallAiInsight The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCallAiInsight(callAiInsight: Partial<CallAiInsight> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(callAiInsight),
        "actionItems": n => { callAiInsight.actionItems = n.getCollectionOfObjectValues<ActionItem>(createActionItemFromDiscriminatorValue); },
        "callId": n => { callAiInsight.callId = n.getStringValue(); },
        "contentCorrelationId": n => { callAiInsight.contentCorrelationId = n.getStringValue(); },
        "createdDateTime": n => { callAiInsight.createdDateTime = n.getDateValue(); },
        "endDateTime": n => { callAiInsight.endDateTime = n.getDateValue(); },
        "meetingNotes": n => { callAiInsight.meetingNotes = n.getCollectionOfObjectValues<MeetingNote>(createMeetingNoteFromDiscriminatorValue); },
        "viewpoint": n => { callAiInsight.viewpoint = n.getObjectValue<CallAiInsightViewPoint>(createCallAiInsightViewPointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CallAiInsightCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCallAiInsightCollectionResponse(callAiInsightCollectionResponse: Partial<CallAiInsightCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(callAiInsightCollectionResponse),
        "value": n => { callAiInsightCollectionResponse.value = n.getCollectionOfObjectValues<CallAiInsight>(createCallAiInsightFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CallAiInsightViewPoint The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCallAiInsightViewPoint(callAiInsightViewPoint: Partial<CallAiInsightViewPoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { callAiInsightViewPoint.backingStoreEnabled = true; },
        "mentionEvents": n => { callAiInsightViewPoint.mentionEvents = n.getCollectionOfObjectValues<MentionEvent>(createMentionEventFromDiscriminatorValue); },
        "@odata.type": n => { callAiInsightViewPoint.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ChatInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatInfo(chatInfo: Partial<ChatInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { chatInfo.backingStoreEnabled = true; },
        "messageId": n => { chatInfo.messageId = n.getStringValue(); },
        "@odata.type": n => { chatInfo.odataType = n.getStringValue(); },
        "replyChainMessageId": n => { chatInfo.replyChainMessageId = n.getStringValue(); },
        "threadId": n => { chatInfo.threadId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ChatMessageFromIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatMessageFromIdentitySet(chatMessageFromIdentitySet: Partial<ChatMessageFromIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(chatMessageFromIdentitySet),
    }
}
/**
 * The deserialization information for the current model
 * @param ChatMessageMentionedIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatMessageMentionedIdentitySet(chatMessageMentionedIdentitySet: Partial<ChatMessageMentionedIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(chatMessageMentionedIdentitySet),
        "conversation": n => { chatMessageMentionedIdentitySet.conversation = n.getObjectValue<TeamworkConversationIdentity>(createTeamworkConversationIdentityFromDiscriminatorValue); },
        "tag": n => { chatMessageMentionedIdentitySet.tag = n.getObjectValue<TeamworkTagIdentity>(createTeamworkTagIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ChatMessageReactionIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatMessageReactionIdentitySet(chatMessageReactionIdentitySet: Partial<ChatMessageReactionIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(chatMessageReactionIdentitySet),
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsApplicationIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsApplicationIdentity(communicationsApplicationIdentity: Partial<CommunicationsApplicationIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsApplicationIdentity),
        "applicationType": n => { communicationsApplicationIdentity.applicationType = n.getStringValue(); },
        "hidden": n => { communicationsApplicationIdentity.hidden = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsApplicationInstanceIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsApplicationInstanceIdentity(communicationsApplicationInstanceIdentity: Partial<CommunicationsApplicationInstanceIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsApplicationInstanceIdentity),
        "hidden": n => { communicationsApplicationInstanceIdentity.hidden = n.getBooleanValue(); },
        "tenantId": n => { communicationsApplicationInstanceIdentity.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsEncryptedIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsEncryptedIdentity(communicationsEncryptedIdentity: Partial<CommunicationsEncryptedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsEncryptedIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsGuestIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsGuestIdentity(communicationsGuestIdentity: Partial<CommunicationsGuestIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsGuestIdentity),
        "email": n => { communicationsGuestIdentity.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsIdentitySet(communicationsIdentitySet: Partial<CommunicationsIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(communicationsIdentitySet),
        "applicationInstance": n => { communicationsIdentitySet.applicationInstance = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "assertedIdentity": n => { communicationsIdentitySet.assertedIdentity = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "azureCommunicationServicesUser": n => { communicationsIdentitySet.azureCommunicationServicesUser = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "encrypted": n => { communicationsIdentitySet.encrypted = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "endpointType": n => { communicationsIdentitySet.endpointType = n.getEnumValue<EndpointType>(EndpointTypeObject); },
        "guest": n => { communicationsIdentitySet.guest = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "onPremises": n => { communicationsIdentitySet.onPremises = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "phone": n => { communicationsIdentitySet.phone = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsPhoneIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsPhoneIdentity(communicationsPhoneIdentity: Partial<CommunicationsPhoneIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsPhoneIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @param CommunicationsUserIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsUserIdentity(communicationsUserIdentity: Partial<CommunicationsUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsUserIdentity),
        "tenantId": n => { communicationsUserIdentity.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ConnectionItem The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConnectionItem(connectionItem: Partial<ConnectionItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { connectionItem.backingStoreEnabled = true; },
        "connectionId": n => { connectionItem.connectionId = n.getStringValue(); },
        "@odata.type": n => { connectionItem.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CopilotAdmin The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotAdmin(copilotAdmin: Partial<CopilotAdmin> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotAdmin),
        "settings": n => { copilotAdmin.settings = n.getObjectValue<CopilotAdminSetting>(createCopilotAdminSettingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CopilotAdminLimitedMode The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotAdminLimitedMode(copilotAdminLimitedMode: Partial<CopilotAdminLimitedMode> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotAdminLimitedMode),
        "groupId": n => { copilotAdminLimitedMode.groupId = n.getStringValue(); },
        "isEnabledForGroup": n => { copilotAdminLimitedMode.isEnabledForGroup = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param CopilotAdminSetting The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotAdminSetting(copilotAdminSetting: Partial<CopilotAdminSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotAdminSetting),
        "limitedMode": n => { copilotAdminSetting.limitedMode = n.getObjectValue<CopilotAdminLimitedMode>(createCopilotAdminLimitedModeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CopilotCommunicationsRoot The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotCommunicationsRoot(copilotCommunicationsRoot: Partial<CopilotCommunicationsRoot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotCommunicationsRoot),
        "realtimeActivityFeed": n => { copilotCommunicationsRoot.realtimeActivityFeed = n.getObjectValue<RealtimeActivityFeedRoot>(createRealtimeActivityFeedRootFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CopilotPeopleAdminSetting The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotPeopleAdminSetting(copilotPeopleAdminSetting: Partial<CopilotPeopleAdminSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotPeopleAdminSetting),
        "enhancedPersonalization": n => { copilotPeopleAdminSetting.enhancedPersonalization = n.getObjectValue<EnhancedPersonalizationSetting>(createEnhancedPersonalizationSettingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param CopilotSetting The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotSetting(copilotSetting: Partial<CopilotSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotSetting),
        "people": n => { copilotSetting.people = n.getObjectValue<CopilotPeopleAdminSetting>(createCopilotPeopleAdminSettingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param DataSourceConfiguration The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDataSourceConfiguration(dataSourceConfiguration: Partial<DataSourceConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { dataSourceConfiguration.backingStoreEnabled = true; },
        "externalItem": n => { dataSourceConfiguration.externalItem = n.getObjectValue<ExternalItemConfiguration>(createExternalItemConfigurationFromDiscriminatorValue); },
        "@odata.type": n => { dataSourceConfiguration.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param DetailsInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDetailsInfo(detailsInfo: Partial<DetailsInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { detailsInfo.backingStoreEnabled = true; },
        "@odata.type": n => { detailsInfo.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Dictionaries The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDictionaries(dictionaries: Partial<Dictionaries> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { dictionaries.backingStoreEnabled = true; },
        "@odata.type": n => { dictionaries.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param EmailIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmailIdentity(emailIdentity: Partial<EmailIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(emailIdentity),
        "email": n => { emailIdentity.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param EngagementIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEngagementIdentitySet(engagementIdentitySet: Partial<EngagementIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(engagementIdentitySet),
        "audience": n => { engagementIdentitySet.audience = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "group": n => { engagementIdentitySet.group = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param EnhancedPersonalizationSetting The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEnhancedPersonalizationSetting(enhancedPersonalizationSetting: Partial<EnhancedPersonalizationSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(enhancedPersonalizationSetting),
        "disabledForGroup": n => { enhancedPersonalizationSetting.disabledForGroup = n.getStringValue(); },
        "isEnabledInOrganization": n => { enhancedPersonalizationSetting.isEnabledInOrganization = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Entity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEntity(entity: Partial<Entity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { entity.backingStoreEnabled = true; },
        "id": n => { entity.id = n.getStringValue(); },
        "@odata.type": n => { entity.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ExternalItemConfiguration The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExternalItemConfiguration(externalItemConfiguration: Partial<ExternalItemConfiguration> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { externalItemConfiguration.backingStoreEnabled = true; },
        "connections": n => { externalItemConfiguration.connections = n.getCollectionOfObjectValues<ConnectionItem>(createConnectionItemFromDiscriminatorValue); },
        "@odata.type": n => { externalItemConfiguration.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Identity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIdentity(identity: Partial<Identity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { identity.backingStoreEnabled = true; },
        "displayName": n => { identity.displayName = n.getStringValue(); },
        "id": n => { identity.id = n.getStringValue(); },
        "@odata.type": n => { identity.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param IdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIdentitySet(identitySet: Partial<IdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "application": n => { identitySet.application = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "backingStoreEnabled": n => { identitySet.backingStoreEnabled = true; },
        "device": n => { identitySet.device = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "@odata.type": n => { identitySet.odataType = n.getStringValue(); },
        "user": n => { identitySet.user = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Initiator The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInitiator(initiator: Partial<Initiator> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(initiator),
        "initiatorType": n => { initiator.initiatorType = n.getEnumValue<InitiatorType>(InitiatorTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ItemBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoItemBody(itemBody: Partial<ItemBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { itemBody.backingStoreEnabled = true; },
        "content": n => { itemBody.content = n.getStringValue(); },
        "contentType": n => { itemBody.contentType = n.getEnumValue<BodyType>(BodyTypeObject); },
        "@odata.type": n => { itemBody.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param JoinMeetingIdMeetingInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoJoinMeetingIdMeetingInfo(joinMeetingIdMeetingInfo: Partial<JoinMeetingIdMeetingInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMeetingInfo(joinMeetingIdMeetingInfo),
        "joinMeetingId": n => { joinMeetingIdMeetingInfo.joinMeetingId = n.getStringValue(); },
        "passcode": n => { joinMeetingIdMeetingInfo.passcode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MeetingInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMeetingInfo(meetingInfo: Partial<MeetingInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allowConversationWithoutHost": n => { meetingInfo.allowConversationWithoutHost = n.getBooleanValue(); },
        "backingStoreEnabled": n => { meetingInfo.backingStoreEnabled = true; },
        "@odata.type": n => { meetingInfo.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MeetingNote The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMeetingNote(meetingNote: Partial<MeetingNote> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { meetingNote.backingStoreEnabled = true; },
        "@odata.type": n => { meetingNote.odataType = n.getStringValue(); },
        "subpoints": n => { meetingNote.subpoints = n.getCollectionOfObjectValues<MeetingNoteSubpoint>(createMeetingNoteSubpointFromDiscriminatorValue); },
        "text": n => { meetingNote.text = n.getStringValue(); },
        "title": n => { meetingNote.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MeetingNoteSubpoint The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMeetingNoteSubpoint(meetingNoteSubpoint: Partial<MeetingNoteSubpoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { meetingNoteSubpoint.backingStoreEnabled = true; },
        "@odata.type": n => { meetingNoteSubpoint.odataType = n.getStringValue(); },
        "text": n => { meetingNoteSubpoint.text = n.getStringValue(); },
        "title": n => { meetingNoteSubpoint.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MentionEvent The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMentionEvent(mentionEvent: Partial<MentionEvent> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { mentionEvent.backingStoreEnabled = true; },
        "eventDateTime": n => { mentionEvent.eventDateTime = n.getDateValue(); },
        "@odata.type": n => { mentionEvent.odataType = n.getStringValue(); },
        "speaker": n => { mentionEvent.speaker = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "transcriptUtterance": n => { mentionEvent.transcriptUtterance = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MultiActivitySubscription The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMultiActivitySubscription(multiActivitySubscription: Partial<MultiActivitySubscription> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(multiActivitySubscription),
        "activities": n => { multiActivitySubscription.activities = n.getObjectValue<SubscriptionActivities>(createSubscriptionActivitiesFromDiscriminatorValue); },
        "callbackUrl": n => { multiActivitySubscription.callbackUrl = n.getStringValue(); },
        "chatInfo": n => { multiActivitySubscription.chatInfo = n.getObjectValue<ChatInfo>(createChatInfoFromDiscriminatorValue); },
        "meetingInfo": n => { multiActivitySubscription.meetingInfo = n.getObjectValue<MeetingInfo>(createMeetingInfoFromDiscriminatorValue); },
        "userId": n => { multiActivitySubscription.userId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MultiActivitySubscriptionCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMultiActivitySubscriptionCollectionResponse(multiActivitySubscriptionCollectionResponse: Partial<MultiActivitySubscriptionCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(multiActivitySubscriptionCollectionResponse),
        "value": n => { multiActivitySubscriptionCollectionResponse.value = n.getCollectionOfObjectValues<MultiActivitySubscription>(createMultiActivitySubscriptionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param OrganizerMeetingInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOrganizerMeetingInfo(organizerMeetingInfo: Partial<OrganizerMeetingInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMeetingInfo(organizerMeetingInfo),
        "organizer": n => { organizerMeetingInfo.organizer = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProgramResource The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProgramResource(programResource: Partial<ProgramResource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(programResource),
        "type": n => { programResource.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProvisionedIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvisionedIdentity(provisionedIdentity: Partial<ProvisionedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisionedIdentity),
        "details": n => { provisionedIdentity.details = n.getObjectValue<DetailsInfo>(createDetailsInfoFromDiscriminatorValue); },
        "identityType": n => { provisionedIdentity.identityType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ProvisioningServicePrincipal The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvisioningServicePrincipal(provisioningServicePrincipal: Partial<ProvisioningServicePrincipal> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisioningServicePrincipal),
    }
}
/**
 * The deserialization information for the current model
 * @param ProvisioningSystem The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvisioningSystem(provisioningSystem: Partial<ProvisioningSystem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisioningSystem),
        "details": n => { provisioningSystem.details = n.getObjectValue<DetailsInfo>(createDetailsInfoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RealtimeActivityFeedRoot The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRealtimeActivityFeedRoot(realtimeActivityFeedRoot: Partial<RealtimeActivityFeedRoot> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(realtimeActivityFeedRoot),
        "meetings": n => { realtimeActivityFeedRoot.meetings = n.getCollectionOfObjectValues<RealtimeActivityMeeting>(createRealtimeActivityMeetingFromDiscriminatorValue); },
        "multiActivitySubscriptions": n => { realtimeActivityFeedRoot.multiActivitySubscriptions = n.getCollectionOfObjectValues<MultiActivitySubscription>(createMultiActivitySubscriptionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RealtimeActivityMeeting The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRealtimeActivityMeeting(realtimeActivityMeeting: Partial<RealtimeActivityMeeting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(realtimeActivityMeeting),
        "transcripts": n => { realtimeActivityMeeting.transcripts = n.getCollectionOfObjectValues<RealTimeTranscript>(createRealTimeTranscriptFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RealtimeActivityMeetingCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRealtimeActivityMeetingCollectionResponse(realtimeActivityMeetingCollectionResponse: Partial<RealtimeActivityMeetingCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(realtimeActivityMeetingCollectionResponse),
        "value": n => { realtimeActivityMeetingCollectionResponse.value = n.getCollectionOfObjectValues<RealtimeActivityMeeting>(createRealtimeActivityMeetingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RealTimeTranscript The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRealTimeTranscript(realTimeTranscript: Partial<RealTimeTranscript> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(realTimeTranscript),
        "payloads": n => { realTimeTranscript.payloads = n.getCollectionOfObjectValues<TranscriptPayload>(createTranscriptPayloadFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RealTimeTranscriptCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRealTimeTranscriptCollectionResponse(realTimeTranscriptCollectionResponse: Partial<RealTimeTranscriptCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(realTimeTranscriptCollectionResponse),
        "value": n => { realTimeTranscriptCollectionResponse.value = n.getCollectionOfObjectValues<RealTimeTranscript>(createRealTimeTranscriptFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param ResultInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResultInfo(resultInfo: Partial<ResultInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { resultInfo.backingStoreEnabled = true; },
        "code": n => { resultInfo.code = n.getNumberValue(); },
        "message": n => { resultInfo.message = n.getStringValue(); },
        "@odata.type": n => { resultInfo.odataType = n.getStringValue(); },
        "subcode": n => { resultInfo.subcode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param RetrievalExtract The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalExtract(retrievalExtract: Partial<RetrievalExtract> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retrievalExtract.backingStoreEnabled = true; },
        "@odata.type": n => { retrievalExtract.odataType = n.getStringValue(); },
        "text": n => { retrievalExtract.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param RetrievalHit The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalHit(retrievalHit: Partial<RetrievalHit> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retrievalHit.backingStoreEnabled = true; },
        "extracts": n => { retrievalHit.extracts = n.getCollectionOfObjectValues<RetrievalExtract>(createRetrievalExtractFromDiscriminatorValue); },
        "@odata.type": n => { retrievalHit.odataType = n.getStringValue(); },
        "resourceMetadata": n => { retrievalHit.resourceMetadata = n.getObjectValue<SearchResourceMetadataDictionary>(createSearchResourceMetadataDictionaryFromDiscriminatorValue); },
        "resourceType": n => { retrievalHit.resourceType = n.getEnumValue<RetrievalEntityType>(RetrievalEntityTypeObject); },
        "sensitivityLabel": n => { retrievalHit.sensitivityLabel = n.getObjectValue<SearchSensitivityLabelInfo>(createSearchSensitivityLabelInfoFromDiscriminatorValue); },
        "webUrl": n => { retrievalHit.webUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param RetrievalResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalResponse(retrievalResponse: Partial<RetrievalResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retrievalResponse.backingStoreEnabled = true; },
        "@odata.type": n => { retrievalResponse.odataType = n.getStringValue(); },
        "retrievalHits": n => { retrievalResponse.retrievalHits = n.getCollectionOfObjectValues<RetrievalHit>(createRetrievalHitFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SearchResourceMetadataDictionary The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchResourceMetadataDictionary(searchResourceMetadataDictionary: Partial<SearchResourceMetadataDictionary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDictionaries(searchResourceMetadataDictionary),
    }
}
/**
 * The deserialization information for the current model
 * @param SearchSensitivityLabelInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchSensitivityLabelInfo(searchSensitivityLabelInfo: Partial<SearchSensitivityLabelInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { searchSensitivityLabelInfo.backingStoreEnabled = true; },
        "color": n => { searchSensitivityLabelInfo.color = n.getStringValue(); },
        "displayName": n => { searchSensitivityLabelInfo.displayName = n.getStringValue(); },
        "@odata.type": n => { searchSensitivityLabelInfo.odataType = n.getStringValue(); },
        "priority": n => { searchSensitivityLabelInfo.priority = n.getNumberValue(); },
        "sensitivityLabelId": n => { searchSensitivityLabelInfo.sensitivityLabelId = n.getStringValue(); },
        "tooltip": n => { searchSensitivityLabelInfo.tooltip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ServicePrincipalIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServicePrincipalIdentity(servicePrincipalIdentity: Partial<ServicePrincipalIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(servicePrincipalIdentity),
        "appId": n => { servicePrincipalIdentity.appId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SharePointIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSharePointIdentity(sharePointIdentity: Partial<SharePointIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(sharePointIdentity),
        "loginName": n => { sharePointIdentity.loginName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SharePointIdentitySet The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSharePointIdentitySet(sharePointIdentitySet: Partial<SharePointIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(sharePointIdentitySet),
        "group": n => { sharePointIdentitySet.group = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "siteGroup": n => { sharePointIdentitySet.siteGroup = n.getObjectValue<SharePointIdentity>(createSharePointIdentityFromDiscriminatorValue); },
        "siteUser": n => { sharePointIdentitySet.siteUser = n.getObjectValue<SharePointIdentity>(createSharePointIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param SourceProvisionedIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSourceProvisionedIdentity(sourceProvisionedIdentity: Partial<SourceProvisionedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(sourceProvisionedIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @param SpeakerInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSpeakerInfo(speakerInfo: Partial<SpeakerInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { speakerInfo.backingStoreEnabled = true; },
        "displayName": n => { speakerInfo.displayName = n.getStringValue(); },
        "@odata.type": n => { speakerInfo.odataType = n.getStringValue(); },
        "rawId": n => { speakerInfo.rawId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param SubscriptionActivities The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSubscriptionActivities(subscriptionActivities: Partial<SubscriptionActivities> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { subscriptionActivities.backingStoreEnabled = true; },
        "@odata.type": n => { subscriptionActivities.odataType = n.getStringValue(); },
        "transcript": n => { subscriptionActivities.transcript = n.getObjectValue<TranscriptActivity>(createTranscriptActivityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param TargetProvisionedIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTargetProvisionedIdentity(targetProvisionedIdentity: Partial<TargetProvisionedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(targetProvisionedIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @param TeamworkApplicationIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkApplicationIdentity(teamworkApplicationIdentity: Partial<TeamworkApplicationIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkApplicationIdentity),
        "applicationIdentityType": n => { teamworkApplicationIdentity.applicationIdentityType = n.getEnumValue<TeamworkApplicationIdentityType>(TeamworkApplicationIdentityTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param TeamworkConversationIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkConversationIdentity(teamworkConversationIdentity: Partial<TeamworkConversationIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkConversationIdentity),
        "conversationIdentityType": n => { teamworkConversationIdentity.conversationIdentityType = n.getEnumValue<TeamworkConversationIdentityType>(TeamworkConversationIdentityTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param TeamworkTagIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkTagIdentity(teamworkTagIdentity: Partial<TeamworkTagIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkTagIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @param TeamworkUserIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkUserIdentity(teamworkUserIdentity: Partial<TeamworkUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkUserIdentity),
        "userIdentityType": n => { teamworkUserIdentity.userIdentityType = n.getEnumValue<TeamworkUserIdentityType>(TeamworkUserIdentityTypeObject); },
        "userPrincipalName": n => { teamworkUserIdentity.userPrincipalName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TokenMeetingInfo The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTokenMeetingInfo(tokenMeetingInfo: Partial<TokenMeetingInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMeetingInfo(tokenMeetingInfo),
        "token": n => { tokenMeetingInfo.token = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TranscriptActivity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTranscriptActivity(transcriptActivity: Partial<TranscriptActivity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseActivity(transcriptActivity),
    }
}
/**
 * The deserialization information for the current model
 * @param TranscriptPayload The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTranscriptPayload(transcriptPayload: Partial<TranscriptPayload> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "audioCaptureDateTime": n => { transcriptPayload.audioCaptureDateTime = n.getDateValue(); },
        "backingStoreEnabled": n => { transcriptPayload.backingStoreEnabled = true; },
        "@odata.type": n => { transcriptPayload.odataType = n.getStringValue(); },
        "sequenceId": n => { transcriptPayload.sequenceId = n.getNumberValue(); },
        "speaker": n => { transcriptPayload.speaker = n.getObjectValue<TranscriptSpeaker>(createTranscriptSpeakerFromDiscriminatorValue); },
        "spokenLanguage": n => { transcriptPayload.spokenLanguage = n.getStringValue(); },
        "text": n => { transcriptPayload.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TranscriptSpeaker The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTranscriptSpeaker(transcriptSpeaker: Partial<TranscriptSpeaker> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { transcriptSpeaker.backingStoreEnabled = true; },
        "@odata.type": n => { transcriptSpeaker.odataType = n.getStringValue(); },
        "room": n => { transcriptSpeaker.room = n.getObjectValue<SpeakerInfo>(createSpeakerInfoFromDiscriminatorValue); },
        "user": n => { transcriptSpeaker.user = n.getObjectValue<SpeakerInfo>(createSpeakerInfoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param UserIdentity The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserIdentity(userIdentity: Partial<UserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(userIdentity),
        "ipAddress": n => { userIdentity.ipAddress = n.getStringValue(); },
        "userPrincipalName": n => { userIdentity.userPrincipalName = n.getStringValue(); },
    }
}
export interface DetailsInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Dictionaries extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface EmailIdentity extends Identity, Parsable {
    /**
     * Email address of the user.
     */
    email?: string | null;
}
export type EndpointType = (typeof EndpointTypeObject)[keyof typeof EndpointTypeObject];
/**
 * The Viva Engage identities.
 */
export interface EngagementIdentitySet extends IdentitySet, Parsable {
    /**
     * Optional. The audience associated with this action.
     */
    audience?: Identity | null;
    /**
     * Optional. The group associated with this action.
     */
    group?: Identity | null;
}
export interface EnhancedPersonalizationSetting extends Entity, Parsable {
    /**
     * The ID of a Microsoft Entra group to which the value is used to disable the control for populated users. The default value is null. This parameter is optional.
     */
    disabledForGroup?: string | null;
    /**
     * If true, enables the enhanced personalization control and therefore related features as defined in control enhanced personalization privacy
     */
    isEnabledInOrganization?: boolean | null;
}
export interface Entity extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The unique identifier for an entity. Read-only.
     */
    id?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface ExternalItemConfiguration extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The connections property
     */
    connections?: ConnectionItem[] | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Identity extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The display name of the identity. This property is read-only.
     */
    displayName?: string | null;
    /**
     * The identifier of the identity. This property is read-only.
     */
    id?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface IdentitySet extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Optional. The application associated with this action.
     */
    application?: Identity | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * Optional. The device associated with this action.
     */
    device?: Identity | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * Optional. The user associated with this action.
     */
    user?: Identity | null;
}
export interface Initiator extends Identity, Parsable {
    /**
     * The type of the initiator. Possible values are: user, application, system, unknownFutureValue.
     */
    initiatorType?: InitiatorType | null;
}
export type InitiatorType = (typeof InitiatorTypeObject)[keyof typeof InitiatorTypeObject];
export interface ItemBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The content of the item.
     */
    content?: string | null;
    /**
     * The type of the content. Possible values are text and html.
     */
    contentType?: BodyType | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface JoinMeetingIdMeetingInfo extends MeetingInfo, Parsable {
    /**
     * The ID used to join the meeting.
     */
    joinMeetingId?: string | null;
    /**
     * The passcode used to join the meeting. Optional.
     */
    passcode?: string | null;
}
export interface MeetingInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The allowConversationWithoutHost property
     */
    allowConversationWithoutHost?: boolean | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface MeetingNote extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The subpoints property
     */
    subpoints?: MeetingNoteSubpoint[] | null;
    /**
     * The text property
     */
    text?: string | null;
    /**
     * The title property
     */
    title?: string | null;
}
export interface MeetingNoteSubpoint extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The text property
     */
    text?: string | null;
    /**
     * The title property
     */
    title?: string | null;
}
export interface MentionEvent extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The eventDateTime property
     */
    eventDateTime?: Date | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The speaker property
     */
    speaker?: IdentitySet | null;
    /**
     * The transcriptUtterance property
     */
    transcriptUtterance?: string | null;
}
export interface MultiActivitySubscription extends Entity, Parsable {
    /**
     * The activities property
     */
    activities?: SubscriptionActivities | null;
    /**
     * The callbackUrl property
     */
    callbackUrl?: string | null;
    /**
     * The chatInfo property
     */
    chatInfo?: ChatInfo | null;
    /**
     * The meetingInfo property
     */
    meetingInfo?: MeetingInfo | null;
    /**
     * The userId property
     */
    userId?: string | null;
}
export interface MultiActivitySubscriptionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: MultiActivitySubscription[] | null;
}
export interface OrganizerMeetingInfo extends MeetingInfo, Parsable {
    /**
     * The organizer property
     */
    organizer?: IdentitySet | null;
}
export interface ProgramResource extends Identity, Parsable {
    /**
     * Type of the resource, indicating whether it is a group or an app.
     */
    type?: string | null;
}
export interface ProvisionedIdentity extends Identity, Parsable {
    /**
     * Details of the identity.
     */
    details?: DetailsInfo | null;
    /**
     * Type of identity that has been provisioned, such as 'user' or 'group.' Supports $filter (eq, contains).
     */
    identityType?: string | null;
}
export interface ProvisioningServicePrincipal extends Identity, Parsable {
}
export interface ProvisioningSystem extends Identity, Parsable {
    /**
     * Details of the system.
     */
    details?: DetailsInfo | null;
}
export interface RealtimeActivityFeedRoot extends Entity, Parsable {
    /**
     * The meetings property
     */
    meetings?: RealtimeActivityMeeting[] | null;
    /**
     * The multiActivitySubscriptions property
     */
    multiActivitySubscriptions?: MultiActivitySubscription[] | null;
}
export interface RealtimeActivityMeeting extends Entity, Parsable {
    /**
     * The transcripts property
     */
    transcripts?: RealTimeTranscript[] | null;
}
export interface RealtimeActivityMeetingCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RealtimeActivityMeeting[] | null;
}
export interface RealTimeTranscript extends Entity, Parsable {
    /**
     * The payloads property
     */
    payloads?: TranscriptPayload[] | null;
}
export interface RealTimeTranscriptCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: RealTimeTranscript[] | null;
}
export interface ResultInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The result code.
     */
    code?: number | null;
    /**
     * The message.
     */
    message?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The result sub-code.
     */
    subcode?: number | null;
}
export type RetrievalDataSource = (typeof RetrievalDataSourceObject)[keyof typeof RetrievalDataSourceObject];
export type RetrievalEntityType = (typeof RetrievalEntityTypeObject)[keyof typeof RetrievalEntityTypeObject];
export interface RetrievalExtract extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The text property
     */
    text?: string | null;
}
export interface RetrievalHit extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The extracts property
     */
    extracts?: RetrievalExtract[] | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The resourceMetadata property
     */
    resourceMetadata?: SearchResourceMetadataDictionary | null;
    /**
     * The resourceType property
     */
    resourceType?: RetrievalEntityType | null;
    /**
     * The sensitivityLabel property
     */
    sensitivityLabel?: SearchSensitivityLabelInfo | null;
    /**
     * The webUrl property
     */
    webUrl?: string | null;
}
export interface RetrievalResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The retrievalHits property
     */
    retrievalHits?: RetrievalHit[] | null;
}
export interface SearchResourceMetadataDictionary extends Dictionaries, Parsable {
}
/**
 * Represents a sensitivityLabel.This model is shared with the CCS retrieval API and search where it is already unhidden.
 */
export interface SearchSensitivityLabelInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The priority property
     */
    priority?: number | null;
    /**
     * The sensitivityLabelId property
     */
    sensitivityLabelId?: string | null;
    /**
     * The tooltip property
     */
    tooltip?: string | null;
}
/**
 * Serializes information the current object
 * @param ActionItem The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionItem(writer: SerializationWriter, actionItem: Partial<ActionItem> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!actionItem || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", actionItem.odataType);
    writer.writeStringValue("ownerDisplayName", actionItem.ownerDisplayName);
    writer.writeStringValue("text", actionItem.text);
    writer.writeStringValue("title", actionItem.title);
    writer.writeAdditionalData(actionItem.additionalData);
}
/**
 * Serializes information the current object
 * @param ActivityTransport The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActivityTransport(writer: SerializationWriter, activityTransport: Partial<ActivityTransport> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!activityTransport || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ConnectionType>("connectionType", activityTransport.connectionType);
    writer.writeStringValue("@odata.type", activityTransport.odataType);
    writer.writeStringValue("url", activityTransport.url);
    writer.writeAdditionalData(activityTransport.additionalData);
}
/**
 * Serializes information the current object
 * @param AiInteraction The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteraction(writer: SerializationWriter, aiInteraction: Partial<AiInteraction> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteraction || isSerializingDerivedType) { return; }
    serializeEntity(writer, aiInteraction, isSerializingDerivedType)
    writer.writeStringValue("appClass", aiInteraction.appClass);
    writer.writeCollectionOfObjectValues<AiInteractionAttachment>("attachments", aiInteraction.attachments, serializeAiInteractionAttachment);
    writer.writeObjectValue<ItemBody>("body", aiInteraction.body, serializeItemBody);
    writer.writeCollectionOfObjectValues<AiInteractionContext>("contexts", aiInteraction.contexts, serializeAiInteractionContext);
    writer.writeStringValue("conversationType", aiInteraction.conversationType);
    writer.writeDateValue("createdDateTime", aiInteraction.createdDateTime);
    writer.writeStringValue("etag", aiInteraction.etag);
    writer.writeObjectValue<IdentitySet>("from", aiInteraction.from, serializeIdentitySet);
    writer.writeEnumValue<AiInteractionType>("interactionType", aiInteraction.interactionType);
    writer.writeCollectionOfObjectValues<AiInteractionLink>("links", aiInteraction.links, serializeAiInteractionLink);
    writer.writeStringValue("locale", aiInteraction.locale);
    writer.writeCollectionOfObjectValues<AiInteractionMention>("mentions", aiInteraction.mentions, serializeAiInteractionMention);
    writer.writeStringValue("requestId", aiInteraction.requestId);
    writer.writeStringValue("sessionId", aiInteraction.sessionId);
}
/**
 * Serializes information the current object
 * @param AiInteractionAttachment The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionAttachment(writer: SerializationWriter, aiInteractionAttachment: Partial<AiInteractionAttachment> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteractionAttachment || isSerializingDerivedType) { return; }
    writer.writeStringValue("attachmentId", aiInteractionAttachment.attachmentId);
    writer.writeStringValue("content", aiInteractionAttachment.content);
    writer.writeStringValue("contentType", aiInteractionAttachment.contentType);
    writer.writeStringValue("contentUrl", aiInteractionAttachment.contentUrl);
    writer.writeStringValue("name", aiInteractionAttachment.name);
    writer.writeStringValue("@odata.type", aiInteractionAttachment.odataType);
    writer.writeAdditionalData(aiInteractionAttachment.additionalData);
}
/**
 * Serializes information the current object
 * @param AiInteractionContext The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionContext(writer: SerializationWriter, aiInteractionContext: Partial<AiInteractionContext> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteractionContext || isSerializingDerivedType) { return; }
    writer.writeStringValue("contextReference", aiInteractionContext.contextReference);
    writer.writeStringValue("contextType", aiInteractionContext.contextType);
    writer.writeStringValue("displayName", aiInteractionContext.displayName);
    writer.writeStringValue("@odata.type", aiInteractionContext.odataType);
    writer.writeAdditionalData(aiInteractionContext.additionalData);
}
/**
 * Serializes information the current object
 * @param AiInteractionHistory The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionHistory(writer: SerializationWriter, aiInteractionHistory: Partial<AiInteractionHistory> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteractionHistory || isSerializingDerivedType) { return; }
    serializeEntity(writer, aiInteractionHistory, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param AiInteractionLink The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionLink(writer: SerializationWriter, aiInteractionLink: Partial<AiInteractionLink> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteractionLink || isSerializingDerivedType) { return; }
    writer.writeStringValue("displayName", aiInteractionLink.displayName);
    writer.writeStringValue("linkType", aiInteractionLink.linkType);
    writer.writeStringValue("linkUrl", aiInteractionLink.linkUrl);
    writer.writeStringValue("@odata.type", aiInteractionLink.odataType);
    writer.writeAdditionalData(aiInteractionLink.additionalData);
}
/**
 * Serializes information the current object
 * @param AiInteractionMention The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionMention(writer: SerializationWriter, aiInteractionMention: Partial<AiInteractionMention> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteractionMention || isSerializingDerivedType) { return; }
    writer.writeObjectValue<AiInteractionMentionedIdentitySet>("mentioned", aiInteractionMention.mentioned, serializeAiInteractionMentionedIdentitySet);
    writer.writeNumberValue("mentionId", aiInteractionMention.mentionId);
    writer.writeStringValue("mentionText", aiInteractionMention.mentionText);
    writer.writeStringValue("@odata.type", aiInteractionMention.odataType);
    writer.writeAdditionalData(aiInteractionMention.additionalData);
}
/**
 * Serializes information the current object
 * @param AiInteractionMentionedIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionMentionedIdentitySet(writer: SerializationWriter, aiInteractionMentionedIdentitySet: Partial<AiInteractionMentionedIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiInteractionMentionedIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, aiInteractionMentionedIdentitySet, isSerializingDerivedType)
    writer.writeObjectValue<TeamworkConversationIdentity>("conversation", aiInteractionMentionedIdentitySet.conversation, serializeTeamworkConversationIdentity);
    writer.writeObjectValue<TeamworkTagIdentity>("tag", aiInteractionMentionedIdentitySet.tag, serializeTeamworkTagIdentity);
}
/**
 * Serializes information the current object
 * @param AiOnlineMeeting The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiOnlineMeeting(writer: SerializationWriter, aiOnlineMeeting: Partial<AiOnlineMeeting> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiOnlineMeeting || isSerializingDerivedType) { return; }
    serializeEntity(writer, aiOnlineMeeting, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<CallAiInsight>("aiInsights", aiOnlineMeeting.aiInsights, serializeCallAiInsight);
}
/**
 * Serializes information the current object
 * @param AiOnlineMeetingCollectionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiOnlineMeetingCollectionResponse(writer: SerializationWriter, aiOnlineMeetingCollectionResponse: Partial<AiOnlineMeetingCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiOnlineMeetingCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, aiOnlineMeetingCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<AiOnlineMeeting>("value", aiOnlineMeetingCollectionResponse.value, serializeAiOnlineMeeting);
}
/**
 * Serializes information the current object
 * @param AiUser The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiUser(writer: SerializationWriter, aiUser: Partial<AiUser> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiUser || isSerializingDerivedType) { return; }
    serializeEntity(writer, aiUser, isSerializingDerivedType)
    writer.writeObjectValue<AiInteractionHistory>("interactionHistory", aiUser.interactionHistory, serializeAiInteractionHistory);
    writer.writeCollectionOfObjectValues<AiOnlineMeeting>("onlineMeetings", aiUser.onlineMeetings, serializeAiOnlineMeeting);
}
/**
 * Serializes information the current object
 * @param AiUserCollectionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiUserCollectionResponse(writer: SerializationWriter, aiUserCollectionResponse: Partial<AiUserCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!aiUserCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, aiUserCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<AiUser>("value", aiUserCollectionResponse.value, serializeAiUser);
}
/**
 * Serializes information the current object
 * @param ApprovalIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeApprovalIdentitySet(writer: SerializationWriter, approvalIdentitySet: Partial<ApprovalIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!approvalIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, approvalIdentitySet, isSerializingDerivedType)
    writer.writeObjectValue<Identity>("group", approvalIdentitySet.group, serializeIdentity);
}
/**
 * Serializes information the current object
 * @param AuditUserIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAuditUserIdentity(writer: SerializationWriter, auditUserIdentity: Partial<AuditUserIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!auditUserIdentity || isSerializingDerivedType) { return; }
    serializeUserIdentity(writer, auditUserIdentity, isSerializingDerivedType)
    writer.writeStringValue("homeTenantId", auditUserIdentity.homeTenantId);
    writer.writeStringValue("homeTenantName", auditUserIdentity.homeTenantName);
}
/**
 * Serializes information the current object
 * @param AzureCommunicationServicesUserIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAzureCommunicationServicesUserIdentity(writer: SerializationWriter, azureCommunicationServicesUserIdentity: Partial<AzureCommunicationServicesUserIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!azureCommunicationServicesUserIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, azureCommunicationServicesUserIdentity, isSerializingDerivedType)
    writer.writeStringValue("azureCommunicationServicesResourceId", azureCommunicationServicesUserIdentity.azureCommunicationServicesResourceId);
}
/**
 * Serializes information the current object
 * @param BaseActivity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBaseActivity(writer: SerializationWriter, baseActivity: Partial<BaseActivity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!baseActivity || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", baseActivity.odataType);
    writer.writeObjectValue<ResultInfo>("resultInfo", baseActivity.resultInfo, serializeResultInfo);
    writer.writeEnumValue<ActivityStatus>("status", baseActivity.status);
    writer.writeObjectValue<ActivityTransport>("transport", baseActivity.transport, serializeActivityTransport);
    writer.writeAdditionalData(baseActivity.additionalData);
    switch (baseActivity.odataType) {
        case "#microsoft.graph.transcriptActivity":
            serializeTranscriptActivity(writer, baseActivity, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param BaseCollectionPaginationCountResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBaseCollectionPaginationCountResponse(writer: SerializationWriter, baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!baseCollectionPaginationCountResponse || isSerializingDerivedType) { return; }
    writer.writeNumberValue("@odata.count", baseCollectionPaginationCountResponse.odataCount);
    writer.writeStringValue("@odata.nextLink", baseCollectionPaginationCountResponse.odataNextLink);
    writer.writeAdditionalData(baseCollectionPaginationCountResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param CallAiInsight The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCallAiInsight(writer: SerializationWriter, callAiInsight: Partial<CallAiInsight> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!callAiInsight || isSerializingDerivedType) { return; }
    serializeEntity(writer, callAiInsight, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<ActionItem>("actionItems", callAiInsight.actionItems, serializeActionItem);
    writer.writeStringValue("callId", callAiInsight.callId);
    writer.writeStringValue("contentCorrelationId", callAiInsight.contentCorrelationId);
    writer.writeDateValue("createdDateTime", callAiInsight.createdDateTime);
    writer.writeDateValue("endDateTime", callAiInsight.endDateTime);
    writer.writeCollectionOfObjectValues<MeetingNote>("meetingNotes", callAiInsight.meetingNotes, serializeMeetingNote);
    writer.writeObjectValue<CallAiInsightViewPoint>("viewpoint", callAiInsight.viewpoint, serializeCallAiInsightViewPoint);
}
/**
 * Serializes information the current object
 * @param CallAiInsightCollectionResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCallAiInsightCollectionResponse(writer: SerializationWriter, callAiInsightCollectionResponse: Partial<CallAiInsightCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!callAiInsightCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, callAiInsightCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<CallAiInsight>("value", callAiInsightCollectionResponse.value, serializeCallAiInsight);
}
/**
 * Serializes information the current object
 * @param CallAiInsightViewPoint The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCallAiInsightViewPoint(writer: SerializationWriter, callAiInsightViewPoint: Partial<CallAiInsightViewPoint> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!callAiInsightViewPoint || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<MentionEvent>("mentionEvents", callAiInsightViewPoint.mentionEvents, serializeMentionEvent);
    writer.writeStringValue("@odata.type", callAiInsightViewPoint.odataType);
    writer.writeAdditionalData(callAiInsightViewPoint.additionalData);
}
/**
 * Serializes information the current object
 * @param ChatInfo The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatInfo(writer: SerializationWriter, chatInfo: Partial<ChatInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!chatInfo || isSerializingDerivedType) { return; }
    writer.writeStringValue("messageId", chatInfo.messageId);
    writer.writeStringValue("@odata.type", chatInfo.odataType);
    writer.writeStringValue("replyChainMessageId", chatInfo.replyChainMessageId);
    writer.writeStringValue("threadId", chatInfo.threadId);
    writer.writeAdditionalData(chatInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param ChatMessageFromIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatMessageFromIdentitySet(writer: SerializationWriter, chatMessageFromIdentitySet: Partial<ChatMessageFromIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!chatMessageFromIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, chatMessageFromIdentitySet, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param ChatMessageMentionedIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatMessageMentionedIdentitySet(writer: SerializationWriter, chatMessageMentionedIdentitySet: Partial<ChatMessageMentionedIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!chatMessageMentionedIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, chatMessageMentionedIdentitySet, isSerializingDerivedType)
    writer.writeObjectValue<TeamworkConversationIdentity>("conversation", chatMessageMentionedIdentitySet.conversation, serializeTeamworkConversationIdentity);
    writer.writeObjectValue<TeamworkTagIdentity>("tag", chatMessageMentionedIdentitySet.tag, serializeTeamworkTagIdentity);
}
/**
 * Serializes information the current object
 * @param ChatMessageReactionIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatMessageReactionIdentitySet(writer: SerializationWriter, chatMessageReactionIdentitySet: Partial<ChatMessageReactionIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!chatMessageReactionIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, chatMessageReactionIdentitySet, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param CommunicationsApplicationIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsApplicationIdentity(writer: SerializationWriter, communicationsApplicationIdentity: Partial<CommunicationsApplicationIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsApplicationIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, communicationsApplicationIdentity, isSerializingDerivedType)
    writer.writeStringValue("applicationType", communicationsApplicationIdentity.applicationType);
    writer.writeBooleanValue("hidden", communicationsApplicationIdentity.hidden);
}
/**
 * Serializes information the current object
 * @param CommunicationsApplicationInstanceIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsApplicationInstanceIdentity(writer: SerializationWriter, communicationsApplicationInstanceIdentity: Partial<CommunicationsApplicationInstanceIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsApplicationInstanceIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, communicationsApplicationInstanceIdentity, isSerializingDerivedType)
    writer.writeBooleanValue("hidden", communicationsApplicationInstanceIdentity.hidden);
    writer.writeStringValue("tenantId", communicationsApplicationInstanceIdentity.tenantId);
}
/**
 * Serializes information the current object
 * @param CommunicationsEncryptedIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsEncryptedIdentity(writer: SerializationWriter, communicationsEncryptedIdentity: Partial<CommunicationsEncryptedIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsEncryptedIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, communicationsEncryptedIdentity, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param CommunicationsGuestIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsGuestIdentity(writer: SerializationWriter, communicationsGuestIdentity: Partial<CommunicationsGuestIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsGuestIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, communicationsGuestIdentity, isSerializingDerivedType)
    writer.writeStringValue("email", communicationsGuestIdentity.email);
}
/**
 * Serializes information the current object
 * @param CommunicationsIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsIdentitySet(writer: SerializationWriter, communicationsIdentitySet: Partial<CommunicationsIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, communicationsIdentitySet, isSerializingDerivedType)
    writer.writeObjectValue<Identity>("applicationInstance", communicationsIdentitySet.applicationInstance, serializeIdentity);
    writer.writeObjectValue<Identity>("assertedIdentity", communicationsIdentitySet.assertedIdentity, serializeIdentity);
    writer.writeObjectValue<Identity>("azureCommunicationServicesUser", communicationsIdentitySet.azureCommunicationServicesUser, serializeIdentity);
    writer.writeObjectValue<Identity>("encrypted", communicationsIdentitySet.encrypted, serializeIdentity);
    writer.writeEnumValue<EndpointType>("endpointType", communicationsIdentitySet.endpointType);
    writer.writeObjectValue<Identity>("guest", communicationsIdentitySet.guest, serializeIdentity);
    writer.writeObjectValue<Identity>("onPremises", communicationsIdentitySet.onPremises, serializeIdentity);
    writer.writeObjectValue<Identity>("phone", communicationsIdentitySet.phone, serializeIdentity);
}
/**
 * Serializes information the current object
 * @param CommunicationsPhoneIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsPhoneIdentity(writer: SerializationWriter, communicationsPhoneIdentity: Partial<CommunicationsPhoneIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsPhoneIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, communicationsPhoneIdentity, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param CommunicationsUserIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsUserIdentity(writer: SerializationWriter, communicationsUserIdentity: Partial<CommunicationsUserIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!communicationsUserIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, communicationsUserIdentity, isSerializingDerivedType)
    writer.writeStringValue("tenantId", communicationsUserIdentity.tenantId);
}
/**
 * Serializes information the current object
 * @param ConnectionItem The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConnectionItem(writer: SerializationWriter, connectionItem: Partial<ConnectionItem> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!connectionItem || isSerializingDerivedType) { return; }
    writer.writeStringValue("connectionId", connectionItem.connectionId);
    writer.writeStringValue("@odata.type", connectionItem.odataType);
    writer.writeAdditionalData(connectionItem.additionalData);
}
/**
 * Serializes information the current object
 * @param CopilotAdmin The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotAdmin(writer: SerializationWriter, copilotAdmin: Partial<CopilotAdmin> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copilotAdmin || isSerializingDerivedType) { return; }
    serializeEntity(writer, copilotAdmin, isSerializingDerivedType)
    writer.writeObjectValue<CopilotAdminSetting>("settings", copilotAdmin.settings, serializeCopilotAdminSetting);
}
/**
 * Serializes information the current object
 * @param CopilotAdminLimitedMode The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotAdminLimitedMode(writer: SerializationWriter, copilotAdminLimitedMode: Partial<CopilotAdminLimitedMode> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copilotAdminLimitedMode || isSerializingDerivedType) { return; }
    serializeEntity(writer, copilotAdminLimitedMode, isSerializingDerivedType)
    writer.writeStringValue("groupId", copilotAdminLimitedMode.groupId);
    writer.writeBooleanValue("isEnabledForGroup", copilotAdminLimitedMode.isEnabledForGroup);
}
/**
 * Serializes information the current object
 * @param CopilotAdminSetting The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotAdminSetting(writer: SerializationWriter, copilotAdminSetting: Partial<CopilotAdminSetting> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copilotAdminSetting || isSerializingDerivedType) { return; }
    serializeEntity(writer, copilotAdminSetting, isSerializingDerivedType)
    writer.writeObjectValue<CopilotAdminLimitedMode>("limitedMode", copilotAdminSetting.limitedMode, serializeCopilotAdminLimitedMode);
}
/**
 * Serializes information the current object
 * @param CopilotCommunicationsRoot The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotCommunicationsRoot(writer: SerializationWriter, copilotCommunicationsRoot: Partial<CopilotCommunicationsRoot> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copilotCommunicationsRoot || isSerializingDerivedType) { return; }
    serializeEntity(writer, copilotCommunicationsRoot, isSerializingDerivedType)
    writer.writeObjectValue<RealtimeActivityFeedRoot>("realtimeActivityFeed", copilotCommunicationsRoot.realtimeActivityFeed, serializeRealtimeActivityFeedRoot);
}
/**
 * Serializes information the current object
 * @param CopilotPeopleAdminSetting The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotPeopleAdminSetting(writer: SerializationWriter, copilotPeopleAdminSetting: Partial<CopilotPeopleAdminSetting> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copilotPeopleAdminSetting || isSerializingDerivedType) { return; }
    serializeEntity(writer, copilotPeopleAdminSetting, isSerializingDerivedType)
    writer.writeObjectValue<EnhancedPersonalizationSetting>("enhancedPersonalization", copilotPeopleAdminSetting.enhancedPersonalization, serializeEnhancedPersonalizationSetting);
}
/**
 * Serializes information the current object
 * @param CopilotSetting The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotSetting(writer: SerializationWriter, copilotSetting: Partial<CopilotSetting> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copilotSetting || isSerializingDerivedType) { return; }
    serializeEntity(writer, copilotSetting, isSerializingDerivedType)
    writer.writeObjectValue<CopilotPeopleAdminSetting>("people", copilotSetting.people, serializeCopilotPeopleAdminSetting);
}
/**
 * Serializes information the current object
 * @param DataSourceConfiguration The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDataSourceConfiguration(writer: SerializationWriter, dataSourceConfiguration: Partial<DataSourceConfiguration> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dataSourceConfiguration || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ExternalItemConfiguration>("externalItem", dataSourceConfiguration.externalItem, serializeExternalItemConfiguration);
    writer.writeStringValue("@odata.type", dataSourceConfiguration.odataType);
    writer.writeAdditionalData(dataSourceConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param DetailsInfo The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDetailsInfo(writer: SerializationWriter, detailsInfo: Partial<DetailsInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!detailsInfo || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", detailsInfo.odataType);
    writer.writeAdditionalData(detailsInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param Dictionaries The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDictionaries(writer: SerializationWriter, dictionaries: Partial<Dictionaries> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!dictionaries || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", dictionaries.odataType);
    writer.writeAdditionalData(dictionaries.additionalData);
    switch (dictionaries.odataType) {
        case "#microsoft.graph.searchResourceMetadataDictionary":
            serializeSearchResourceMetadataDictionary(writer, dictionaries, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param EmailIdentity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmailIdentity(writer: SerializationWriter, emailIdentity: Partial<EmailIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!emailIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, emailIdentity, isSerializingDerivedType)
    writer.writeStringValue("email", emailIdentity.email);
}
/**
 * Serializes information the current object
 * @param EngagementIdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEngagementIdentitySet(writer: SerializationWriter, engagementIdentitySet: Partial<EngagementIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!engagementIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, engagementIdentitySet, isSerializingDerivedType)
    writer.writeObjectValue<Identity>("audience", engagementIdentitySet.audience, serializeIdentity);
    writer.writeObjectValue<Identity>("group", engagementIdentitySet.group, serializeIdentity);
}
/**
 * Serializes information the current object
 * @param EnhancedPersonalizationSetting The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEnhancedPersonalizationSetting(writer: SerializationWriter, enhancedPersonalizationSetting: Partial<EnhancedPersonalizationSetting> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!enhancedPersonalizationSetting || isSerializingDerivedType) { return; }
    serializeEntity(writer, enhancedPersonalizationSetting, isSerializingDerivedType)
    writer.writeStringValue("disabledForGroup", enhancedPersonalizationSetting.disabledForGroup);
    writer.writeBooleanValue("isEnabledInOrganization", enhancedPersonalizationSetting.isEnabledInOrganization);
}
/**
 * Serializes information the current object
 * @param Entity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEntity(writer: SerializationWriter, entity: Partial<Entity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!entity || isSerializingDerivedType) { return; }
    writer.writeStringValue("id", entity.id);
    writer.writeStringValue("@odata.type", entity.odataType);
    writer.writeAdditionalData(entity.additionalData);
    switch (entity.odataType) {
        case "#microsoft.graph.aiInteraction":
            serializeAiInteraction(writer, entity, true);
        break;
        case "#microsoft.graph.aiInteractionHistory":
            serializeAiInteractionHistory(writer, entity, true);
        break;
        case "#microsoft.graph.aiOnlineMeeting":
            serializeAiOnlineMeeting(writer, entity, true);
        break;
        case "#microsoft.graph.aiUser":
            serializeAiUser(writer, entity, true);
        break;
        case "#microsoft.graph.callAiInsight":
            serializeCallAiInsight(writer, entity, true);
        break;
        case "#microsoft.graph.copilotAdmin":
            serializeCopilotAdmin(writer, entity, true);
        break;
        case "#microsoft.graph.copilotAdminLimitedMode":
            serializeCopilotAdminLimitedMode(writer, entity, true);
        break;
        case "#microsoft.graph.copilotAdminSetting":
            serializeCopilotAdminSetting(writer, entity, true);
        break;
        case "#microsoft.graph.copilotCommunicationsRoot":
            serializeCopilotCommunicationsRoot(writer, entity, true);
        break;
        case "#microsoft.graph.copilotPeopleAdminSetting":
            serializeCopilotPeopleAdminSetting(writer, entity, true);
        break;
        case "#microsoft.graph.copilotSetting":
            serializeCopilotSetting(writer, entity, true);
        break;
        case "#microsoft.graph.enhancedPersonalizationSetting":
            serializeEnhancedPersonalizationSetting(writer, entity, true);
        break;
        case "#microsoft.graph.multiActivitySubscription":
            serializeMultiActivitySubscription(writer, entity, true);
        break;
        case "#microsoft.graph.realtimeActivityFeedRoot":
            serializeRealtimeActivityFeedRoot(writer, entity, true);
        break;
        case "#microsoft.graph.realtimeActivityMeeting":
            serializeRealtimeActivityMeeting(writer, entity, true);
        break;
        case "#microsoft.graph.realTimeTranscript":
            serializeRealTimeTranscript(writer, entity, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param ExternalItemConfiguration The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExternalItemConfiguration(writer: SerializationWriter, externalItemConfiguration: Partial<ExternalItemConfiguration> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!externalItemConfiguration || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<ConnectionItem>("connections", externalItemConfiguration.connections, serializeConnectionItem);
    writer.writeStringValue("@odata.type", externalItemConfiguration.odataType);
    writer.writeAdditionalData(externalItemConfiguration.additionalData);
}
/**
 * Serializes information the current object
 * @param Identity The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIdentity(writer: SerializationWriter, identity: Partial<Identity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!identity || isSerializingDerivedType) { return; }
    writer.writeStringValue("displayName", identity.displayName);
    writer.writeStringValue("id", identity.id);
    writer.writeStringValue("@odata.type", identity.odataType);
    writer.writeAdditionalData(identity.additionalData);
    switch (identity.odataType) {
        case "#microsoft.graph.auditUserIdentity":
            serializeAuditUserIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.azureCommunicationServicesUserIdentity":
            serializeAzureCommunicationServicesUserIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.callRecords.userIdentity":
            serializeUserIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.communicationsApplicationIdentity":
            serializeCommunicationsApplicationIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.communicationsApplicationInstanceIdentity":
            serializeCommunicationsApplicationInstanceIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.communicationsEncryptedIdentity":
            serializeCommunicationsEncryptedIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.communicationsGuestIdentity":
            serializeCommunicationsGuestIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.communicationsPhoneIdentity":
            serializeCommunicationsPhoneIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.communicationsUserIdentity":
            serializeCommunicationsUserIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.emailIdentity":
            serializeEmailIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.initiator":
            serializeInitiator(writer, identity, true);
        break;
        case "#microsoft.graph.programResource":
            serializeProgramResource(writer, identity, true);
        break;
        case "#microsoft.graph.provisionedIdentity":
            serializeProvisionedIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.provisioningServicePrincipal":
            serializeProvisioningServicePrincipal(writer, identity, true);
        break;
        case "#microsoft.graph.provisioningSystem":
            serializeProvisioningSystem(writer, identity, true);
        break;
        case "#microsoft.graph.security.submissionUserIdentity":
            serializeSubmissionUserIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.servicePrincipalIdentity":
            serializeServicePrincipalIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.sharePointIdentity":
            serializeSharePointIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.sourceProvisionedIdentity":
            serializeSourceProvisionedIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.targetProvisionedIdentity":
            serializeTargetProvisionedIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.teamworkApplicationIdentity":
            serializeTeamworkApplicationIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.teamworkConversationIdentity":
            serializeTeamworkConversationIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.teamworkTagIdentity":
            serializeTeamworkTagIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.teamworkUserIdentity":
            serializeTeamworkUserIdentity(writer, identity, true);
        break;
        case "#microsoft.graph.userIdentity":
            serializeUserIdentity(writer, identity, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param IdentitySet The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIdentitySet(writer: SerializationWriter, identitySet: Partial<IdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!identitySet || isSerializingDerivedType) { return; }
    writer.writeObjectValue<Identity>("application", identitySet.application, serializeIdentity);
    writer.writeObjectValue<Identity>("device", identitySet.device, serializeIdentity);
    writer.writeStringValue("@odata.type", identitySet.odataType);
    writer.writeObjectValue<Identity>("user", identitySet.user, serializeIdentity);
    writer.writeAdditionalData(identitySet.additionalData);
    switch (identitySet.odataType) {
        case "#microsoft.graph.aiInteractionMentionedIdentitySet":
            serializeAiInteractionMentionedIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.approvalIdentitySet":
            serializeApprovalIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.chatMessageFromIdentitySet":
            serializeChatMessageFromIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.chatMessageMentionedIdentitySet":
            serializeChatMessageMentionedIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.chatMessageReactionIdentitySet":
            serializeChatMessageReactionIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.communicationsIdentitySet":
            serializeCommunicationsIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.engagementIdentitySet":
            serializeEngagementIdentitySet(writer, identitySet, true);
        break;
        case "#microsoft.graph.sharePointIdentitySet":
            serializeSharePointIdentitySet(writer, identitySet, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param Initiator The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInitiator(writer: SerializationWriter, initiator: Partial<Initiator> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!initiator || isSerializingDerivedType) { return; }
    serializeIdentity(writer, initiator, isSerializingDerivedType)
    writer.writeEnumValue<InitiatorType>("initiatorType", initiator.initiatorType);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ItemBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeItemBody(writer: SerializationWriter, itemBody: Partial<ItemBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!itemBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("content", itemBody.content);
    writer.writeEnumValue<BodyType>("contentType", itemBody.contentType);
    writer.writeStringValue("@odata.type", itemBody.odataType);
    writer.writeAdditionalData(itemBody.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param JoinMeetingIdMeetingInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeJoinMeetingIdMeetingInfo(writer: SerializationWriter, joinMeetingIdMeetingInfo: Partial<JoinMeetingIdMeetingInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!joinMeetingIdMeetingInfo || isSerializingDerivedType) { return; }
    serializeMeetingInfo(writer, joinMeetingIdMeetingInfo, isSerializingDerivedType)
    writer.writeStringValue("joinMeetingId", joinMeetingIdMeetingInfo.joinMeetingId);
    writer.writeStringValue("passcode", joinMeetingIdMeetingInfo.passcode);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MeetingInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMeetingInfo(writer: SerializationWriter, meetingInfo: Partial<MeetingInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!meetingInfo || isSerializingDerivedType) { return; }
    writer.writeBooleanValue("allowConversationWithoutHost", meetingInfo.allowConversationWithoutHost);
    writer.writeStringValue("@odata.type", meetingInfo.odataType);
    writer.writeAdditionalData(meetingInfo.additionalData);
    switch (meetingInfo.odataType) {
        case "#microsoft.graph.joinMeetingIdMeetingInfo":
            serializeJoinMeetingIdMeetingInfo(writer, meetingInfo, true);
        break;
        case "#microsoft.graph.organizerMeetingInfo":
            serializeOrganizerMeetingInfo(writer, meetingInfo, true);
        break;
        case "#microsoft.graph.tokenMeetingInfo":
            serializeTokenMeetingInfo(writer, meetingInfo, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MeetingNote The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMeetingNote(writer: SerializationWriter, meetingNote: Partial<MeetingNote> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!meetingNote || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", meetingNote.odataType);
    writer.writeCollectionOfObjectValues<MeetingNoteSubpoint>("subpoints", meetingNote.subpoints, serializeMeetingNoteSubpoint);
    writer.writeStringValue("text", meetingNote.text);
    writer.writeStringValue("title", meetingNote.title);
    writer.writeAdditionalData(meetingNote.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MeetingNoteSubpoint The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMeetingNoteSubpoint(writer: SerializationWriter, meetingNoteSubpoint: Partial<MeetingNoteSubpoint> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!meetingNoteSubpoint || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", meetingNoteSubpoint.odataType);
    writer.writeStringValue("text", meetingNoteSubpoint.text);
    writer.writeStringValue("title", meetingNoteSubpoint.title);
    writer.writeAdditionalData(meetingNoteSubpoint.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MentionEvent The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMentionEvent(writer: SerializationWriter, mentionEvent: Partial<MentionEvent> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!mentionEvent || isSerializingDerivedType) { return; }
    writer.writeDateValue("eventDateTime", mentionEvent.eventDateTime);
    writer.writeStringValue("@odata.type", mentionEvent.odataType);
    writer.writeObjectValue<IdentitySet>("speaker", mentionEvent.speaker, serializeIdentitySet);
    writer.writeStringValue("transcriptUtterance", mentionEvent.transcriptUtterance);
    writer.writeAdditionalData(mentionEvent.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MultiActivitySubscription The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMultiActivitySubscription(writer: SerializationWriter, multiActivitySubscription: Partial<MultiActivitySubscription> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!multiActivitySubscription || isSerializingDerivedType) { return; }
    serializeEntity(writer, multiActivitySubscription, isSerializingDerivedType)
    writer.writeObjectValue<SubscriptionActivities>("activities", multiActivitySubscription.activities, serializeSubscriptionActivities);
    writer.writeStringValue("callbackUrl", multiActivitySubscription.callbackUrl);
    writer.writeObjectValue<ChatInfo>("chatInfo", multiActivitySubscription.chatInfo, serializeChatInfo);
    writer.writeObjectValue<MeetingInfo>("meetingInfo", multiActivitySubscription.meetingInfo, serializeMeetingInfo);
    writer.writeStringValue("userId", multiActivitySubscription.userId);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MultiActivitySubscriptionCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMultiActivitySubscriptionCollectionResponse(writer: SerializationWriter, multiActivitySubscriptionCollectionResponse: Partial<MultiActivitySubscriptionCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!multiActivitySubscriptionCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, multiActivitySubscriptionCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<MultiActivitySubscription>("value", multiActivitySubscriptionCollectionResponse.value, serializeMultiActivitySubscription);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OrganizerMeetingInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOrganizerMeetingInfo(writer: SerializationWriter, organizerMeetingInfo: Partial<OrganizerMeetingInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!organizerMeetingInfo || isSerializingDerivedType) { return; }
    serializeMeetingInfo(writer, organizerMeetingInfo, isSerializingDerivedType)
    writer.writeObjectValue<IdentitySet>("organizer", organizerMeetingInfo.organizer, serializeIdentitySet);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProgramResource The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProgramResource(writer: SerializationWriter, programResource: Partial<ProgramResource> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!programResource || isSerializingDerivedType) { return; }
    serializeIdentity(writer, programResource, isSerializingDerivedType)
    writer.writeStringValue("type", programResource.type);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProvisionedIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvisionedIdentity(writer: SerializationWriter, provisionedIdentity: Partial<ProvisionedIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!provisionedIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, provisionedIdentity, isSerializingDerivedType)
    writer.writeObjectValue<DetailsInfo>("details", provisionedIdentity.details, serializeDetailsInfo);
    writer.writeStringValue("identityType", provisionedIdentity.identityType);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProvisioningServicePrincipal The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvisioningServicePrincipal(writer: SerializationWriter, provisioningServicePrincipal: Partial<ProvisioningServicePrincipal> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!provisioningServicePrincipal || isSerializingDerivedType) { return; }
    serializeIdentity(writer, provisioningServicePrincipal, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ProvisioningSystem The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvisioningSystem(writer: SerializationWriter, provisioningSystem: Partial<ProvisioningSystem> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!provisioningSystem || isSerializingDerivedType) { return; }
    serializeIdentity(writer, provisioningSystem, isSerializingDerivedType)
    writer.writeObjectValue<DetailsInfo>("details", provisioningSystem.details, serializeDetailsInfo);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RealtimeActivityFeedRoot The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRealtimeActivityFeedRoot(writer: SerializationWriter, realtimeActivityFeedRoot: Partial<RealtimeActivityFeedRoot> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!realtimeActivityFeedRoot || isSerializingDerivedType) { return; }
    serializeEntity(writer, realtimeActivityFeedRoot, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<RealtimeActivityMeeting>("meetings", realtimeActivityFeedRoot.meetings, serializeRealtimeActivityMeeting);
    writer.writeCollectionOfObjectValues<MultiActivitySubscription>("multiActivitySubscriptions", realtimeActivityFeedRoot.multiActivitySubscriptions, serializeMultiActivitySubscription);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RealtimeActivityMeeting The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRealtimeActivityMeeting(writer: SerializationWriter, realtimeActivityMeeting: Partial<RealtimeActivityMeeting> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!realtimeActivityMeeting || isSerializingDerivedType) { return; }
    serializeEntity(writer, realtimeActivityMeeting, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<RealTimeTranscript>("transcripts", realtimeActivityMeeting.transcripts, serializeRealTimeTranscript);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RealtimeActivityMeetingCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRealtimeActivityMeetingCollectionResponse(writer: SerializationWriter, realtimeActivityMeetingCollectionResponse: Partial<RealtimeActivityMeetingCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!realtimeActivityMeetingCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, realtimeActivityMeetingCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<RealtimeActivityMeeting>("value", realtimeActivityMeetingCollectionResponse.value, serializeRealtimeActivityMeeting);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RealTimeTranscript The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRealTimeTranscript(writer: SerializationWriter, realTimeTranscript: Partial<RealTimeTranscript> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!realTimeTranscript || isSerializingDerivedType) { return; }
    serializeEntity(writer, realTimeTranscript, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<TranscriptPayload>("payloads", realTimeTranscript.payloads, serializeTranscriptPayload);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RealTimeTranscriptCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRealTimeTranscriptCollectionResponse(writer: SerializationWriter, realTimeTranscriptCollectionResponse: Partial<RealTimeTranscriptCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!realTimeTranscriptCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, realTimeTranscriptCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<RealTimeTranscript>("value", realTimeTranscriptCollectionResponse.value, serializeRealTimeTranscript);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ResultInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResultInfo(writer: SerializationWriter, resultInfo: Partial<ResultInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!resultInfo || isSerializingDerivedType) { return; }
    writer.writeNumberValue("code", resultInfo.code);
    writer.writeStringValue("message", resultInfo.message);
    writer.writeStringValue("@odata.type", resultInfo.odataType);
    writer.writeNumberValue("subcode", resultInfo.subcode);
    writer.writeAdditionalData(resultInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RetrievalExtract The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalExtract(writer: SerializationWriter, retrievalExtract: Partial<RetrievalExtract> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!retrievalExtract || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", retrievalExtract.odataType);
    writer.writeStringValue("text", retrievalExtract.text);
    writer.writeAdditionalData(retrievalExtract.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RetrievalHit The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalHit(writer: SerializationWriter, retrievalHit: Partial<RetrievalHit> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!retrievalHit || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<RetrievalExtract>("extracts", retrievalHit.extracts, serializeRetrievalExtract);
    writer.writeStringValue("@odata.type", retrievalHit.odataType);
    writer.writeObjectValue<SearchResourceMetadataDictionary>("resourceMetadata", retrievalHit.resourceMetadata, serializeSearchResourceMetadataDictionary);
    writer.writeEnumValue<RetrievalEntityType>("resourceType", retrievalHit.resourceType);
    writer.writeObjectValue<SearchSensitivityLabelInfo>("sensitivityLabel", retrievalHit.sensitivityLabel, serializeSearchSensitivityLabelInfo);
    writer.writeStringValue("webUrl", retrievalHit.webUrl);
    writer.writeAdditionalData(retrievalHit.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RetrievalResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalResponse(writer: SerializationWriter, retrievalResponse: Partial<RetrievalResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!retrievalResponse || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", retrievalResponse.odataType);
    writer.writeCollectionOfObjectValues<RetrievalHit>("retrievalHits", retrievalResponse.retrievalHits, serializeRetrievalHit);
    writer.writeAdditionalData(retrievalResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SearchResourceMetadataDictionary The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchResourceMetadataDictionary(writer: SerializationWriter, searchResourceMetadataDictionary: Partial<SearchResourceMetadataDictionary> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!searchResourceMetadataDictionary || isSerializingDerivedType) { return; }
    serializeDictionaries(writer, searchResourceMetadataDictionary, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SearchSensitivityLabelInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchSensitivityLabelInfo(writer: SerializationWriter, searchSensitivityLabelInfo: Partial<SearchSensitivityLabelInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!searchSensitivityLabelInfo || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", searchSensitivityLabelInfo.odataType);
    writer.writeAdditionalData(searchSensitivityLabelInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ServicePrincipalIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServicePrincipalIdentity(writer: SerializationWriter, servicePrincipalIdentity: Partial<ServicePrincipalIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!servicePrincipalIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, servicePrincipalIdentity, isSerializingDerivedType)
    writer.writeStringValue("appId", servicePrincipalIdentity.appId);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SharePointIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSharePointIdentity(writer: SerializationWriter, sharePointIdentity: Partial<SharePointIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!sharePointIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, sharePointIdentity, isSerializingDerivedType)
    writer.writeStringValue("loginName", sharePointIdentity.loginName);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SharePointIdentitySet The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSharePointIdentitySet(writer: SerializationWriter, sharePointIdentitySet: Partial<SharePointIdentitySet> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!sharePointIdentitySet || isSerializingDerivedType) { return; }
    serializeIdentitySet(writer, sharePointIdentitySet, isSerializingDerivedType)
    writer.writeObjectValue<Identity>("group", sharePointIdentitySet.group, serializeIdentity);
    writer.writeObjectValue<SharePointIdentity>("siteGroup", sharePointIdentitySet.siteGroup, serializeSharePointIdentity);
    writer.writeObjectValue<SharePointIdentity>("siteUser", sharePointIdentitySet.siteUser, serializeSharePointIdentity);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SourceProvisionedIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSourceProvisionedIdentity(writer: SerializationWriter, sourceProvisionedIdentity: Partial<SourceProvisionedIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!sourceProvisionedIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, sourceProvisionedIdentity, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SpeakerInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSpeakerInfo(writer: SerializationWriter, speakerInfo: Partial<SpeakerInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!speakerInfo || isSerializingDerivedType) { return; }
    writer.writeStringValue("displayName", speakerInfo.displayName);
    writer.writeStringValue("@odata.type", speakerInfo.odataType);
    writer.writeStringValue("rawId", speakerInfo.rawId);
    writer.writeAdditionalData(speakerInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param SubscriptionActivities The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSubscriptionActivities(writer: SerializationWriter, subscriptionActivities: Partial<SubscriptionActivities> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!subscriptionActivities || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", subscriptionActivities.odataType);
    writer.writeObjectValue<TranscriptActivity>("transcript", subscriptionActivities.transcript, serializeTranscriptActivity);
    writer.writeAdditionalData(subscriptionActivities.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TargetProvisionedIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTargetProvisionedIdentity(writer: SerializationWriter, targetProvisionedIdentity: Partial<TargetProvisionedIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!targetProvisionedIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, targetProvisionedIdentity, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TeamworkApplicationIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkApplicationIdentity(writer: SerializationWriter, teamworkApplicationIdentity: Partial<TeamworkApplicationIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!teamworkApplicationIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, teamworkApplicationIdentity, isSerializingDerivedType)
    writer.writeEnumValue<TeamworkApplicationIdentityType>("applicationIdentityType", teamworkApplicationIdentity.applicationIdentityType);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TeamworkConversationIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkConversationIdentity(writer: SerializationWriter, teamworkConversationIdentity: Partial<TeamworkConversationIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!teamworkConversationIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, teamworkConversationIdentity, isSerializingDerivedType)
    writer.writeEnumValue<TeamworkConversationIdentityType>("conversationIdentityType", teamworkConversationIdentity.conversationIdentityType);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TeamworkTagIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkTagIdentity(writer: SerializationWriter, teamworkTagIdentity: Partial<TeamworkTagIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!teamworkTagIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, teamworkTagIdentity, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TeamworkUserIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkUserIdentity(writer: SerializationWriter, teamworkUserIdentity: Partial<TeamworkUserIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!teamworkUserIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, teamworkUserIdentity, isSerializingDerivedType)
    writer.writeEnumValue<TeamworkUserIdentityType>("userIdentityType", teamworkUserIdentity.userIdentityType);
    writer.writeStringValue("userPrincipalName", teamworkUserIdentity.userPrincipalName);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TokenMeetingInfo The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTokenMeetingInfo(writer: SerializationWriter, tokenMeetingInfo: Partial<TokenMeetingInfo> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tokenMeetingInfo || isSerializingDerivedType) { return; }
    serializeMeetingInfo(writer, tokenMeetingInfo, isSerializingDerivedType)
    writer.writeStringValue("token", tokenMeetingInfo.token);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TranscriptActivity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTranscriptActivity(writer: SerializationWriter, transcriptActivity: Partial<TranscriptActivity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!transcriptActivity || isSerializingDerivedType) { return; }
    serializeBaseActivity(writer, transcriptActivity, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TranscriptPayload The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTranscriptPayload(writer: SerializationWriter, transcriptPayload: Partial<TranscriptPayload> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!transcriptPayload || isSerializingDerivedType) { return; }
    writer.writeDateValue("audioCaptureDateTime", transcriptPayload.audioCaptureDateTime);
    writer.writeStringValue("@odata.type", transcriptPayload.odataType);
    writer.writeNumberValue("sequenceId", transcriptPayload.sequenceId);
    writer.writeObjectValue<TranscriptSpeaker>("speaker", transcriptPayload.speaker, serializeTranscriptSpeaker);
    writer.writeStringValue("spokenLanguage", transcriptPayload.spokenLanguage);
    writer.writeStringValue("text", transcriptPayload.text);
    writer.writeAdditionalData(transcriptPayload.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TranscriptSpeaker The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTranscriptSpeaker(writer: SerializationWriter, transcriptSpeaker: Partial<TranscriptSpeaker> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!transcriptSpeaker || isSerializingDerivedType) { return; }
    writer.writeStringValue("@odata.type", transcriptSpeaker.odataType);
    writer.writeObjectValue<SpeakerInfo>("room", transcriptSpeaker.room, serializeSpeakerInfo);
    writer.writeObjectValue<SpeakerInfo>("user", transcriptSpeaker.user, serializeSpeakerInfo);
    writer.writeAdditionalData(transcriptSpeaker.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UserIdentity The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserIdentity(writer: SerializationWriter, userIdentity: Partial<UserIdentity> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!userIdentity || isSerializingDerivedType) { return; }
    serializeIdentity(writer, userIdentity, isSerializingDerivedType)
    writer.writeStringValue("ipAddress", userIdentity.ipAddress);
    writer.writeStringValue("userPrincipalName", userIdentity.userPrincipalName);
    switch (userIdentity.odataType) {
        case "#microsoft.graph.auditUserIdentity":
            serializeAuditUserIdentity(writer, userIdentity, true);
        break;
    }
}
export interface ServicePrincipalIdentity extends Identity, Parsable {
    /**
     * The application identifier of the service principal.
     */
    appId?: string | null;
}
export interface SharePointIdentity extends Identity, Parsable {
    /**
     * The sign in name of the SharePoint identity.
     */
    loginName?: string | null;
}
export interface SharePointIdentitySet extends IdentitySet, Parsable {
    /**
     * The group associated with this action. Optional.
     */
    group?: Identity | null;
    /**
     * The SharePoint group associated with this action. Optional.
     */
    siteGroup?: SharePointIdentity | null;
    /**
     * The SharePoint user associated with this action. Optional.
     */
    siteUser?: SharePointIdentity | null;
}
export interface SourceProvisionedIdentity extends Identity, Parsable {
}
export interface SpeakerInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The rawId property
     */
    rawId?: string | null;
}
export interface SubscriptionActivities extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The transcript property
     */
    transcript?: TranscriptActivity | null;
}
export interface TargetProvisionedIdentity extends Identity, Parsable {
}
export interface TeamworkApplicationIdentity extends Identity, Parsable {
    /**
     * Type of application that is referenced. Possible values are: aadApplication, bot, tenantBot, office365Connector, and outgoingWebhook.
     */
    applicationIdentityType?: TeamworkApplicationIdentityType | null;
}
export type TeamworkApplicationIdentityType = (typeof TeamworkApplicationIdentityTypeObject)[keyof typeof TeamworkApplicationIdentityTypeObject];
export interface TeamworkConversationIdentity extends Identity, Parsable {
    /**
     * Type of conversation. Possible values are: team, channel, and chat.
     */
    conversationIdentityType?: TeamworkConversationIdentityType | null;
}
export type TeamworkConversationIdentityType = (typeof TeamworkConversationIdentityTypeObject)[keyof typeof TeamworkConversationIdentityTypeObject];
export interface TeamworkTagIdentity extends Identity, Parsable {
}
export interface TeamworkUserIdentity extends Identity, Parsable {
    /**
     * Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, emailUser and azureCommunicationServicesUser.
     */
    userIdentityType?: TeamworkUserIdentityType | null;
    /**
     * User principal name (UPN) of the user.
     */
    userPrincipalName?: string | null;
}
export type TeamworkUserIdentityType = (typeof TeamworkUserIdentityTypeObject)[keyof typeof TeamworkUserIdentityTypeObject];
export interface TokenMeetingInfo extends MeetingInfo, Parsable {
    /**
     * The token used to join the call.
     */
    token?: string | null;
}
export interface TranscriptActivity extends BaseActivity, Parsable {
}
export interface TranscriptPayload extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The audioCaptureDateTime property
     */
    audioCaptureDateTime?: Date | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The sequenceId property
     */
    sequenceId?: number | null;
    /**
     * The speaker property
     */
    speaker?: TranscriptSpeaker | null;
    /**
     * The spokenLanguage property
     */
    spokenLanguage?: string | null;
    /**
     * The text property
     */
    text?: string | null;
}
export interface TranscriptSpeaker extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The room property
     */
    room?: SpeakerInfo | null;
    /**
     * The user property
     */
    user?: SpeakerInfo | null;
}
export interface UserIdentity extends Identity, Parsable {
    /**
     * Indicates the client IP address associated with the user performing the activity (audit log only).
     */
    ipAddress?: string | null;
    /**
     * The userPrincipalName attribute of the user.
     */
    userPrincipalName?: string | null;
}
export const ActivityStatusObject = {
    NotStarted: "notStarted",
    Running: "running",
    Failed: "failed",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const AiInteractionTypeObject = {
    UserPrompt: "userPrompt",
    AiResponse: "aiResponse",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const BodyTypeObject = {
    Text: "text",
    Html: "html",
} as const;
export const ConnectionTypeObject = {
    WebSocket: "webSocket",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const EndpointTypeObject = {
    DefaultEscaped: "default",
    Voicemail: "voicemail",
    SkypeForBusiness: "skypeForBusiness",
    SkypeForBusinessVoipPhone: "skypeForBusinessVoipPhone",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const InitiatorTypeObject = {
    User: "user",
    Application: "application",
    System: "system",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RetrievalDataSourceObject = {
    SharePoint: "sharePoint",
    OneDriveBusiness: "oneDriveBusiness",
    ExternalItem: "externalItem",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RetrievalEntityTypeObject = {
    Site: "site",
    List: "list",
    ListItem: "listItem",
    Drive: "drive",
    DriveItem: "driveItem",
    ExternalItem: "externalItem",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TeamworkApplicationIdentityTypeObject = {
    AadApplication: "aadApplication",
    Bot: "bot",
    TenantBot: "tenantBot",
    Office365Connector: "office365Connector",
    OutgoingWebhook: "outgoingWebhook",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TeamworkConversationIdentityTypeObject = {
    Team: "team",
    Channel: "channel",
    Chat: "chat",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TeamworkUserIdentityTypeObject = {
    AadUser: "aadUser",
    OnPremiseAadUser: "onPremiseAadUser",
    AnonymousGuest: "anonymousGuest",
    FederatedUser: "federatedUser",
    PersonalMicrosoftAccountUser: "personalMicrosoftAccountUser",
    SkypeUser: "skypeUser",
    PhoneUser: "phoneUser",
    UnknownFutureValue: "unknownFutureValue",
    EmailUser: "emailUser",
    AzureCommunicationServicesUser: "azureCommunicationServicesUser",
} as const;
/* tslint:enable */
/* eslint-enable */
