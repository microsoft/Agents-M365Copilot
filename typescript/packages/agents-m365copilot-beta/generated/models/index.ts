/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoSubmissionUserIdentity, type SubmissionUserIdentity } from './security/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActionItem extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The display name of the owner of the action item.
     */
    ownerDisplayName?: string | null;
    /**
     * The text content of the action item.
     */
    text?: string | null;
    /**
     * The title of the action item.
     */
    title?: string | null;
}
export interface AiInteraction extends Entity, Parsable {
    /**
     * The data source for Copilot data. For example, IPM.SkypeTeams.Message.Copilot.Excel or IPM.SkypeTeams.Message.Copilot.Loop.
     */
    appClass?: string | null;
    /**
     * The collection of documents attached to the interaction, such as cards and images.
     */
    attachments?: AiInteractionAttachment[] | null;
    /**
     * The body of the message, including the text of the body and its body type.
     */
    body?: ItemBody | null;
    /**
     * The identifer that maps to all contexts associated with an interaction.
     */
    contexts?: AiInteractionContext[] | null;
    /**
     * The type of the conversation. For example, appchat or bizchat.
     */
    conversationType?: string | null;
    /**
     * The time when the interaction was created.
     */
    createdDateTime?: Date | null;
    /**
     * The timestamp of when the interaction was last modified.
     */
    etag?: string | null;
    /**
     * The from property
     */
    from?: IdentitySet | null;
    /**
     * The interactionType property
     */
    interactionType?: AiInteractionType | null;
    /**
     * The collection of links that appear in the interaction.
     */
    links?: AiInteractionLink[] | null;
    /**
     * The locale of the sender.
     */
    locale?: string | null;
    /**
     * The collection of the entities that were mentioned in the interaction, including users, bots, and so on.
     */
    mentions?: AiInteractionMention[] | null;
    /**
     * The identifier that groups a user prompt with its Copilot response.
     */
    requestId?: string | null;
    /**
     * The thread ID or conversation identifier that maps to all Copilot sessions for the user.
     */
    sessionId?: string | null;
}
export interface AiInteractionAttachment extends Entity, Parsable {
    /**
     * The identifier for the attachment. This identifier is only unique within the message scope.
     */
    attachmentId?: string | null;
    /**
     * The content of the attachment.
     */
    content?: string | null;
    /**
     * The type of the content. For example, reference, file, and image/imageType.
     */
    contentType?: string | null;
    /**
     * The URL of the content.
     */
    contentUrl?: string | null;
    /**
     * The name of the attachment.
     */
    name?: string | null;
}
export interface AiInteractionContext extends Entity, Parsable {
    /**
     * The full file URL where the interaction happened.
     */
    contextReference?: string | null;
    /**
     * The type of the file.
     */
    contextType?: string | null;
    /**
     * The name of the file.
     */
    displayName?: string | null;
}
export interface AiInteractionHistory extends Entity, Parsable {
}
export interface AiInteractionLink extends Entity, Parsable {
    /**
     * The name of the link.
     */
    displayName?: string | null;
    /**
     * Information about a link in an app chat or Business Chat (BizChat) interaction.
     */
    linkType?: string | null;
    /**
     * The URL of the link.
     */
    linkUrl?: string | null;
}
export interface AiInteractionMention extends Entity, Parsable {
    /**
     * The entity mentioned in the message.
     */
    mentioned?: AiInteractionMentionedIdentitySet | null;
    /**
     * The identifier for the mention.
     */
    mentionId?: number | null;
    /**
     * The text mentioned in the message.
     */
    mentionText?: string | null;
}
export interface AiInteractionMentionedIdentitySet extends IdentitySet, Parsable {
    /**
     * The conversation details.
     */
    conversation?: TeamworkConversationIdentity | null;
    /**
     * The tag details.
     */
    tag?: TeamworkTagIdentity | null;
}
export type AiInteractionType = (typeof AiInteractionTypeObject)[keyof typeof AiInteractionTypeObject];
export interface AiOnlineMeeting extends Entity, Parsable {
    /**
     * A set of AI insights associated with an AI online meeting.
     */
    aiInsights?: CallAiInsight[] | null;
}
export interface AiOnlineMeetingCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AiOnlineMeeting[] | null;
}
export interface AiUser extends Entity, Parsable {
    /**
     * The history of interactions between AI agents and users.
     */
    interactionHistory?: AiInteractionHistory | null;
    /**
     * Information about an online meeting, including AI insights.
     */
    onlineMeetings?: AiOnlineMeeting[] | null;
}
export interface AiUserCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AiUser[] | null;
}
export interface ApprovalIdentitySet extends IdentitySet, Parsable {
    /**
     * The Microsoft Entra group associated with the approval item.
     */
    group?: Identity | null;
}
export interface AuditUserIdentity extends Parsable, UserIdentity {
    /**
     * For user sign ins, the identifier of the tenant that the user is a member of.
     */
    homeTenantId?: string | null;
    /**
     * For user sign ins, the name of the tenant that the user is a member of. Only populated in cases where the home tenant has provided affirmative consent to Microsoft Entra ID to show the tenant content.
     */
    homeTenantName?: string | null;
}
export interface AzureCommunicationServicesUserIdentity extends Identity, Parsable {
    /**
     * The Azure Communication Services resource ID associated with the user.
     */
    azureCommunicationServicesResourceId?: string | null;
}
export interface BaseCollectionPaginationCountResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataCount property
     */
    odataCount?: number | null;
    /**
     * The OdataNextLink property
     */
    odataNextLink?: string | null;
}
export type BodyType = (typeof BodyTypeObject)[keyof typeof BodyTypeObject];
export interface CallAiInsight extends Entity, Parsable {
    /**
     * The collection of AI-generated action items. Read-only.
     */
    actionItems?: ActionItem[] | null;
    /**
     * The ID for the online meeting call for which the callAiInsight was generated. Read-only.
     */
    callId?: string | null;
    /**
     * The unique ID that correlates the transcript from which the insights were generated. Read-only.
     */
    contentCorrelationId?: string | null;
    /**
     * Date and time at which the corresponding transcript was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date | null;
    /**
     * Date and time at which the corresponding transcription ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    endDateTime?: Date | null;
    /**
     * The collection of AI-generated meeting notes. Read-only.
     */
    meetingNotes?: MeetingNote[] | null;
    /**
     * The caller-specific properties of the callAiInsight entity. Read-only.
     */
    viewpoint?: CallAiInsightViewPoint | null;
}
export interface CallAiInsightCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: CallAiInsight[] | null;
}
export interface CallAiInsightViewPoint extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The collection of AI-generated mention events.
     */
    mentionEvents?: MentionEvent[] | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface ChatMessageFromIdentitySet extends IdentitySet, Parsable {
}
export interface ChatMessageMentionedIdentitySet extends IdentitySet, Parsable {
    /**
     * If present, represents a conversation (for example, team, channel, or chat) @mentioned in a message.
     */
    conversation?: TeamworkConversationIdentity | null;
    /**
     * If present, represents a tag @mentioned in a team message.
     */
    tag?: TeamworkTagIdentity | null;
}
export interface ChatMessageReactionIdentitySet extends IdentitySet, Parsable {
}
export interface CommunicationsApplicationIdentity extends Identity, Parsable {
    /**
     * First-party Microsoft application that presents this identity.
     */
    applicationType?: string | null;
    /**
     * True if the participant shouldn't be shown in other participants' rosters.
     */
    hidden?: boolean | null;
}
export interface CommunicationsApplicationInstanceIdentity extends Identity, Parsable {
    /**
     * True if the participant shouldn't be shown in other participants' rosters.
     */
    hidden?: boolean | null;
    /**
     * The tenant ID of the application.
     */
    tenantId?: string | null;
}
export interface CommunicationsEncryptedIdentity extends Identity, Parsable {
}
export interface CommunicationsGuestIdentity extends Identity, Parsable {
    /**
     * The email of the guest user.
     */
    email?: string | null;
}
export interface CommunicationsIdentitySet extends IdentitySet, Parsable {
    /**
     * The application instance associated with this action.
     */
    applicationInstance?: Identity | null;
    /**
     * An identity the participant would like to present itself as to the other participants in the call.
     */
    assertedIdentity?: Identity | null;
    /**
     * The Azure Communication Services user associated with this action.
     */
    azureCommunicationServicesUser?: Identity | null;
    /**
     * The encrypted user associated with this action.
     */
    encrypted?: Identity | null;
    /**
     * Type of endpoint the participant uses. Possible values are: default, voicemail, skypeForBusiness, skypeForBusinessVoipPhone and unknownFutureValue.
     */
    endpointType?: EndpointType | null;
    /**
     * The guest user associated with this action.
     */
    guest?: Identity | null;
    /**
     * The Skype for Business on-premises user associated with this action.
     */
    onPremises?: Identity | null;
    /**
     * The phone user associated with this action.
     */
    phone?: Identity | null;
}
export interface CommunicationsPhoneIdentity extends Identity, Parsable {
}
export interface CommunicationsUserIdentity extends Identity, Parsable {
    /**
     * The user's tenant ID.
     */
    tenantId?: string | null;
}
export interface CopilotAdmin extends Entity, Parsable {
    /**
     * Set of Microsoft 365 Copilot settings that can be added or modified. Read-only. Nullable.
     */
    settings?: CopilotAdminSetting | null;
}
export interface CopilotAdminLimitedMode extends Entity, Parsable {
    /**
     * The ID of a Microsoft Entra group, for which the value of isEnabledForGroup is applied. The default value is null. If isEnabledForGroup is set to true, the groupId value must be provided for the Copilot limited mode in Teams meetings to be enabled for the members of the group. Optional.
     */
    groupId?: string | null;
    /**
     * Enables the user to be in limited mode for Copilot in Teams meetings. When copilotAdminLimitedMode=true, users in this mode can ask any questions, but Copilot doesn't respond to certain questions related to inferring emotions, behavior, or judgments. When copilotAdminLimitedMode=false, it responds to all types of questions grounded to the meeting conversation. The default value is false.
     */
    isEnabledForGroup?: boolean | null;
}
export interface CopilotAdminSetting extends Entity, Parsable {
    /**
     * Represents a setting that controls whether users of Microsoft 365 Copilot in Teams meetings can receive responses to sentiment-related prompts. Read-only. Nullable.
     */
    limitedMode?: CopilotAdminLimitedMode | null;
}
export interface CopilotPeopleAdminSetting extends Entity, Parsable {
    /**
     * The enhancedPersonalization property
     */
    enhancedPersonalization?: EnhancedPersonalizationSetting | null;
}
export interface CopilotSetting extends Entity, Parsable {
    /**
     * The people property
     */
    people?: CopilotPeopleAdminSetting | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ActionItem}
 */
// @ts-ignore
export function createActionItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActionItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionAttachment}
 */
// @ts-ignore
export function createAiInteractionAttachmentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionAttachment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionContext}
 */
// @ts-ignore
export function createAiInteractionContextFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionContext;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteraction}
 */
// @ts-ignore
export function createAiInteractionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteraction;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionHistory}
 */
// @ts-ignore
export function createAiInteractionHistoryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionHistory;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionLink}
 */
// @ts-ignore
export function createAiInteractionLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionMentionedIdentitySet}
 */
// @ts-ignore
export function createAiInteractionMentionedIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionMentionedIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiInteractionMention}
 */
// @ts-ignore
export function createAiInteractionMentionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiInteractionMention;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiOnlineMeetingCollectionResponse}
 */
// @ts-ignore
export function createAiOnlineMeetingCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiOnlineMeetingCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiOnlineMeeting}
 */
// @ts-ignore
export function createAiOnlineMeetingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiOnlineMeeting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiUserCollectionResponse}
 */
// @ts-ignore
export function createAiUserCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiUserCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AiUser}
 */
// @ts-ignore
export function createAiUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAiUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ApprovalIdentitySet}
 */
// @ts-ignore
export function createApprovalIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoApprovalIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AuditUserIdentity}
 */
// @ts-ignore
export function createAuditUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAuditUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureCommunicationServicesUserIdentity}
 */
// @ts-ignore
export function createAzureCommunicationServicesUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureCommunicationServicesUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BaseCollectionPaginationCountResponse}
 */
// @ts-ignore
export function createBaseCollectionPaginationCountResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBaseCollectionPaginationCountResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CallAiInsightCollectionResponse}
 */
// @ts-ignore
export function createCallAiInsightCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCallAiInsightCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CallAiInsight}
 */
// @ts-ignore
export function createCallAiInsightFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCallAiInsight;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CallAiInsightViewPoint}
 */
// @ts-ignore
export function createCallAiInsightViewPointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCallAiInsightViewPoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatMessageFromIdentitySet}
 */
// @ts-ignore
export function createChatMessageFromIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatMessageFromIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatMessageMentionedIdentitySet}
 */
// @ts-ignore
export function createChatMessageMentionedIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatMessageMentionedIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChatMessageReactionIdentitySet}
 */
// @ts-ignore
export function createChatMessageReactionIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChatMessageReactionIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsApplicationIdentity}
 */
// @ts-ignore
export function createCommunicationsApplicationIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsApplicationIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsApplicationInstanceIdentity}
 */
// @ts-ignore
export function createCommunicationsApplicationInstanceIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsApplicationInstanceIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsEncryptedIdentity}
 */
// @ts-ignore
export function createCommunicationsEncryptedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsEncryptedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsGuestIdentity}
 */
// @ts-ignore
export function createCommunicationsGuestIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsGuestIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsIdentitySet}
 */
// @ts-ignore
export function createCommunicationsIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsPhoneIdentity}
 */
// @ts-ignore
export function createCommunicationsPhoneIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsPhoneIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CommunicationsUserIdentity}
 */
// @ts-ignore
export function createCommunicationsUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCommunicationsUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotAdmin}
 */
// @ts-ignore
export function createCopilotAdminFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotAdmin;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotAdminLimitedMode}
 */
// @ts-ignore
export function createCopilotAdminLimitedModeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotAdminLimitedMode;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotAdminSetting}
 */
// @ts-ignore
export function createCopilotAdminSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotAdminSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotPeopleAdminSetting}
 */
// @ts-ignore
export function createCopilotPeopleAdminSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotPeopleAdminSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopilotSetting}
 */
// @ts-ignore
export function createCopilotSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopilotSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DetailsInfo}
 */
// @ts-ignore
export function createDetailsInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDetailsInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Dictionaries}
 */
// @ts-ignore
export function createDictionariesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.searchResourceMetadataDictionary":
                    return deserializeIntoSearchResourceMetadataDictionary;
            }
        }
    }
    return deserializeIntoDictionaries;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmailIdentity}
 */
// @ts-ignore
export function createEmailIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmailIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EnhancedPersonalizationSetting}
 */
// @ts-ignore
export function createEnhancedPersonalizationSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEnhancedPersonalizationSetting;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Entity}
 */
// @ts-ignore
export function createEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.aiInteraction":
                    return deserializeIntoAiInteraction;
                case "#microsoft.graph.aiInteractionHistory":
                    return deserializeIntoAiInteractionHistory;
                case "#microsoft.graph.aiOnlineMeeting":
                    return deserializeIntoAiOnlineMeeting;
                case "#microsoft.graph.aiUser":
                    return deserializeIntoAiUser;
                case "#microsoft.graph.callAiInsight":
                    return deserializeIntoCallAiInsight;
                case "#microsoft.graph.copilotAdmin":
                    return deserializeIntoCopilotAdmin;
                case "#microsoft.graph.copilotAdminLimitedMode":
                    return deserializeIntoCopilotAdminLimitedMode;
                case "#microsoft.graph.copilotAdminSetting":
                    return deserializeIntoCopilotAdminSetting;
                case "#microsoft.graph.copilotPeopleAdminSetting":
                    return deserializeIntoCopilotPeopleAdminSetting;
                case "#microsoft.graph.copilotSetting":
                    return deserializeIntoCopilotSetting;
                case "#microsoft.graph.enhancedPersonalizationSetting":
                    return deserializeIntoEnhancedPersonalizationSetting;
            }
        }
    }
    return deserializeIntoEntity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Identity}
 */
// @ts-ignore
export function createIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.auditUserIdentity":
                    return deserializeIntoAuditUserIdentity;
                case "#microsoft.graph.azureCommunicationServicesUserIdentity":
                    return deserializeIntoAzureCommunicationServicesUserIdentity;
                case "#microsoft.graph.callRecords.userIdentity":
                    return deserializeIntoUserIdentity;
                case "#microsoft.graph.communicationsApplicationIdentity":
                    return deserializeIntoCommunicationsApplicationIdentity;
                case "#microsoft.graph.communicationsApplicationInstanceIdentity":
                    return deserializeIntoCommunicationsApplicationInstanceIdentity;
                case "#microsoft.graph.communicationsEncryptedIdentity":
                    return deserializeIntoCommunicationsEncryptedIdentity;
                case "#microsoft.graph.communicationsGuestIdentity":
                    return deserializeIntoCommunicationsGuestIdentity;
                case "#microsoft.graph.communicationsPhoneIdentity":
                    return deserializeIntoCommunicationsPhoneIdentity;
                case "#microsoft.graph.communicationsUserIdentity":
                    return deserializeIntoCommunicationsUserIdentity;
                case "#microsoft.graph.emailIdentity":
                    return deserializeIntoEmailIdentity;
                case "#microsoft.graph.initiator":
                    return deserializeIntoInitiator;
                case "#microsoft.graph.programResource":
                    return deserializeIntoProgramResource;
                case "#microsoft.graph.provisionedIdentity":
                    return deserializeIntoProvisionedIdentity;
                case "#microsoft.graph.provisioningServicePrincipal":
                    return deserializeIntoProvisioningServicePrincipal;
                case "#microsoft.graph.provisioningSystem":
                    return deserializeIntoProvisioningSystem;
                case "#microsoft.graph.security.submissionUserIdentity":
                    return deserializeIntoSubmissionUserIdentity;
                case "#microsoft.graph.servicePrincipalIdentity":
                    return deserializeIntoServicePrincipalIdentity;
                case "#microsoft.graph.sharePointIdentity":
                    return deserializeIntoSharePointIdentity;
                case "#microsoft.graph.sourceProvisionedIdentity":
                    return deserializeIntoSourceProvisionedIdentity;
                case "#microsoft.graph.targetProvisionedIdentity":
                    return deserializeIntoTargetProvisionedIdentity;
                case "#microsoft.graph.teamworkApplicationIdentity":
                    return deserializeIntoTeamworkApplicationIdentity;
                case "#microsoft.graph.teamworkConversationIdentity":
                    return deserializeIntoTeamworkConversationIdentity;
                case "#microsoft.graph.teamworkTagIdentity":
                    return deserializeIntoTeamworkTagIdentity;
                case "#microsoft.graph.teamworkUserIdentity":
                    return deserializeIntoTeamworkUserIdentity;
                case "#microsoft.graph.userIdentity":
                    return deserializeIntoUserIdentity;
            }
        }
    }
    return deserializeIntoIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {IdentitySet}
 */
// @ts-ignore
export function createIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.aiInteractionMentionedIdentitySet":
                    return deserializeIntoAiInteractionMentionedIdentitySet;
                case "#microsoft.graph.approvalIdentitySet":
                    return deserializeIntoApprovalIdentitySet;
                case "#microsoft.graph.chatMessageFromIdentitySet":
                    return deserializeIntoChatMessageFromIdentitySet;
                case "#microsoft.graph.chatMessageMentionedIdentitySet":
                    return deserializeIntoChatMessageMentionedIdentitySet;
                case "#microsoft.graph.chatMessageReactionIdentitySet":
                    return deserializeIntoChatMessageReactionIdentitySet;
                case "#microsoft.graph.communicationsIdentitySet":
                    return deserializeIntoCommunicationsIdentitySet;
                case "#microsoft.graph.sharePointIdentitySet":
                    return deserializeIntoSharePointIdentitySet;
            }
        }
    }
    return deserializeIntoIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Initiator}
 */
// @ts-ignore
export function createInitiatorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInitiator;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ItemBody}
 */
// @ts-ignore
export function createItemBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoItemBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MeetingNote}
 */
// @ts-ignore
export function createMeetingNoteFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMeetingNote;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MeetingNoteSubpoint}
 */
// @ts-ignore
export function createMeetingNoteSubpointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMeetingNoteSubpoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MentionEvent}
 */
// @ts-ignore
export function createMentionEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMentionEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProgramResource}
 */
// @ts-ignore
export function createProgramResourceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProgramResource;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvisionedIdentity}
 */
// @ts-ignore
export function createProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvisionedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvisioningServicePrincipal}
 */
// @ts-ignore
export function createProvisioningServicePrincipalFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvisioningServicePrincipal;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProvisioningSystem}
 */
// @ts-ignore
export function createProvisioningSystemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProvisioningSystem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalExtract}
 */
// @ts-ignore
export function createRetrievalExtractFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRetrievalExtract;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalHit}
 */
// @ts-ignore
export function createRetrievalHitFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRetrievalHit;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalResponse}
 */
// @ts-ignore
export function createRetrievalResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRetrievalResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchResourceMetadataDictionary}
 */
// @ts-ignore
export function createSearchResourceMetadataDictionaryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchResourceMetadataDictionary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SearchSensitivityLabelInfo}
 */
// @ts-ignore
export function createSearchSensitivityLabelInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSearchSensitivityLabelInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServicePrincipalIdentity}
 */
// @ts-ignore
export function createServicePrincipalIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServicePrincipalIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SharePointIdentity}
 */
// @ts-ignore
export function createSharePointIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSharePointIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SharePointIdentitySet}
 */
// @ts-ignore
export function createSharePointIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSharePointIdentitySet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SourceProvisionedIdentity}
 */
// @ts-ignore
export function createSourceProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSourceProvisionedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TargetProvisionedIdentity}
 */
// @ts-ignore
export function createTargetProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTargetProvisionedIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkApplicationIdentity}
 */
// @ts-ignore
export function createTeamworkApplicationIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkApplicationIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkConversationIdentity}
 */
// @ts-ignore
export function createTeamworkConversationIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkConversationIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkTagIdentity}
 */
// @ts-ignore
export function createTeamworkTagIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkTagIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TeamworkUserIdentity}
 */
// @ts-ignore
export function createTeamworkUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeamworkUserIdentity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserIdentity}
 */
// @ts-ignore
export function createUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.auditUserIdentity":
                    return deserializeIntoAuditUserIdentity;
            }
        }
    }
    return deserializeIntoUserIdentity;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoActionItem(actionItem: Partial<ActionItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { actionItem.backingStoreEnabled = true; },
        "@odata.type": n => { actionItem.odataType = n.getStringValue(); },
        "ownerDisplayName": n => { actionItem.ownerDisplayName = n.getStringValue(); },
        "text": n => { actionItem.text = n.getStringValue(); },
        "title": n => { actionItem.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteraction(aiInteraction: Partial<AiInteraction> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteraction),
        "appClass": n => { aiInteraction.appClass = n.getStringValue(); },
        "attachments": n => { aiInteraction.attachments = n.getCollectionOfObjectValues<AiInteractionAttachment>(createAiInteractionAttachmentFromDiscriminatorValue); },
        "body": n => { aiInteraction.body = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "contexts": n => { aiInteraction.contexts = n.getCollectionOfObjectValues<AiInteractionContext>(createAiInteractionContextFromDiscriminatorValue); },
        "conversationType": n => { aiInteraction.conversationType = n.getStringValue(); },
        "createdDateTime": n => { aiInteraction.createdDateTime = n.getDateValue(); },
        "etag": n => { aiInteraction.etag = n.getStringValue(); },
        "from": n => { aiInteraction.from = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "interactionType": n => { aiInteraction.interactionType = n.getEnumValue<AiInteractionType>(AiInteractionTypeObject); },
        "links": n => { aiInteraction.links = n.getCollectionOfObjectValues<AiInteractionLink>(createAiInteractionLinkFromDiscriminatorValue); },
        "locale": n => { aiInteraction.locale = n.getStringValue(); },
        "mentions": n => { aiInteraction.mentions = n.getCollectionOfObjectValues<AiInteractionMention>(createAiInteractionMentionFromDiscriminatorValue); },
        "requestId": n => { aiInteraction.requestId = n.getStringValue(); },
        "sessionId": n => { aiInteraction.sessionId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionAttachment(aiInteractionAttachment: Partial<AiInteractionAttachment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteractionAttachment),
        "attachmentId": n => { aiInteractionAttachment.attachmentId = n.getStringValue(); },
        "content": n => { aiInteractionAttachment.content = n.getStringValue(); },
        "contentType": n => { aiInteractionAttachment.contentType = n.getStringValue(); },
        "contentUrl": n => { aiInteractionAttachment.contentUrl = n.getStringValue(); },
        "name": n => { aiInteractionAttachment.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionContext(aiInteractionContext: Partial<AiInteractionContext> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteractionContext),
        "contextReference": n => { aiInteractionContext.contextReference = n.getStringValue(); },
        "contextType": n => { aiInteractionContext.contextType = n.getStringValue(); },
        "displayName": n => { aiInteractionContext.displayName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionHistory(aiInteractionHistory: Partial<AiInteractionHistory> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteractionHistory),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionLink(aiInteractionLink: Partial<AiInteractionLink> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteractionLink),
        "displayName": n => { aiInteractionLink.displayName = n.getStringValue(); },
        "linkType": n => { aiInteractionLink.linkType = n.getStringValue(); },
        "linkUrl": n => { aiInteractionLink.linkUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionMention(aiInteractionMention: Partial<AiInteractionMention> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiInteractionMention),
        "mentioned": n => { aiInteractionMention.mentioned = n.getObjectValue<AiInteractionMentionedIdentitySet>(createAiInteractionMentionedIdentitySetFromDiscriminatorValue); },
        "mentionId": n => { aiInteractionMention.mentionId = n.getNumberValue(); },
        "mentionText": n => { aiInteractionMention.mentionText = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiInteractionMentionedIdentitySet(aiInteractionMentionedIdentitySet: Partial<AiInteractionMentionedIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(aiInteractionMentionedIdentitySet),
        "conversation": n => { aiInteractionMentionedIdentitySet.conversation = n.getObjectValue<TeamworkConversationIdentity>(createTeamworkConversationIdentityFromDiscriminatorValue); },
        "tag": n => { aiInteractionMentionedIdentitySet.tag = n.getObjectValue<TeamworkTagIdentity>(createTeamworkTagIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiOnlineMeeting(aiOnlineMeeting: Partial<AiOnlineMeeting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiOnlineMeeting),
        "aiInsights": n => { aiOnlineMeeting.aiInsights = n.getCollectionOfObjectValues<CallAiInsight>(createCallAiInsightFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiOnlineMeetingCollectionResponse(aiOnlineMeetingCollectionResponse: Partial<AiOnlineMeetingCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(aiOnlineMeetingCollectionResponse),
        "value": n => { aiOnlineMeetingCollectionResponse.value = n.getCollectionOfObjectValues<AiOnlineMeeting>(createAiOnlineMeetingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiUser(aiUser: Partial<AiUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(aiUser),
        "interactionHistory": n => { aiUser.interactionHistory = n.getObjectValue<AiInteractionHistory>(createAiInteractionHistoryFromDiscriminatorValue); },
        "onlineMeetings": n => { aiUser.onlineMeetings = n.getCollectionOfObjectValues<AiOnlineMeeting>(createAiOnlineMeetingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAiUserCollectionResponse(aiUserCollectionResponse: Partial<AiUserCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(aiUserCollectionResponse),
        "value": n => { aiUserCollectionResponse.value = n.getCollectionOfObjectValues<AiUser>(createAiUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoApprovalIdentitySet(approvalIdentitySet: Partial<ApprovalIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(approvalIdentitySet),
        "group": n => { approvalIdentitySet.group = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAuditUserIdentity(auditUserIdentity: Partial<AuditUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUserIdentity(auditUserIdentity),
        "homeTenantId": n => { auditUserIdentity.homeTenantId = n.getStringValue(); },
        "homeTenantName": n => { auditUserIdentity.homeTenantName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAzureCommunicationServicesUserIdentity(azureCommunicationServicesUserIdentity: Partial<AzureCommunicationServicesUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(azureCommunicationServicesUserIdentity),
        "azureCommunicationServicesResourceId": n => { azureCommunicationServicesUserIdentity.azureCommunicationServicesResourceId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBaseCollectionPaginationCountResponse(baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { baseCollectionPaginationCountResponse.backingStoreEnabled = true; },
        "@odata.count": n => { baseCollectionPaginationCountResponse.odataCount = n.getNumberValue(); },
        "@odata.nextLink": n => { baseCollectionPaginationCountResponse.odataNextLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCallAiInsight(callAiInsight: Partial<CallAiInsight> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(callAiInsight),
        "actionItems": n => { callAiInsight.actionItems = n.getCollectionOfObjectValues<ActionItem>(createActionItemFromDiscriminatorValue); },
        "callId": n => { callAiInsight.callId = n.getStringValue(); },
        "contentCorrelationId": n => { callAiInsight.contentCorrelationId = n.getStringValue(); },
        "createdDateTime": n => { callAiInsight.createdDateTime = n.getDateValue(); },
        "endDateTime": n => { callAiInsight.endDateTime = n.getDateValue(); },
        "meetingNotes": n => { callAiInsight.meetingNotes = n.getCollectionOfObjectValues<MeetingNote>(createMeetingNoteFromDiscriminatorValue); },
        "viewpoint": n => { callAiInsight.viewpoint = n.getObjectValue<CallAiInsightViewPoint>(createCallAiInsightViewPointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCallAiInsightCollectionResponse(callAiInsightCollectionResponse: Partial<CallAiInsightCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(callAiInsightCollectionResponse),
        "value": n => { callAiInsightCollectionResponse.value = n.getCollectionOfObjectValues<CallAiInsight>(createCallAiInsightFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCallAiInsightViewPoint(callAiInsightViewPoint: Partial<CallAiInsightViewPoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { callAiInsightViewPoint.backingStoreEnabled = true; },
        "mentionEvents": n => { callAiInsightViewPoint.mentionEvents = n.getCollectionOfObjectValues<MentionEvent>(createMentionEventFromDiscriminatorValue); },
        "@odata.type": n => { callAiInsightViewPoint.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatMessageFromIdentitySet(chatMessageFromIdentitySet: Partial<ChatMessageFromIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(chatMessageFromIdentitySet),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatMessageMentionedIdentitySet(chatMessageMentionedIdentitySet: Partial<ChatMessageMentionedIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(chatMessageMentionedIdentitySet),
        "conversation": n => { chatMessageMentionedIdentitySet.conversation = n.getObjectValue<TeamworkConversationIdentity>(createTeamworkConversationIdentityFromDiscriminatorValue); },
        "tag": n => { chatMessageMentionedIdentitySet.tag = n.getObjectValue<TeamworkTagIdentity>(createTeamworkTagIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChatMessageReactionIdentitySet(chatMessageReactionIdentitySet: Partial<ChatMessageReactionIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(chatMessageReactionIdentitySet),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsApplicationIdentity(communicationsApplicationIdentity: Partial<CommunicationsApplicationIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsApplicationIdentity),
        "applicationType": n => { communicationsApplicationIdentity.applicationType = n.getStringValue(); },
        "hidden": n => { communicationsApplicationIdentity.hidden = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsApplicationInstanceIdentity(communicationsApplicationInstanceIdentity: Partial<CommunicationsApplicationInstanceIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsApplicationInstanceIdentity),
        "hidden": n => { communicationsApplicationInstanceIdentity.hidden = n.getBooleanValue(); },
        "tenantId": n => { communicationsApplicationInstanceIdentity.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsEncryptedIdentity(communicationsEncryptedIdentity: Partial<CommunicationsEncryptedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsEncryptedIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsGuestIdentity(communicationsGuestIdentity: Partial<CommunicationsGuestIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsGuestIdentity),
        "email": n => { communicationsGuestIdentity.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsIdentitySet(communicationsIdentitySet: Partial<CommunicationsIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(communicationsIdentitySet),
        "applicationInstance": n => { communicationsIdentitySet.applicationInstance = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "assertedIdentity": n => { communicationsIdentitySet.assertedIdentity = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "azureCommunicationServicesUser": n => { communicationsIdentitySet.azureCommunicationServicesUser = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "encrypted": n => { communicationsIdentitySet.encrypted = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "endpointType": n => { communicationsIdentitySet.endpointType = n.getEnumValue<EndpointType>(EndpointTypeObject); },
        "guest": n => { communicationsIdentitySet.guest = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "onPremises": n => { communicationsIdentitySet.onPremises = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "phone": n => { communicationsIdentitySet.phone = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsPhoneIdentity(communicationsPhoneIdentity: Partial<CommunicationsPhoneIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsPhoneIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCommunicationsUserIdentity(communicationsUserIdentity: Partial<CommunicationsUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(communicationsUserIdentity),
        "tenantId": n => { communicationsUserIdentity.tenantId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotAdmin(copilotAdmin: Partial<CopilotAdmin> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotAdmin),
        "settings": n => { copilotAdmin.settings = n.getObjectValue<CopilotAdminSetting>(createCopilotAdminSettingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotAdminLimitedMode(copilotAdminLimitedMode: Partial<CopilotAdminLimitedMode> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotAdminLimitedMode),
        "groupId": n => { copilotAdminLimitedMode.groupId = n.getStringValue(); },
        "isEnabledForGroup": n => { copilotAdminLimitedMode.isEnabledForGroup = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotAdminSetting(copilotAdminSetting: Partial<CopilotAdminSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotAdminSetting),
        "limitedMode": n => { copilotAdminSetting.limitedMode = n.getObjectValue<CopilotAdminLimitedMode>(createCopilotAdminLimitedModeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotPeopleAdminSetting(copilotPeopleAdminSetting: Partial<CopilotPeopleAdminSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotPeopleAdminSetting),
        "enhancedPersonalization": n => { copilotPeopleAdminSetting.enhancedPersonalization = n.getObjectValue<EnhancedPersonalizationSetting>(createEnhancedPersonalizationSettingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopilotSetting(copilotSetting: Partial<CopilotSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(copilotSetting),
        "people": n => { copilotSetting.people = n.getObjectValue<CopilotPeopleAdminSetting>(createCopilotPeopleAdminSettingFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDetailsInfo(detailsInfo: Partial<DetailsInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { detailsInfo.backingStoreEnabled = true; },
        "@odata.type": n => { detailsInfo.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDictionaries(dictionaries: Partial<Dictionaries> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { dictionaries.backingStoreEnabled = true; },
        "@odata.type": n => { dictionaries.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmailIdentity(emailIdentity: Partial<EmailIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(emailIdentity),
        "email": n => { emailIdentity.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEnhancedPersonalizationSetting(enhancedPersonalizationSetting: Partial<EnhancedPersonalizationSetting> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(enhancedPersonalizationSetting),
        "disabledForGroup": n => { enhancedPersonalizationSetting.disabledForGroup = n.getStringValue(); },
        "isEnabledInOrganization": n => { enhancedPersonalizationSetting.isEnabledInOrganization = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEntity(entity: Partial<Entity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { entity.backingStoreEnabled = true; },
        "id": n => { entity.id = n.getStringValue(); },
        "@odata.type": n => { entity.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIdentity(identity: Partial<Identity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { identity.backingStoreEnabled = true; },
        "displayName": n => { identity.displayName = n.getStringValue(); },
        "id": n => { identity.id = n.getStringValue(); },
        "@odata.type": n => { identity.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoIdentitySet(identitySet: Partial<IdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "application": n => { identitySet.application = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "backingStoreEnabled": n => { identitySet.backingStoreEnabled = true; },
        "device": n => { identitySet.device = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "@odata.type": n => { identitySet.odataType = n.getStringValue(); },
        "user": n => { identitySet.user = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInitiator(initiator: Partial<Initiator> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(initiator),
        "initiatorType": n => { initiator.initiatorType = n.getEnumValue<InitiatorType>(InitiatorTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoItemBody(itemBody: Partial<ItemBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { itemBody.backingStoreEnabled = true; },
        "content": n => { itemBody.content = n.getStringValue(); },
        "contentType": n => { itemBody.contentType = n.getEnumValue<BodyType>(BodyTypeObject); },
        "@odata.type": n => { itemBody.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMeetingNote(meetingNote: Partial<MeetingNote> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { meetingNote.backingStoreEnabled = true; },
        "@odata.type": n => { meetingNote.odataType = n.getStringValue(); },
        "subpoints": n => { meetingNote.subpoints = n.getCollectionOfObjectValues<MeetingNoteSubpoint>(createMeetingNoteSubpointFromDiscriminatorValue); },
        "text": n => { meetingNote.text = n.getStringValue(); },
        "title": n => { meetingNote.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMeetingNoteSubpoint(meetingNoteSubpoint: Partial<MeetingNoteSubpoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { meetingNoteSubpoint.backingStoreEnabled = true; },
        "@odata.type": n => { meetingNoteSubpoint.odataType = n.getStringValue(); },
        "text": n => { meetingNoteSubpoint.text = n.getStringValue(); },
        "title": n => { meetingNoteSubpoint.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMentionEvent(mentionEvent: Partial<MentionEvent> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { mentionEvent.backingStoreEnabled = true; },
        "eventDateTime": n => { mentionEvent.eventDateTime = n.getDateValue(); },
        "@odata.type": n => { mentionEvent.odataType = n.getStringValue(); },
        "speaker": n => { mentionEvent.speaker = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "transcriptUtterance": n => { mentionEvent.transcriptUtterance = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProgramResource(programResource: Partial<ProgramResource> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(programResource),
        "type": n => { programResource.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvisionedIdentity(provisionedIdentity: Partial<ProvisionedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisionedIdentity),
        "details": n => { provisionedIdentity.details = n.getObjectValue<DetailsInfo>(createDetailsInfoFromDiscriminatorValue); },
        "identityType": n => { provisionedIdentity.identityType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvisioningServicePrincipal(provisioningServicePrincipal: Partial<ProvisioningServicePrincipal> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisioningServicePrincipal),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProvisioningSystem(provisioningSystem: Partial<ProvisioningSystem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisioningSystem),
        "details": n => { provisioningSystem.details = n.getObjectValue<DetailsInfo>(createDetailsInfoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalExtract(retrievalExtract: Partial<RetrievalExtract> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retrievalExtract.backingStoreEnabled = true; },
        "@odata.type": n => { retrievalExtract.odataType = n.getStringValue(); },
        "text": n => { retrievalExtract.text = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalHit(retrievalHit: Partial<RetrievalHit> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retrievalHit.backingStoreEnabled = true; },
        "extracts": n => { retrievalHit.extracts = n.getCollectionOfObjectValues<RetrievalExtract>(createRetrievalExtractFromDiscriminatorValue); },
        "@odata.type": n => { retrievalHit.odataType = n.getStringValue(); },
        "resourceMetadata": n => { retrievalHit.resourceMetadata = n.getObjectValue<SearchResourceMetadataDictionary>(createSearchResourceMetadataDictionaryFromDiscriminatorValue); },
        "resourceType": n => { retrievalHit.resourceType = n.getEnumValue<RetrievalEntityType>(RetrievalEntityTypeObject); },
        "sensitivityLabel": n => { retrievalHit.sensitivityLabel = n.getObjectValue<SearchSensitivityLabelInfo>(createSearchSensitivityLabelInfoFromDiscriminatorValue); },
        "webUrl": n => { retrievalHit.webUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalResponse(retrievalResponse: Partial<RetrievalResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { retrievalResponse.backingStoreEnabled = true; },
        "@odata.type": n => { retrievalResponse.odataType = n.getStringValue(); },
        "retrievalHits": n => { retrievalResponse.retrievalHits = n.getCollectionOfObjectValues<RetrievalHit>(createRetrievalHitFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchResourceMetadataDictionary(searchResourceMetadataDictionary: Partial<SearchResourceMetadataDictionary> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDictionaries(searchResourceMetadataDictionary),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSearchSensitivityLabelInfo(searchSensitivityLabelInfo: Partial<SearchSensitivityLabelInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { searchSensitivityLabelInfo.backingStoreEnabled = true; },
        "color": n => { searchSensitivityLabelInfo.color = n.getStringValue(); },
        "displayName": n => { searchSensitivityLabelInfo.displayName = n.getStringValue(); },
        "@odata.type": n => { searchSensitivityLabelInfo.odataType = n.getStringValue(); },
        "priority": n => { searchSensitivityLabelInfo.priority = n.getNumberValue(); },
        "sensitivityLabelId": n => { searchSensitivityLabelInfo.sensitivityLabelId = n.getStringValue(); },
        "tooltip": n => { searchSensitivityLabelInfo.tooltip = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServicePrincipalIdentity(servicePrincipalIdentity: Partial<ServicePrincipalIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(servicePrincipalIdentity),
        "appId": n => { servicePrincipalIdentity.appId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSharePointIdentity(sharePointIdentity: Partial<SharePointIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(sharePointIdentity),
        "loginName": n => { sharePointIdentity.loginName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSharePointIdentitySet(sharePointIdentitySet: Partial<SharePointIdentitySet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySet(sharePointIdentitySet),
        "group": n => { sharePointIdentitySet.group = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "siteGroup": n => { sharePointIdentitySet.siteGroup = n.getObjectValue<SharePointIdentity>(createSharePointIdentityFromDiscriminatorValue); },
        "siteUser": n => { sharePointIdentitySet.siteUser = n.getObjectValue<SharePointIdentity>(createSharePointIdentityFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSourceProvisionedIdentity(sourceProvisionedIdentity: Partial<SourceProvisionedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(sourceProvisionedIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTargetProvisionedIdentity(targetProvisionedIdentity: Partial<TargetProvisionedIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(targetProvisionedIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkApplicationIdentity(teamworkApplicationIdentity: Partial<TeamworkApplicationIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkApplicationIdentity),
        "applicationIdentityType": n => { teamworkApplicationIdentity.applicationIdentityType = n.getEnumValue<TeamworkApplicationIdentityType>(TeamworkApplicationIdentityTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkConversationIdentity(teamworkConversationIdentity: Partial<TeamworkConversationIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkConversationIdentity),
        "conversationIdentityType": n => { teamworkConversationIdentity.conversationIdentityType = n.getEnumValue<TeamworkConversationIdentityType>(TeamworkConversationIdentityTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkTagIdentity(teamworkTagIdentity: Partial<TeamworkTagIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkTagIdentity),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeamworkUserIdentity(teamworkUserIdentity: Partial<TeamworkUserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkUserIdentity),
        "userIdentityType": n => { teamworkUserIdentity.userIdentityType = n.getEnumValue<TeamworkUserIdentityType>(TeamworkUserIdentityTypeObject); },
        "userPrincipalName": n => { teamworkUserIdentity.userPrincipalName = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserIdentity(userIdentity: Partial<UserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(userIdentity),
        "ipAddress": n => { userIdentity.ipAddress = n.getStringValue(); },
        "userPrincipalName": n => { userIdentity.userPrincipalName = n.getStringValue(); },
    }
}
export interface DetailsInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Dictionaries extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface EmailIdentity extends Identity, Parsable {
    /**
     * Email address of the user.
     */
    email?: string | null;
}
export type EndpointType = (typeof EndpointTypeObject)[keyof typeof EndpointTypeObject];
export interface EnhancedPersonalizationSetting extends Entity, Parsable {
    /**
     * The ID of a Microsoft Entra group to which the value is used to disable the control for populated users. The default value is null. This parameter is optional.
     */
    disabledForGroup?: string | null;
    /**
     * If true, enables the enhanced personalization control and therefore related features as defined in control enhanced personalization privacy
     */
    isEnabledInOrganization?: boolean | null;
}
export interface Entity extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The unique identifier for an entity. Read-only.
     */
    id?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface Identity extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The display name of the identity. For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta.
     */
    displayName?: string | null;
    /**
     * Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review.
     */
    id?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface IdentitySet extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Identity of the Application. This property is read-only.
     */
    application?: Identity | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The Identity of the Device. This property is read-only.
     */
    device?: Identity | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The Identity of the User. This property is read-only.
     */
    user?: Identity | null;
}
export interface Initiator extends Identity, Parsable {
    /**
     * The type of the initiator. Possible values are: user, application, system, unknownFutureValue.
     */
    initiatorType?: InitiatorType | null;
}
export type InitiatorType = (typeof InitiatorTypeObject)[keyof typeof InitiatorTypeObject];
export interface ItemBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The content of the item.
     */
    content?: string | null;
    /**
     * The type of the content. Possible values are text and html.
     */
    contentType?: BodyType | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
}
export interface MeetingNote extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * A collection of subpoints of the meeting note.
     */
    subpoints?: MeetingNoteSubpoint[] | null;
    /**
     * The text of the meeting note.
     */
    text?: string | null;
    /**
     * The title of the meeting note.
     */
    title?: string | null;
}
export interface MeetingNoteSubpoint extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The text of the meeting note subpoint.
     */
    text?: string | null;
    /**
     * The title of the meeting note subpoint.
     */
    title?: string | null;
}
export interface MentionEvent extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The date and time of the mention event. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    eventDateTime?: Date | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The speaker who mentioned the user.
     */
    speaker?: IdentitySet | null;
    /**
     * The utterance in the online meeting transcript that contains the mention event.
     */
    transcriptUtterance?: string | null;
}
export interface ProgramResource extends Identity, Parsable {
    /**
     * Type of the resource, indicating whether it is a group or an app.
     */
    type?: string | null;
}
export interface ProvisionedIdentity extends Identity, Parsable {
    /**
     * Details of the identity.
     */
    details?: DetailsInfo | null;
    /**
     * Type of identity that has been provisioned, such as 'user' or 'group.' Supports $filter (eq, contains).
     */
    identityType?: string | null;
}
export interface ProvisioningServicePrincipal extends Identity, Parsable {
}
export interface ProvisioningSystem extends Identity, Parsable {
    /**
     * Details of the system.
     */
    details?: DetailsInfo | null;
}
export type RetrievalDataSource = (typeof RetrievalDataSourceObject)[keyof typeof RetrievalDataSourceObject];
export type RetrievalEntityType = (typeof RetrievalEntityTypeObject)[keyof typeof RetrievalEntityTypeObject];
export interface RetrievalExtract extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The text property
     */
    text?: string | null;
}
export interface RetrievalHit extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The extracts property
     */
    extracts?: RetrievalExtract[] | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The resourceMetadata property
     */
    resourceMetadata?: SearchResourceMetadataDictionary | null;
    /**
     * The resourceType property
     */
    resourceType?: RetrievalEntityType | null;
    /**
     * The sensitivityLabel property
     */
    sensitivityLabel?: SearchSensitivityLabelInfo | null;
    /**
     * The webUrl property
     */
    webUrl?: string | null;
}
export interface RetrievalResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The retrievalHits property
     */
    retrievalHits?: RetrievalHit[] | null;
}
export interface SearchResourceMetadataDictionary extends Dictionaries, Parsable {
}
/**
 * Represents a sensitivityLabel.This model is shared with the CCS retrieval API and search where it is already unhidden.
 */
export interface SearchSensitivityLabelInfo extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The priority property
     */
    priority?: number | null;
    /**
     * The sensitivityLabelId property
     */
    sensitivityLabelId?: string | null;
    /**
     * The tooltip property
     */
    tooltip?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeActionItem(writer: SerializationWriter, actionItem: Partial<ActionItem> | undefined | null = {}) : void {
    if (actionItem) {
        writer.writeStringValue("@odata.type", actionItem.odataType);
        writer.writeStringValue("ownerDisplayName", actionItem.ownerDisplayName);
        writer.writeStringValue("text", actionItem.text);
        writer.writeStringValue("title", actionItem.title);
        writer.writeAdditionalData(actionItem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteraction(writer: SerializationWriter, aiInteraction: Partial<AiInteraction> | undefined | null = {}) : void {
    if (aiInteraction) {
        serializeEntity(writer, aiInteraction)
        writer.writeStringValue("appClass", aiInteraction.appClass);
        writer.writeCollectionOfObjectValues<AiInteractionAttachment>("attachments", aiInteraction.attachments, serializeAiInteractionAttachment);
        writer.writeObjectValue<ItemBody>("body", aiInteraction.body, serializeItemBody);
        writer.writeCollectionOfObjectValues<AiInteractionContext>("contexts", aiInteraction.contexts, serializeAiInteractionContext);
        writer.writeStringValue("conversationType", aiInteraction.conversationType);
        writer.writeDateValue("createdDateTime", aiInteraction.createdDateTime);
        writer.writeStringValue("etag", aiInteraction.etag);
        writer.writeObjectValue<IdentitySet>("from", aiInteraction.from, serializeIdentitySet);
        writer.writeEnumValue<AiInteractionType>("interactionType", aiInteraction.interactionType);
        writer.writeCollectionOfObjectValues<AiInteractionLink>("links", aiInteraction.links, serializeAiInteractionLink);
        writer.writeStringValue("locale", aiInteraction.locale);
        writer.writeCollectionOfObjectValues<AiInteractionMention>("mentions", aiInteraction.mentions, serializeAiInteractionMention);
        writer.writeStringValue("requestId", aiInteraction.requestId);
        writer.writeStringValue("sessionId", aiInteraction.sessionId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionAttachment(writer: SerializationWriter, aiInteractionAttachment: Partial<AiInteractionAttachment> | undefined | null = {}) : void {
    if (aiInteractionAttachment) {
        serializeEntity(writer, aiInteractionAttachment)
        writer.writeStringValue("attachmentId", aiInteractionAttachment.attachmentId);
        writer.writeStringValue("content", aiInteractionAttachment.content);
        writer.writeStringValue("contentType", aiInteractionAttachment.contentType);
        writer.writeStringValue("contentUrl", aiInteractionAttachment.contentUrl);
        writer.writeStringValue("name", aiInteractionAttachment.name);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionContext(writer: SerializationWriter, aiInteractionContext: Partial<AiInteractionContext> | undefined | null = {}) : void {
    if (aiInteractionContext) {
        serializeEntity(writer, aiInteractionContext)
        writer.writeStringValue("contextReference", aiInteractionContext.contextReference);
        writer.writeStringValue("contextType", aiInteractionContext.contextType);
        writer.writeStringValue("displayName", aiInteractionContext.displayName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionHistory(writer: SerializationWriter, aiInteractionHistory: Partial<AiInteractionHistory> | undefined | null = {}) : void {
    if (aiInteractionHistory) {
        serializeEntity(writer, aiInteractionHistory)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionLink(writer: SerializationWriter, aiInteractionLink: Partial<AiInteractionLink> | undefined | null = {}) : void {
    if (aiInteractionLink) {
        serializeEntity(writer, aiInteractionLink)
        writer.writeStringValue("displayName", aiInteractionLink.displayName);
        writer.writeStringValue("linkType", aiInteractionLink.linkType);
        writer.writeStringValue("linkUrl", aiInteractionLink.linkUrl);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionMention(writer: SerializationWriter, aiInteractionMention: Partial<AiInteractionMention> | undefined | null = {}) : void {
    if (aiInteractionMention) {
        serializeEntity(writer, aiInteractionMention)
        writer.writeObjectValue<AiInteractionMentionedIdentitySet>("mentioned", aiInteractionMention.mentioned, serializeAiInteractionMentionedIdentitySet);
        writer.writeNumberValue("mentionId", aiInteractionMention.mentionId);
        writer.writeStringValue("mentionText", aiInteractionMention.mentionText);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiInteractionMentionedIdentitySet(writer: SerializationWriter, aiInteractionMentionedIdentitySet: Partial<AiInteractionMentionedIdentitySet> | undefined | null = {}) : void {
    if (aiInteractionMentionedIdentitySet) {
        serializeIdentitySet(writer, aiInteractionMentionedIdentitySet)
        writer.writeObjectValue<TeamworkConversationIdentity>("conversation", aiInteractionMentionedIdentitySet.conversation, serializeTeamworkConversationIdentity);
        writer.writeObjectValue<TeamworkTagIdentity>("tag", aiInteractionMentionedIdentitySet.tag, serializeTeamworkTagIdentity);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiOnlineMeeting(writer: SerializationWriter, aiOnlineMeeting: Partial<AiOnlineMeeting> | undefined | null = {}) : void {
    if (aiOnlineMeeting) {
        serializeEntity(writer, aiOnlineMeeting)
        writer.writeCollectionOfObjectValues<CallAiInsight>("aiInsights", aiOnlineMeeting.aiInsights, serializeCallAiInsight);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiOnlineMeetingCollectionResponse(writer: SerializationWriter, aiOnlineMeetingCollectionResponse: Partial<AiOnlineMeetingCollectionResponse> | undefined | null = {}) : void {
    if (aiOnlineMeetingCollectionResponse) {
        serializeBaseCollectionPaginationCountResponse(writer, aiOnlineMeetingCollectionResponse)
        writer.writeCollectionOfObjectValues<AiOnlineMeeting>("value", aiOnlineMeetingCollectionResponse.value, serializeAiOnlineMeeting);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiUser(writer: SerializationWriter, aiUser: Partial<AiUser> | undefined | null = {}) : void {
    if (aiUser) {
        serializeEntity(writer, aiUser)
        writer.writeObjectValue<AiInteractionHistory>("interactionHistory", aiUser.interactionHistory, serializeAiInteractionHistory);
        writer.writeCollectionOfObjectValues<AiOnlineMeeting>("onlineMeetings", aiUser.onlineMeetings, serializeAiOnlineMeeting);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAiUserCollectionResponse(writer: SerializationWriter, aiUserCollectionResponse: Partial<AiUserCollectionResponse> | undefined | null = {}) : void {
    if (aiUserCollectionResponse) {
        serializeBaseCollectionPaginationCountResponse(writer, aiUserCollectionResponse)
        writer.writeCollectionOfObjectValues<AiUser>("value", aiUserCollectionResponse.value, serializeAiUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeApprovalIdentitySet(writer: SerializationWriter, approvalIdentitySet: Partial<ApprovalIdentitySet> | undefined | null = {}) : void {
    if (approvalIdentitySet) {
        serializeIdentitySet(writer, approvalIdentitySet)
        writer.writeObjectValue<Identity>("group", approvalIdentitySet.group, serializeIdentity);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAuditUserIdentity(writer: SerializationWriter, auditUserIdentity: Partial<AuditUserIdentity> | undefined | null = {}) : void {
    if (auditUserIdentity) {
        serializeUserIdentity(writer, auditUserIdentity)
        writer.writeStringValue("homeTenantId", auditUserIdentity.homeTenantId);
        writer.writeStringValue("homeTenantName", auditUserIdentity.homeTenantName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAzureCommunicationServicesUserIdentity(writer: SerializationWriter, azureCommunicationServicesUserIdentity: Partial<AzureCommunicationServicesUserIdentity> | undefined | null = {}) : void {
    if (azureCommunicationServicesUserIdentity) {
        serializeIdentity(writer, azureCommunicationServicesUserIdentity)
        writer.writeStringValue("azureCommunicationServicesResourceId", azureCommunicationServicesUserIdentity.azureCommunicationServicesResourceId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBaseCollectionPaginationCountResponse(writer: SerializationWriter, baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined | null = {}) : void {
    if (baseCollectionPaginationCountResponse) {
        writer.writeNumberValue("@odata.count", baseCollectionPaginationCountResponse.odataCount);
        writer.writeStringValue("@odata.nextLink", baseCollectionPaginationCountResponse.odataNextLink);
        writer.writeAdditionalData(baseCollectionPaginationCountResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCallAiInsight(writer: SerializationWriter, callAiInsight: Partial<CallAiInsight> | undefined | null = {}) : void {
    if (callAiInsight) {
        serializeEntity(writer, callAiInsight)
        writer.writeCollectionOfObjectValues<ActionItem>("actionItems", callAiInsight.actionItems, serializeActionItem);
        writer.writeStringValue("callId", callAiInsight.callId);
        writer.writeStringValue("contentCorrelationId", callAiInsight.contentCorrelationId);
        writer.writeDateValue("createdDateTime", callAiInsight.createdDateTime);
        writer.writeDateValue("endDateTime", callAiInsight.endDateTime);
        writer.writeCollectionOfObjectValues<MeetingNote>("meetingNotes", callAiInsight.meetingNotes, serializeMeetingNote);
        writer.writeObjectValue<CallAiInsightViewPoint>("viewpoint", callAiInsight.viewpoint, serializeCallAiInsightViewPoint);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCallAiInsightCollectionResponse(writer: SerializationWriter, callAiInsightCollectionResponse: Partial<CallAiInsightCollectionResponse> | undefined | null = {}) : void {
    if (callAiInsightCollectionResponse) {
        serializeBaseCollectionPaginationCountResponse(writer, callAiInsightCollectionResponse)
        writer.writeCollectionOfObjectValues<CallAiInsight>("value", callAiInsightCollectionResponse.value, serializeCallAiInsight);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCallAiInsightViewPoint(writer: SerializationWriter, callAiInsightViewPoint: Partial<CallAiInsightViewPoint> | undefined | null = {}) : void {
    if (callAiInsightViewPoint) {
        writer.writeCollectionOfObjectValues<MentionEvent>("mentionEvents", callAiInsightViewPoint.mentionEvents, serializeMentionEvent);
        writer.writeStringValue("@odata.type", callAiInsightViewPoint.odataType);
        writer.writeAdditionalData(callAiInsightViewPoint.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatMessageFromIdentitySet(writer: SerializationWriter, chatMessageFromIdentitySet: Partial<ChatMessageFromIdentitySet> | undefined | null = {}) : void {
    if (chatMessageFromIdentitySet) {
        serializeIdentitySet(writer, chatMessageFromIdentitySet)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatMessageMentionedIdentitySet(writer: SerializationWriter, chatMessageMentionedIdentitySet: Partial<ChatMessageMentionedIdentitySet> | undefined | null = {}) : void {
    if (chatMessageMentionedIdentitySet) {
        serializeIdentitySet(writer, chatMessageMentionedIdentitySet)
        writer.writeObjectValue<TeamworkConversationIdentity>("conversation", chatMessageMentionedIdentitySet.conversation, serializeTeamworkConversationIdentity);
        writer.writeObjectValue<TeamworkTagIdentity>("tag", chatMessageMentionedIdentitySet.tag, serializeTeamworkTagIdentity);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChatMessageReactionIdentitySet(writer: SerializationWriter, chatMessageReactionIdentitySet: Partial<ChatMessageReactionIdentitySet> | undefined | null = {}) : void {
    if (chatMessageReactionIdentitySet) {
        serializeIdentitySet(writer, chatMessageReactionIdentitySet)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsApplicationIdentity(writer: SerializationWriter, communicationsApplicationIdentity: Partial<CommunicationsApplicationIdentity> | undefined | null = {}) : void {
    if (communicationsApplicationIdentity) {
        serializeIdentity(writer, communicationsApplicationIdentity)
        writer.writeStringValue("applicationType", communicationsApplicationIdentity.applicationType);
        writer.writeBooleanValue("hidden", communicationsApplicationIdentity.hidden);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsApplicationInstanceIdentity(writer: SerializationWriter, communicationsApplicationInstanceIdentity: Partial<CommunicationsApplicationInstanceIdentity> | undefined | null = {}) : void {
    if (communicationsApplicationInstanceIdentity) {
        serializeIdentity(writer, communicationsApplicationInstanceIdentity)
        writer.writeBooleanValue("hidden", communicationsApplicationInstanceIdentity.hidden);
        writer.writeStringValue("tenantId", communicationsApplicationInstanceIdentity.tenantId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsEncryptedIdentity(writer: SerializationWriter, communicationsEncryptedIdentity: Partial<CommunicationsEncryptedIdentity> | undefined | null = {}) : void {
    if (communicationsEncryptedIdentity) {
        serializeIdentity(writer, communicationsEncryptedIdentity)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsGuestIdentity(writer: SerializationWriter, communicationsGuestIdentity: Partial<CommunicationsGuestIdentity> | undefined | null = {}) : void {
    if (communicationsGuestIdentity) {
        serializeIdentity(writer, communicationsGuestIdentity)
        writer.writeStringValue("email", communicationsGuestIdentity.email);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsIdentitySet(writer: SerializationWriter, communicationsIdentitySet: Partial<CommunicationsIdentitySet> | undefined | null = {}) : void {
    if (communicationsIdentitySet) {
        serializeIdentitySet(writer, communicationsIdentitySet)
        writer.writeObjectValue<Identity>("applicationInstance", communicationsIdentitySet.applicationInstance, serializeIdentity);
        writer.writeObjectValue<Identity>("assertedIdentity", communicationsIdentitySet.assertedIdentity, serializeIdentity);
        writer.writeObjectValue<Identity>("azureCommunicationServicesUser", communicationsIdentitySet.azureCommunicationServicesUser, serializeIdentity);
        writer.writeObjectValue<Identity>("encrypted", communicationsIdentitySet.encrypted, serializeIdentity);
        writer.writeEnumValue<EndpointType>("endpointType", communicationsIdentitySet.endpointType);
        writer.writeObjectValue<Identity>("guest", communicationsIdentitySet.guest, serializeIdentity);
        writer.writeObjectValue<Identity>("onPremises", communicationsIdentitySet.onPremises, serializeIdentity);
        writer.writeObjectValue<Identity>("phone", communicationsIdentitySet.phone, serializeIdentity);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsPhoneIdentity(writer: SerializationWriter, communicationsPhoneIdentity: Partial<CommunicationsPhoneIdentity> | undefined | null = {}) : void {
    if (communicationsPhoneIdentity) {
        serializeIdentity(writer, communicationsPhoneIdentity)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCommunicationsUserIdentity(writer: SerializationWriter, communicationsUserIdentity: Partial<CommunicationsUserIdentity> | undefined | null = {}) : void {
    if (communicationsUserIdentity) {
        serializeIdentity(writer, communicationsUserIdentity)
        writer.writeStringValue("tenantId", communicationsUserIdentity.tenantId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotAdmin(writer: SerializationWriter, copilotAdmin: Partial<CopilotAdmin> | undefined | null = {}) : void {
    if (copilotAdmin) {
        serializeEntity(writer, copilotAdmin)
        writer.writeObjectValue<CopilotAdminSetting>("settings", copilotAdmin.settings, serializeCopilotAdminSetting);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotAdminLimitedMode(writer: SerializationWriter, copilotAdminLimitedMode: Partial<CopilotAdminLimitedMode> | undefined | null = {}) : void {
    if (copilotAdminLimitedMode) {
        serializeEntity(writer, copilotAdminLimitedMode)
        writer.writeStringValue("groupId", copilotAdminLimitedMode.groupId);
        writer.writeBooleanValue("isEnabledForGroup", copilotAdminLimitedMode.isEnabledForGroup);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotAdminSetting(writer: SerializationWriter, copilotAdminSetting: Partial<CopilotAdminSetting> | undefined | null = {}) : void {
    if (copilotAdminSetting) {
        serializeEntity(writer, copilotAdminSetting)
        writer.writeObjectValue<CopilotAdminLimitedMode>("limitedMode", copilotAdminSetting.limitedMode, serializeCopilotAdminLimitedMode);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotPeopleAdminSetting(writer: SerializationWriter, copilotPeopleAdminSetting: Partial<CopilotPeopleAdminSetting> | undefined | null = {}) : void {
    if (copilotPeopleAdminSetting) {
        serializeEntity(writer, copilotPeopleAdminSetting)
        writer.writeObjectValue<EnhancedPersonalizationSetting>("enhancedPersonalization", copilotPeopleAdminSetting.enhancedPersonalization, serializeEnhancedPersonalizationSetting);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopilotSetting(writer: SerializationWriter, copilotSetting: Partial<CopilotSetting> | undefined | null = {}) : void {
    if (copilotSetting) {
        serializeEntity(writer, copilotSetting)
        writer.writeObjectValue<CopilotPeopleAdminSetting>("people", copilotSetting.people, serializeCopilotPeopleAdminSetting);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDetailsInfo(writer: SerializationWriter, detailsInfo: Partial<DetailsInfo> | undefined | null = {}) : void {
    if (detailsInfo) {
        writer.writeStringValue("@odata.type", detailsInfo.odataType);
        writer.writeAdditionalData(detailsInfo.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDictionaries(writer: SerializationWriter, dictionaries: Partial<Dictionaries> | undefined | null = {}) : void {
    if (dictionaries) {
        writer.writeStringValue("@odata.type", dictionaries.odataType);
        writer.writeAdditionalData(dictionaries.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmailIdentity(writer: SerializationWriter, emailIdentity: Partial<EmailIdentity> | undefined | null = {}) : void {
    if (emailIdentity) {
        serializeIdentity(writer, emailIdentity)
        writer.writeStringValue("email", emailIdentity.email);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEnhancedPersonalizationSetting(writer: SerializationWriter, enhancedPersonalizationSetting: Partial<EnhancedPersonalizationSetting> | undefined | null = {}) : void {
    if (enhancedPersonalizationSetting) {
        serializeEntity(writer, enhancedPersonalizationSetting)
        writer.writeStringValue("disabledForGroup", enhancedPersonalizationSetting.disabledForGroup);
        writer.writeBooleanValue("isEnabledInOrganization", enhancedPersonalizationSetting.isEnabledInOrganization);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEntity(writer: SerializationWriter, entity: Partial<Entity> | undefined | null = {}) : void {
    if (entity) {
        writer.writeStringValue("id", entity.id);
        writer.writeStringValue("@odata.type", entity.odataType);
        writer.writeAdditionalData(entity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIdentity(writer: SerializationWriter, identity: Partial<Identity> | undefined | null = {}) : void {
    if (identity) {
        writer.writeStringValue("displayName", identity.displayName);
        writer.writeStringValue("id", identity.id);
        writer.writeStringValue("@odata.type", identity.odataType);
        writer.writeAdditionalData(identity.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeIdentitySet(writer: SerializationWriter, identitySet: Partial<IdentitySet> | undefined | null = {}) : void {
    if (identitySet) {
        writer.writeObjectValue<Identity>("application", identitySet.application, serializeIdentity);
        writer.writeObjectValue<Identity>("device", identitySet.device, serializeIdentity);
        writer.writeStringValue("@odata.type", identitySet.odataType);
        writer.writeObjectValue<Identity>("user", identitySet.user, serializeIdentity);
        writer.writeAdditionalData(identitySet.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInitiator(writer: SerializationWriter, initiator: Partial<Initiator> | undefined | null = {}) : void {
    if (initiator) {
        serializeIdentity(writer, initiator)
        writer.writeEnumValue<InitiatorType>("initiatorType", initiator.initiatorType);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeItemBody(writer: SerializationWriter, itemBody: Partial<ItemBody> | undefined | null = {}) : void {
    if (itemBody) {
        writer.writeStringValue("content", itemBody.content);
        writer.writeEnumValue<BodyType>("contentType", itemBody.contentType);
        writer.writeStringValue("@odata.type", itemBody.odataType);
        writer.writeAdditionalData(itemBody.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMeetingNote(writer: SerializationWriter, meetingNote: Partial<MeetingNote> | undefined | null = {}) : void {
    if (meetingNote) {
        writer.writeStringValue("@odata.type", meetingNote.odataType);
        writer.writeCollectionOfObjectValues<MeetingNoteSubpoint>("subpoints", meetingNote.subpoints, serializeMeetingNoteSubpoint);
        writer.writeStringValue("text", meetingNote.text);
        writer.writeStringValue("title", meetingNote.title);
        writer.writeAdditionalData(meetingNote.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMeetingNoteSubpoint(writer: SerializationWriter, meetingNoteSubpoint: Partial<MeetingNoteSubpoint> | undefined | null = {}) : void {
    if (meetingNoteSubpoint) {
        writer.writeStringValue("@odata.type", meetingNoteSubpoint.odataType);
        writer.writeStringValue("text", meetingNoteSubpoint.text);
        writer.writeStringValue("title", meetingNoteSubpoint.title);
        writer.writeAdditionalData(meetingNoteSubpoint.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMentionEvent(writer: SerializationWriter, mentionEvent: Partial<MentionEvent> | undefined | null = {}) : void {
    if (mentionEvent) {
        writer.writeDateValue("eventDateTime", mentionEvent.eventDateTime);
        writer.writeStringValue("@odata.type", mentionEvent.odataType);
        writer.writeObjectValue<IdentitySet>("speaker", mentionEvent.speaker, serializeIdentitySet);
        writer.writeStringValue("transcriptUtterance", mentionEvent.transcriptUtterance);
        writer.writeAdditionalData(mentionEvent.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProgramResource(writer: SerializationWriter, programResource: Partial<ProgramResource> | undefined | null = {}) : void {
    if (programResource) {
        serializeIdentity(writer, programResource)
        writer.writeStringValue("type", programResource.type);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvisionedIdentity(writer: SerializationWriter, provisionedIdentity: Partial<ProvisionedIdentity> | undefined | null = {}) : void {
    if (provisionedIdentity) {
        serializeIdentity(writer, provisionedIdentity)
        writer.writeObjectValue<DetailsInfo>("details", provisionedIdentity.details, serializeDetailsInfo);
        writer.writeStringValue("identityType", provisionedIdentity.identityType);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvisioningServicePrincipal(writer: SerializationWriter, provisioningServicePrincipal: Partial<ProvisioningServicePrincipal> | undefined | null = {}) : void {
    if (provisioningServicePrincipal) {
        serializeIdentity(writer, provisioningServicePrincipal)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProvisioningSystem(writer: SerializationWriter, provisioningSystem: Partial<ProvisioningSystem> | undefined | null = {}) : void {
    if (provisioningSystem) {
        serializeIdentity(writer, provisioningSystem)
        writer.writeObjectValue<DetailsInfo>("details", provisioningSystem.details, serializeDetailsInfo);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalExtract(writer: SerializationWriter, retrievalExtract: Partial<RetrievalExtract> | undefined | null = {}) : void {
    if (retrievalExtract) {
        writer.writeStringValue("@odata.type", retrievalExtract.odataType);
        writer.writeStringValue("text", retrievalExtract.text);
        writer.writeAdditionalData(retrievalExtract.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalHit(writer: SerializationWriter, retrievalHit: Partial<RetrievalHit> | undefined | null = {}) : void {
    if (retrievalHit) {
        writer.writeCollectionOfObjectValues<RetrievalExtract>("extracts", retrievalHit.extracts, serializeRetrievalExtract);
        writer.writeStringValue("@odata.type", retrievalHit.odataType);
        writer.writeObjectValue<SearchResourceMetadataDictionary>("resourceMetadata", retrievalHit.resourceMetadata, serializeSearchResourceMetadataDictionary);
        writer.writeEnumValue<RetrievalEntityType>("resourceType", retrievalHit.resourceType);
        writer.writeObjectValue<SearchSensitivityLabelInfo>("sensitivityLabel", retrievalHit.sensitivityLabel, serializeSearchSensitivityLabelInfo);
        writer.writeStringValue("webUrl", retrievalHit.webUrl);
        writer.writeAdditionalData(retrievalHit.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalResponse(writer: SerializationWriter, retrievalResponse: Partial<RetrievalResponse> | undefined | null = {}) : void {
    if (retrievalResponse) {
        writer.writeStringValue("@odata.type", retrievalResponse.odataType);
        writer.writeCollectionOfObjectValues<RetrievalHit>("retrievalHits", retrievalResponse.retrievalHits, serializeRetrievalHit);
        writer.writeAdditionalData(retrievalResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchResourceMetadataDictionary(writer: SerializationWriter, searchResourceMetadataDictionary: Partial<SearchResourceMetadataDictionary> | undefined | null = {}) : void {
    if (searchResourceMetadataDictionary) {
        serializeDictionaries(writer, searchResourceMetadataDictionary)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSearchSensitivityLabelInfo(writer: SerializationWriter, searchSensitivityLabelInfo: Partial<SearchSensitivityLabelInfo> | undefined | null = {}) : void {
    if (searchSensitivityLabelInfo) {
        writer.writeStringValue("@odata.type", searchSensitivityLabelInfo.odataType);
        writer.writeAdditionalData(searchSensitivityLabelInfo.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServicePrincipalIdentity(writer: SerializationWriter, servicePrincipalIdentity: Partial<ServicePrincipalIdentity> | undefined | null = {}) : void {
    if (servicePrincipalIdentity) {
        serializeIdentity(writer, servicePrincipalIdentity)
        writer.writeStringValue("appId", servicePrincipalIdentity.appId);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSharePointIdentity(writer: SerializationWriter, sharePointIdentity: Partial<SharePointIdentity> | undefined | null = {}) : void {
    if (sharePointIdentity) {
        serializeIdentity(writer, sharePointIdentity)
        writer.writeStringValue("loginName", sharePointIdentity.loginName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSharePointIdentitySet(writer: SerializationWriter, sharePointIdentitySet: Partial<SharePointIdentitySet> | undefined | null = {}) : void {
    if (sharePointIdentitySet) {
        serializeIdentitySet(writer, sharePointIdentitySet)
        writer.writeObjectValue<Identity>("group", sharePointIdentitySet.group, serializeIdentity);
        writer.writeObjectValue<SharePointIdentity>("siteGroup", sharePointIdentitySet.siteGroup, serializeSharePointIdentity);
        writer.writeObjectValue<SharePointIdentity>("siteUser", sharePointIdentitySet.siteUser, serializeSharePointIdentity);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSourceProvisionedIdentity(writer: SerializationWriter, sourceProvisionedIdentity: Partial<SourceProvisionedIdentity> | undefined | null = {}) : void {
    if (sourceProvisionedIdentity) {
        serializeIdentity(writer, sourceProvisionedIdentity)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTargetProvisionedIdentity(writer: SerializationWriter, targetProvisionedIdentity: Partial<TargetProvisionedIdentity> | undefined | null = {}) : void {
    if (targetProvisionedIdentity) {
        serializeIdentity(writer, targetProvisionedIdentity)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkApplicationIdentity(writer: SerializationWriter, teamworkApplicationIdentity: Partial<TeamworkApplicationIdentity> | undefined | null = {}) : void {
    if (teamworkApplicationIdentity) {
        serializeIdentity(writer, teamworkApplicationIdentity)
        writer.writeEnumValue<TeamworkApplicationIdentityType>("applicationIdentityType", teamworkApplicationIdentity.applicationIdentityType);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkConversationIdentity(writer: SerializationWriter, teamworkConversationIdentity: Partial<TeamworkConversationIdentity> | undefined | null = {}) : void {
    if (teamworkConversationIdentity) {
        serializeIdentity(writer, teamworkConversationIdentity)
        writer.writeEnumValue<TeamworkConversationIdentityType>("conversationIdentityType", teamworkConversationIdentity.conversationIdentityType);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkTagIdentity(writer: SerializationWriter, teamworkTagIdentity: Partial<TeamworkTagIdentity> | undefined | null = {}) : void {
    if (teamworkTagIdentity) {
        serializeIdentity(writer, teamworkTagIdentity)
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeamworkUserIdentity(writer: SerializationWriter, teamworkUserIdentity: Partial<TeamworkUserIdentity> | undefined | null = {}) : void {
    if (teamworkUserIdentity) {
        serializeIdentity(writer, teamworkUserIdentity)
        writer.writeEnumValue<TeamworkUserIdentityType>("userIdentityType", teamworkUserIdentity.userIdentityType);
        writer.writeStringValue("userPrincipalName", teamworkUserIdentity.userPrincipalName);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserIdentity(writer: SerializationWriter, userIdentity: Partial<UserIdentity> | undefined | null = {}) : void {
    if (userIdentity) {
        serializeIdentity(writer, userIdentity)
        writer.writeStringValue("ipAddress", userIdentity.ipAddress);
        writer.writeStringValue("userPrincipalName", userIdentity.userPrincipalName);
    }
}
export interface ServicePrincipalIdentity extends Identity, Parsable {
    /**
     * The application identifier of the service principal.
     */
    appId?: string | null;
}
export interface SharePointIdentity extends Identity, Parsable {
    /**
     * The sign in name of the SharePoint identity.
     */
    loginName?: string | null;
}
export interface SharePointIdentitySet extends IdentitySet, Parsable {
    /**
     * The group associated with this action. Optional.
     */
    group?: Identity | null;
    /**
     * The SharePoint group associated with this action. Optional.
     */
    siteGroup?: SharePointIdentity | null;
    /**
     * The SharePoint user associated with this action. Optional.
     */
    siteUser?: SharePointIdentity | null;
}
export interface SourceProvisionedIdentity extends Identity, Parsable {
}
export interface TargetProvisionedIdentity extends Identity, Parsable {
}
export interface TeamworkApplicationIdentity extends Identity, Parsable {
    /**
     * Type of application that is referenced. Possible values are: aadApplication, bot, tenantBot, office365Connector, and outgoingWebhook.
     */
    applicationIdentityType?: TeamworkApplicationIdentityType | null;
}
export type TeamworkApplicationIdentityType = (typeof TeamworkApplicationIdentityTypeObject)[keyof typeof TeamworkApplicationIdentityTypeObject];
export interface TeamworkConversationIdentity extends Identity, Parsable {
    /**
     * Type of conversation. Possible values are: team, channel, and chat.
     */
    conversationIdentityType?: TeamworkConversationIdentityType | null;
}
export type TeamworkConversationIdentityType = (typeof TeamworkConversationIdentityTypeObject)[keyof typeof TeamworkConversationIdentityTypeObject];
export interface TeamworkTagIdentity extends Identity, Parsable {
}
export interface TeamworkUserIdentity extends Identity, Parsable {
    /**
     * Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, emailUser and azureCommunicationServicesUser.
     */
    userIdentityType?: TeamworkUserIdentityType | null;
    /**
     * User principal name (UPN) of the user.
     */
    userPrincipalName?: string | null;
}
export type TeamworkUserIdentityType = (typeof TeamworkUserIdentityTypeObject)[keyof typeof TeamworkUserIdentityTypeObject];
export interface UserIdentity extends Identity, Parsable {
    /**
     * Indicates the client IP address associated with the user performing the activity (audit log only).
     */
    ipAddress?: string | null;
    /**
     * The userPrincipalName attribute of the user.
     */
    userPrincipalName?: string | null;
}
export const AiInteractionTypeObject = {
    UserPrompt: "userPrompt",
    AiResponse: "aiResponse",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const BodyTypeObject = {
    Text: "text",
    Html: "html",
} as const;
export const EndpointTypeObject = {
    DefaultEscaped: "default",
    Voicemail: "voicemail",
    SkypeForBusiness: "skypeForBusiness",
    SkypeForBusinessVoipPhone: "skypeForBusinessVoipPhone",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const InitiatorTypeObject = {
    User: "user",
    Application: "application",
    System: "system",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RetrievalDataSourceObject = {
    SharePoint: "sharePoint",
    OneDriveBusiness: "oneDriveBusiness",
    ExternalItems: "externalItems",
    Mail: "mail",
    Calendar: "calendar",
    Teams: "teams",
    People: "people",
    SharePointEmbedded: "sharePointEmbedded",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const RetrievalEntityTypeObject = {
    Site: "site",
    List: "list",
    ListItem: "listItem",
    Drive: "drive",
    DriveItem: "driveItem",
    ExternalItem: "externalItem",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TeamworkApplicationIdentityTypeObject = {
    AadApplication: "aadApplication",
    Bot: "bot",
    TenantBot: "tenantBot",
    Office365Connector: "office365Connector",
    OutgoingWebhook: "outgoingWebhook",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TeamworkConversationIdentityTypeObject = {
    Team: "team",
    Channel: "channel",
    Chat: "chat",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const TeamworkUserIdentityTypeObject = {
    AadUser: "aadUser",
    OnPremiseAadUser: "onPremiseAadUser",
    AnonymousGuest: "anonymousGuest",
    FederatedUser: "federatedUser",
    PersonalMicrosoftAccountUser: "personalMicrosoftAccountUser",
    SkypeUser: "skypeUser",
    PhoneUser: "phoneUser",
    UnknownFutureValue: "unknownFutureValue",
    EmailUser: "emailUser",
    AzureCommunicationServicesUser: "azureCommunicationServicesUser",
} as const;
/* tslint:enable */
/* eslint-enable */
