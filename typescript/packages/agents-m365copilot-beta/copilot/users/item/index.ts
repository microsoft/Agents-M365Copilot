/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAiUserFromDiscriminatorValue, serializeAiUser, type AiUser } from '../../../models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../models/oDataErrors/index.js';
// @ts-ignore
import { InteractionHistoryRequestBuilderNavigationMetadata, InteractionHistoryRequestBuilderRequestsMetadata, type InteractionHistoryRequestBuilder } from './interactionHistory/index.js';
// @ts-ignore
import { OnlineMeetingsRequestBuilderNavigationMetadata, OnlineMeetingsRequestBuilderRequestsMetadata, type OnlineMeetingsRequestBuilder } from './onlineMeetings/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the users property of the microsoft.graph.copilotRoot entity.
 */
export interface AiUserItemRequestBuilder extends BaseRequestBuilder<AiUserItemRequestBuilder> {
    /**
     * Provides operations to manage the interactionHistory property of the microsoft.graph.aiUser entity.
     */
    get interactionHistory(): InteractionHistoryRequestBuilder;
    /**
     * Provides operations to manage the onlineMeetings property of the microsoft.graph.aiUser entity.
     */
    get onlineMeetings(): OnlineMeetingsRequestBuilder;
    /**
     * Delete navigation property users for copilot
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get users from copilot
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AiUser>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AiUserItemRequestBuilderGetQueryParameters> | undefined) : Promise<AiUser | undefined>;
    /**
     * Update the navigation property users in copilot
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AiUser>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AiUser, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AiUser | undefined>;
    /**
     * Delete navigation property users for copilot
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get users from copilot
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AiUserItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property users in copilot
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AiUser, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get users from copilot
 */
export interface AiUserItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AiUserItemRequestBuilderUriTemplate = "{+baseurl}/copilot/users/{aiUser%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AiUserItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AiUserItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AiUserItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    interactionHistory: {
        requestsMetadata: InteractionHistoryRequestBuilderRequestsMetadata,
        navigationMetadata: InteractionHistoryRequestBuilderNavigationMetadata,
    },
    onlineMeetings: {
        requestsMetadata: OnlineMeetingsRequestBuilderRequestsMetadata,
        navigationMetadata: OnlineMeetingsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AiUserItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AiUserItemRequestBuilderUriTemplate,
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AiUserItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAiUserFromDiscriminatorValue,
        queryParametersMapper: AiUserItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AiUserItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAiUserFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAiUser,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
