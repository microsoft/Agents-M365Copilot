/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCopilotConversationFromDiscriminatorValue, serializeCopilotConversation, type CopilotConversation } from '../../../models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../models/oDataErrors/index.js';
// @ts-ignore
import { MessagesRequestBuilderNavigationMetadata, MessagesRequestBuilderRequestsMetadata, type MessagesRequestBuilder } from './messages/index.js';
// @ts-ignore
import { MicrosoftGraphCopilotChatRequestBuilderRequestsMetadata, type MicrosoftGraphCopilotChatRequestBuilder } from './microsoftGraphCopilotChat/index.js';
// @ts-ignore
import { MicrosoftGraphCopilotChatOverStreamRequestBuilderRequestsMetadata, type MicrosoftGraphCopilotChatOverStreamRequestBuilder } from './microsoftGraphCopilotChatOverStream/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the conversations property of the microsoft.graph.copilotRoot entity.
 */
export interface CopilotConversationItemRequestBuilder extends BaseRequestBuilder<CopilotConversationItemRequestBuilder> {
    /**
     * Provides operations to manage the messages property of the microsoft.graph.copilotConversation entity.
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
    get messages(): MessagesRequestBuilder;
    /**
     * Provides operations to call the chat method.
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
    get microsoftGraphCopilotChat(): MicrosoftGraphCopilotChatRequestBuilder;
    /**
     * Provides operations to call the chatOverStream method.
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
    get microsoftGraphCopilotChatOverStream(): MicrosoftGraphCopilotChatOverStreamRequestBuilder;
    /**
     * Delete navigation property conversations for copilot
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The users conversations with Copilot Chat.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CopilotConversation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     get(requestConfiguration?: RequestConfiguration<CopilotConversationItemRequestBuilderGetQueryParameters> | undefined) : Promise<CopilotConversation | undefined>;
    /**
     * Update the navigation property conversations in copilot
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CopilotConversation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     patch(body: CopilotConversation, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CopilotConversation | undefined>;
    /**
     * Delete navigation property conversations for copilot
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The users conversations with Copilot Chat.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CopilotConversationItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property conversations in copilot
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated  as of 2025-03/PrivatePreview:copilotChatPrivatePreview1 on 2025-03-27 and will be removed 2025-08-28
     */
     toPatchRequestInformation(body: CopilotConversation, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The users conversations with Copilot Chat.
 */
export interface CopilotConversationItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const CopilotConversationItemRequestBuilderUriTemplate = "{+baseurl}/copilot/conversations/{copilotConversation%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CopilotConversationItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CopilotConversationItemRequestBuilderNavigationMetadata: Record<Exclude<keyof CopilotConversationItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    messages: {
        requestsMetadata: MessagesRequestBuilderRequestsMetadata,
        navigationMetadata: MessagesRequestBuilderNavigationMetadata,
    },
    microsoftGraphCopilotChat: {
        requestsMetadata: MicrosoftGraphCopilotChatRequestBuilderRequestsMetadata,
    },
    microsoftGraphCopilotChatOverStream: {
        requestsMetadata: MicrosoftGraphCopilotChatOverStreamRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CopilotConversationItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CopilotConversationItemRequestBuilderUriTemplate,
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: CopilotConversationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCopilotConversationFromDiscriminatorValue,
        queryParametersMapper: CopilotConversationItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CopilotConversationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCopilotConversationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCopilotConversation,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
