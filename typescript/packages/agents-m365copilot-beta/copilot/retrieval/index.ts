/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRetrievalResponseFromDiscriminatorValue, serializeRetrievalResponse, type RetrievalResponse } from "../../models/index.js";
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from "../../models/oDataErrors/index.js";
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from "@microsoft/kiota-abstractions";

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RetrievalPostRequestBody}
 */
// @ts-ignore
export function createRetrievalPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
	return deserializeIntoRetrievalPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRetrievalPostRequestBody(retrievalPostRequestBody: Partial<RetrievalPostRequestBody> | undefined = {}): Record<string, (node: ParseNode) => void> {
	return {
		backingStoreEnabled: (n) => {
			retrievalPostRequestBody.backingStoreEnabled = true;
		},
		filterExpression: (n) => {
			retrievalPostRequestBody.filterExpression = n.getStringValue();
		},
		maximumNumberOfResults: (n) => {
			retrievalPostRequestBody.maximumNumberOfResults = n.getNumberValue();
		},
		queryString: (n) => {
			retrievalPostRequestBody.queryString = n.getStringValue();
		},
		resourceMetadata: (n) => {
			retrievalPostRequestBody.resourceMetadata = n.getCollectionOfPrimitiveValues<string>();
		},
	};
}
export interface RetrievalPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
	/**
	 * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
	 */
	additionalData?: Record<string, unknown>;
	/**
	 * Stores model information.
	 */
	backingStoreEnabled?: boolean | null;
	/**
	 * The filterExpression property
	 */
	filterExpression?: string | null;
	/**
	 * The maximumNumberOfResults property
	 */
	maximumNumberOfResults?: number | null;
	/**
	 * The queryString property
	 */
	queryString?: string | null;
	/**
	 * The resourceMetadata property
	 */
	resourceMetadata?: string[] | null;
}
/**
 * Provides operations to call the retrieval method.
 */
export interface RetrievalRequestBuilder extends BaseRequestBuilder<RetrievalRequestBuilder> {
	/**
	 * Invoke action retrieval
	 * @param body The request body
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {Promise<RetrievalResponse>}
	 * @throws {ODataError} error when the service returns a 4XX or 5XX status code
	 * @deprecated  as of 2024-12/PrivatePreview:retrievalAPI on 2024-02-23 and will be removed 2025-12-31
	 */
	post(body: RetrievalPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined): Promise<RetrievalResponse | undefined>;
	/**
	 * Invoke action retrieval
	 * @param body The request body
	 * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
	 * @returns {RequestInformation}
	 * @deprecated  as of 2024-12/PrivatePreview:retrievalAPI on 2024-02-23 and will be removed 2025-12-31
	 */
	toPostRequestInformation(body: RetrievalPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined): RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRetrievalPostRequestBody(writer: SerializationWriter, retrievalPostRequestBody: Partial<RetrievalPostRequestBody> | undefined | null = {}): void {
	if (retrievalPostRequestBody) {
		writer.writeStringValue("filterExpression", retrievalPostRequestBody.filterExpression);
		writer.writeNumberValue("maximumNumberOfResults", retrievalPostRequestBody.maximumNumberOfResults);
		writer.writeStringValue("queryString", retrievalPostRequestBody.queryString);
		writer.writeCollectionOfPrimitiveValues<string>("resourceMetadata", retrievalPostRequestBody.resourceMetadata);
		writer.writeAdditionalData(retrievalPostRequestBody.additionalData);
	}
}
/**
 * Uri template for the request builder.
 */
export const RetrievalRequestBuilderUriTemplate = "{+baseurl}/copilot/retrieval";
/**
 * Metadata for all the requests in the request builder.
 */
export const RetrievalRequestBuilderRequestsMetadata: RequestsMetadata = {
	post: {
		uriTemplate: RetrievalRequestBuilderUriTemplate,
		responseBodyContentType: "application/json",
		errorMappings: {
			XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
		},
		adapterMethodName: "send",
		responseBodyFactory: createRetrievalResponseFromDiscriminatorValue,
		requestBodyContentType: "application/json",
		requestBodySerializer: serializeRetrievalPostRequestBody,
		requestInformationContentSetMethod: "setContentFromParsable",
	},
};
/* tslint:enable */
/* eslint-enable */
