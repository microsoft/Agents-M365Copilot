# We will keep the versions for .NET, TypeScript, and Python in sync. 

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)


trigger:
  tags:
    include:
    - 'v*'

pr: none
 
variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
 
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
 
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      vmImage: windows-latest
    stages: 
    - stage: build
      jobs:
        - job: build_dotnet
          displayName: 'Build .NET Projects'
          pool:
            name: Azure-Pipelines-1ESPT-ExDShared
            vmImage: windows-latest
          strategy:
            matrix:
              core:
                project_name: Microsoft.Agents.M365Copilot.Core
                project_path: dotnet/src/Microsoft.Agents.M365Copilot.Core/Microsoft.Agents.M365Copilot.Core.csproj
                project_test: dotnet/src/Microsoft.Agents.M365Copilot.Core.Tests/Microsoft.Agents.M365Copilot.Core.Tests.csproj
                solution_path: dotnet/Microsoft.Agents.M365Copilot.sln
              beta:
                project_name: Microsoft.Agents.M365Copilot.Beta
                project_path: dotnet/src/Microsoft.Agents.M365Copilot.Beta/Microsoft.Agents.M365Copilot.Beta.csproj
                project_test: dotnet/src/Microsoft.Agents.M365Copilot.Beta.Tests/Microsoft.Agents.M365Copilot.Beta.Tests.csproj
                solution_path: dotnet/Microsoft.Agents.M365Copilot.sln
          steps:
            - task: UseDotNet@2
              displayName: 'Use .NET 8'
              inputs:
                version: 8.x
            - task: UseDotNet@2
              displayName: 'Use .NET 6 (for code signing tasks)'
              inputs:
                packageType: sdk
                version: 6.x
            - task: NuGetToolInstaller@1
              displayName: 'Install Nuget dependency manager'
              inputs:
                versionSpec: '>=5.2.0'
                checkLatest: true
            # Enable signing for the .NET projects
            - pwsh: |
                # This allows us to not have to checkin .csproj or Directory.Build.props files with DelaySign and 
                # SignAssembly set to to true. If the flag is set, then project is not debuggable with SignAssembly set 
                # to true. Assumption: working directory is root
                $csprojPaths = @(".\dotnet\Directory.Build.props")
                foreach ($csprojPath in $csprojPaths) {
                    $doc = New-Object System.Xml.XmlDocument
                    $doc.Load($csprojPath)
                    # Set the DelaySign element to 'true' so that delay signing is set.
                    $delaySign = $doc.SelectSingleNode("//DelaySign");
                    $delaySign.'#text'= "true"
                    # Set the SignAssembly element to 'true' so that we can sign the assemblies.
                    $signAssembly = $doc.SelectSingleNode("//SignAssembly");
                    $signAssembly.'#text'= "true"
                    $doc.Save($csprojPath);
                }
                Write-Host "Updated the .csproj files so that we can sign the built assemblies."
              displayName: 'Set project ready to sign'
            - task: DotNetCoreCLI@2
              displayName: 'Build $(project_name)'
              inputs:
                projects: '$(Build.SourcesDirectory)/$(project_path)'
                arguments: '--configuration $(BuildConfiguration) --no-incremental'
            - task: DotNetCoreCLI@2
              displayName: 'Test $(project_name)'
              inputs:
                command: test
                projects: '$(Build.SourcesDirectory)/$(project_test)'
                arguments: '--configuration $(BuildConfiguration) --no-build -f net8.0'
            - task: EsrpCodeSigning@5
              displayName: 'ESRP DLL Strong Name For $(project_name)'
              inputs:
                ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
                AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
                AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
                AuthAKVName: 'akv-prod-eastus'
                AuthCertName: 'ReferenceLibraryPrivateCert'
                AuthSignCertName: 'ReferencePackagePublisherCertificate'
                FolderPath: "$(Build.SourcesDirectory)/dotnet/src/$(project_name)/bin/$(BuildConfiguration)/"  # This library_path should already omit test dlls as they exist in the `tests` folder
                Pattern: '**\$(project_name).dll'
                signConfigType: inlineSignParams
                UseMinimatch: true
                inlineOperation: |
                  [
                      {
                          "keyCode": "CP-233863-SN",
                          "operationSetCode": "StrongNameSign",
                          "parameters": [],
                          "toolName": "sign",
                          "toolVersion": "1.0"
                      },
                      {
                          "keyCode": "CP-233863-SN",
                          "operationSetCode": "StrongNameVerify",
                          "parameters": [],
                          "toolName": "sign",
                          "toolVersion": "1.0"
                      }
                  ]
                SessionTimeout: 20
                MaxConcurrency: 50
                MaxRetryAttempts: 5
                PendingAnalysisWaitTimeoutMinutes: 5
            - task: EsrpCodeSigning@5
              displayName: 'ESRP Code Signing for $(project_name)'
              inputs:
                ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
                AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
                AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
                AuthAKVName: 'akv-prod-eastus'
                AuthCertName: 'ReferenceLibraryPrivateCert'
                AuthSignCertName: 'ReferencePackagePublisherCertificate'
                FolderPath: "$(Build.SourcesDirectory)/dotnet/src/$(project_name)/bin/$(BuildConfiguration)/"
                Pattern: '**\*$(project_name).dll'
                UseMinimatch: false
                signConfigType: 'inlineSignParams'
                inlineOperation: |
                  [
                      {
                          "keyCode": "CP-230012",
                          "operationSetCode": "SigntoolSign",
                          "parameters": [
                          {
                              "parameterName": "OpusName",
                              "parameterValue": "Microsoft"
                          },
                          {
                              "parameterName": "OpusInfo",
                              "parameterValue": "http://www.microsoft.com"
                          },
                          {
                              "parameterName": "FileDigest",
                              "parameterValue": "/fd \"SHA256\""
                          },
                          {
                              "parameterName": "PageHash",
                              "parameterValue": "/NPH"
                          },
                          {
                              "parameterName": "TimeStamp",
                              "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                          }
                          ],
                          "toolName": "sign",
                          "toolVersion": "1.0"
                      },
                      {
                          "keyCode": "CP-230012",
                          "operationSetCode": "SigntoolVerify",
                          "parameters": [ ],
                          "toolName": "sign",
                          "toolVersion": "1.0"
                      }
                  ]
                SessionTimeout: '20'
                MaxConcurrency: '50'
                MaxRetryAttempts: '5'
                PendingAnalysisWaitTimeoutMinutes: '5'

            - pwsh: |
                dotnet pack $(Build.SourcesDirectory)/$(project_path) /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg --no-build --output $(Build.ArtifactStagingDirectory)/Nugets --configuration $(BuildConfiguration)
              displayName: 'Dotnet pack $(project_name)'

            - task: EsrpCodeSigning@5
              displayName: 'ESRP Code Signing for $(project_name) nuget package'
            
              inputs:
                ConnectedServiceName: 'Federated DevX ESRP Managed Identity Connection'
                AppRegistrationClientId: '65035b7f-7357-4f29-bf25-c5ee5c3949f8'
                AppRegistrationTenantId: 'cdc5aeea-15c5-4db6-b079-fcadd2505dc2'
                AuthAKVName: 'akv-prod-eastus'
                AuthCertName: 'ReferenceLibraryPrivateCert'
                AuthSignCertName: 'ReferencePackagePublisherCertificate'
                FolderPath: '$(Build.ArtifactStagingDirectory)/Nugets'
                Pattern: '*.nupkg'
                signConfigType: 'inlineSignParams'
                inlineOperation: |
                  [
                                      {
                                          "keyCode": "CP-401405",
                                          "operationSetCode": "NuGetSign",
                                          "parameters": [ ],
                                          "toolName": "sign",
                                          "toolVersion": "1.0"
                                      },
                                      {
                                          "keyCode": "CP-401405",
                                          "operationSetCode": "NuGetVerify",
                                          "parameters": [ ],
                                          "toolName": "sign",
                                          "toolVersion": "1.0"
                                      }
                                  ]
                SessionTimeout: '60'
                MaxConcurrency: '50'
                MaxRetryAttempts: '5'
                PendingAnalysisWaitTimeoutMinutes: '5'              

          templateContext:
            outputs:
              - output: pipelineArtifact
                displayName: 'Move Microsoft.Agents.M365Copilot* package artifacts'
                artifactName: Nugets_$(project_name)
                targetPath: $(Build.ArtifactStagingDirectory)/Nugets

        - job: build_typescript
          displayName: 'Build TypeScript Projects'
          pool:
            name: Azure-Pipelines-1ESPT-ExDShared
            image: ubuntu-latest
            os: linux
          strategy:
            matrix:
              core:
                package_dir: packages/agents-m365copilot-core
                package_name: agents-m365copilot-core
              beta:
                package_dir: packages/agents-m365copilot-beta
                package_name: agents-m365copilot-beta
          steps:
            - task: NodeTool@0
              displayName: 'Install Node.js'
              inputs:
                versionSpec: '20.x'
            - script: npm ci
              displayName: 'Install npm dependencies'
              workingDirectory: '$(Build.SourcesDirectory)/typescript/'
            - script: npm run build --workspace=$(package_dir)
              displayName: 'Build $(package_name)'
              workingDirectory: '$(Build.SourcesDirectory)/typescript/'
            - script: npm test --workspace=$(package_dir)
              displayName: 'Run tests $(package_name)'
              condition: eq(variables['package_name'], 'microsoft_agents_m365copilot_core')
              workingDirectory: '$(Build.SourcesDirectory)/typescript/' 
            - script: npm pack
              displayName: 'Generate npm package $(package_name)'
              workingDirectory: '$(Build.SourcesDirectory)/typescript/$(package_dir)'
            - task: CopyFiles@2
              inputs:
                sourceFolder: '$(Build.SourcesDirectory)/typescript/$(package_dir)'
                targetFolder: '$(Build.ArtifactStagingDirectory)/npm/$(package_name)'
                Contents: |
                  *.tgz
              displayName: "Copy npm package files for $(package_name)"
          templateContext:
            outputs:
              - output: pipelineArtifact
                displayName: 'Move TypeScript package artifacts'
                artifactName: npm_$(package_name)
                targetPath: $(Build.ArtifactStagingDirectory)/npm

        - job: build_python
          displayName: 'Build Python Project'
          pool:
            name: Azure-Pipelines-1ESPT-ExDShared
            image: ubuntu-latest
            os: linux 
          strategy:
            matrix:
              core:
                library_name: microsoft_agents_m365copilot_core
                library_path: packages/microsoft_agents_m365copilot_core
              beta:
                library_name: microsoft_agents_m365copilot_beta
                library_path: packages/microsoft_agents_m365copilot_beta
          steps:
            - task: UsePythonVersion@0
              displayName: 'Use Python 3.13'
              inputs:
                versionSpec: '3.13'
                addToPath: true

            - script: |
                python -m pip install --upgrade pip
                pip install poetry
              displayName: 'Install Poetry'
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - script: poetry install
              displayName: 'Install dependencies'
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - script: poetry run yapf -dr .
              displayName: 'Check code format for core'
              condition: eq(variables['library_name'], 'microsoft_agents_m365copilot_core')
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - script: poetry run isort .
              displayName: 'Check import order'
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - script: poetry run pylint . --disable=W --rcfile=../../.pylintrc
              displayName: 'Lint with Pylint'
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - script: poetry run pytest
              displayName: 'Run the tests'
              condition: eq(variables['library_name'], 'microsoft_agents_m365copilot_core')
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - script: poetry build
              displayName: 'Build Python package'
              workingDirectory: '$(Build.SourcesDirectory)/python/$(library_path)'

            - task: CopyFiles@2
              inputs:
                sourceFolder: '$(Build.SourcesDirectory)/python/$(library_path)/dist/'
                targetFolder: '$(Build.ArtifactStagingDirectory)/python/$(library_name)'
                Contents: |
                  *.tar.gz
                  *.whl
              displayName: "Copy Python package files"
          templateContext:
            outputs:
              - output: pipelineArtifact
                displayName: 'Move Python package artifacts'
                artifactName: pypi_$(library_name)
                targetPath: '$(Build.ArtifactStagingDirectory)/python/$(library_name)'

    - stage: deploy
      condition: and(contains(variables['build.sourceBranch'], 'refs/tags/v'), succeeded())
      dependsOn: [build] # We should only deploy from tagged builds.

      jobs:
        - job: publish_nuget_packages
          displayName: 'Publish NuGet Packages'
          pool:
            name: Azure-Pipelines-1ESPT-ExDShared
            image: windows-latest
            os: windows
          templateContext:
              type: releaseJob
              isProduction: true
              inputs:
                - input: pipelineArtifact
                  artifactName: Nugets
                  targetPath: $(Build.ArtifactStagingDirectory)/Nugets
          steps:
          - task: 1ES.PublishNuget@1
            displayName: 'Publish NuGet packages'
            inputs:
              useDotNetTask: false
              packageParentPath: $(Build.ArtifactStagingDirectory)/Nugets
              packagesToPush: '!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg;$(Build.ArtifactStagingDirectory)/Nugets/*.nupkg'
              nuGetFeedType: external  # Change to external for external
              publishPackageMetadata: true
              publishFeedCredentials: 'M365 Copilot NuGet Connection'
        - job: publish_npm_packages
          displayName: 'Publish npm Packages'
          pool:
            name: Azure-Pipelines-1ESPT-ExDShared
            image: ubuntu-latest
            os: linux
          templateContext:
              type: releaseJob
              isProduction: true
              inputs:
                - input: pipelineArtifact
                  artifactName: npm
                  targetPath: $(Build.ArtifactStagingDirectory)/npm
          steps:    
          - task: EsrpRelease@9
            displayName: 'Publish packages NPM artifacts via ESRP Release'
            inputs:
              connectedservicename: "Federated DevX ESRP Managed Identity Connection"
              usemanagedidentity: true
              keyvaultname: "akv-prod-eastus"
              signcertname: "ReferencePackagePublisherCertificate"
              clientid: "65035b7f-7357-4f29-bf25-c5ee5c3949f8"
              intent: "PackageDistribution"
              contenttype: "npm"
              folderlocation: "$(Build.ArtifactStagingDirectory)/npm"
              owners: "mmainer@microsoft.com,karthikra@microsoft.com"
              approvers: "mmainer@microsoft.com,christiano@microsoft.com,karthikra@microsoft.com,lramosvea@microsoft.com"
              serviceendpointurl: "https://api.esrp.microsoft.com"
              mainpublisher: "ESRPRELPACMAN"
              domaintenantid: "cdc5aeea-15c5-4db6-b079-fcadd2505dc2"
