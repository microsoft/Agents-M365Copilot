// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Agents.M365Copilot.Beta.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CopilotConversationAttribution : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The source of the attribution.</summary>
        public global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionSource? AttributionSource
        {
            get { return BackingStore?.Get<global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionSource?>("attributionSource"); }
            set { BackingStore?.Set("attributionSource", value); }
        }
        /// <summary>The type of attribution.</summary>
        public global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionType? AttributionType
        {
            get { return BackingStore?.Get<global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionType?>("attributionType"); }
            set { BackingStore?.Set("attributionType", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The imageFavIcon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageFavIcon
        {
            get { return BackingStore?.Get<string?>("imageFavIcon"); }
            set { BackingStore?.Set("imageFavIcon", value); }
        }
#nullable restore
#else
        public string ImageFavIcon
        {
            get { return BackingStore?.Get<string>("imageFavIcon"); }
            set { BackingStore?.Set("imageFavIcon", value); }
        }
#endif
        /// <summary>The imageHeight property</summary>
        public int? ImageHeight
        {
            get { return BackingStore?.Get<int?>("imageHeight"); }
            set { BackingStore?.Set("imageHeight", value); }
        }
        /// <summary>The imageWebUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageWebUrl
        {
            get { return BackingStore?.Get<string?>("imageWebUrl"); }
            set { BackingStore?.Set("imageWebUrl", value); }
        }
#nullable restore
#else
        public string ImageWebUrl
        {
            get { return BackingStore?.Get<string>("imageWebUrl"); }
            set { BackingStore?.Set("imageWebUrl", value); }
        }
#endif
        /// <summary>The imageWidth property</summary>
        public int? ImageWidth
        {
            get { return BackingStore?.Get<int?>("imageWidth"); }
            set { BackingStore?.Set("imageWidth", value); }
        }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType
        {
            get { return BackingStore?.Get<string?>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#nullable restore
#else
        public string OdataType
        {
            get { return BackingStore?.Get<string>("@odata.type"); }
            set { BackingStore?.Set("@odata.type", value); }
        }
#endif
        /// <summary>The providerDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderDisplayName
        {
            get { return BackingStore?.Get<string?>("providerDisplayName"); }
            set { BackingStore?.Set("providerDisplayName", value); }
        }
#nullable restore
#else
        public string ProviderDisplayName
        {
            get { return BackingStore?.Get<string>("providerDisplayName"); }
            set { BackingStore?.Set("providerDisplayName", value); }
        }
#endif
        /// <summary>The seeMoreWebUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeeMoreWebUrl
        {
            get { return BackingStore?.Get<string?>("seeMoreWebUrl"); }
            set { BackingStore?.Set("seeMoreWebUrl", value); }
        }
#nullable restore
#else
        public string SeeMoreWebUrl
        {
            get { return BackingStore?.Get<string>("seeMoreWebUrl"); }
            set { BackingStore?.Set("seeMoreWebUrl", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttribution"/> and sets the default values.
        /// </summary>
        public CopilotConversationAttribution()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttribution"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttribution CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttribution();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attributionSource", n => { AttributionSource = n.GetEnumValue<global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionSource>(); } },
                { "attributionType", n => { AttributionType = n.GetEnumValue<global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionType>(); } },
                { "imageFavIcon", n => { ImageFavIcon = n.GetStringValue(); } },
                { "imageHeight", n => { ImageHeight = n.GetIntValue(); } },
                { "imageWebUrl", n => { ImageWebUrl = n.GetStringValue(); } },
                { "imageWidth", n => { ImageWidth = n.GetIntValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "providerDisplayName", n => { ProviderDisplayName = n.GetStringValue(); } },
                { "seeMoreWebUrl", n => { SeeMoreWebUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionSource>("attributionSource", AttributionSource);
            writer.WriteEnumValue<global::Microsoft.Agents.M365Copilot.Beta.Models.CopilotConversationAttributionType>("attributionType", AttributionType);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
