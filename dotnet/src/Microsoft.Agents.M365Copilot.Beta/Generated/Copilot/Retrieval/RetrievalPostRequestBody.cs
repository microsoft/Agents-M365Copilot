// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Agents.M365Copilot.Beta.Copilot.Retrieval
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RetrievalPostRequestBody : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The filterExpression property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilterExpression
        {
            get { return BackingStore?.Get<string?>("filterExpression"); }
            set { BackingStore?.Set("filterExpression", value); }
        }
#nullable restore
#else
        public string FilterExpression
        {
            get { return BackingStore?.Get<string>("filterExpression"); }
            set { BackingStore?.Set("filterExpression", value); }
        }
#endif
        /// <summary>The maximumNumberOfResults property</summary>
        public int? MaximumNumberOfResults
        {
            get { return BackingStore?.Get<int?>("maximumNumberOfResults"); }
            set { BackingStore?.Set("maximumNumberOfResults", value); }
        }
        /// <summary>The queryString property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QueryString
        {
            get { return BackingStore?.Get<string?>("queryString"); }
            set { BackingStore?.Set("queryString", value); }
        }
#nullable restore
#else
        public string QueryString
        {
            get { return BackingStore?.Get<string>("queryString"); }
            set { BackingStore?.Set("queryString", value); }
        }
#endif
        /// <summary>The resourceMetadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ResourceMetadata
        {
            get { return BackingStore?.Get<List<string>?>("resourceMetadata"); }
            set { BackingStore?.Set("resourceMetadata", value); }
        }
#nullable restore
#else
        public List<string> ResourceMetadata
        {
            get { return BackingStore?.Get<List<string>>("resourceMetadata"); }
            set { BackingStore?.Set("resourceMetadata", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Agents.M365Copilot.Beta.Copilot.Retrieval.RetrievalPostRequestBody"/> and sets the default values.
        /// </summary>
        public RetrievalPostRequestBody()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Agents.M365Copilot.Beta.Copilot.Retrieval.RetrievalPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Agents.M365Copilot.Beta.Copilot.Retrieval.RetrievalPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Agents.M365Copilot.Beta.Copilot.Retrieval.RetrievalPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "filterExpression", n => { FilterExpression = n.GetStringValue(); } },
                { "maximumNumberOfResults", n => { MaximumNumberOfResults = n.GetIntValue(); } },
                { "queryString", n => { QueryString = n.GetStringValue(); } },
                { "resourceMetadata", n => { ResourceMetadata = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("filterExpression", FilterExpression);
            writer.WriteIntValue("maximumNumberOfResults", MaximumNumberOfResults);
            writer.WriteStringValue("queryString", QueryString);
            writer.WriteCollectionOfPrimitiveValues<string>("resourceMetadata", ResourceMetadata);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
