// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Agents.M365Copilot.Beta.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Microsoft.Agents.M365Copilot.Beta.Copilot.Communications.RealtimeActivityFeed.MultiActivitySubscriptions.Item.GetArtifacts
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GetArtifactsPostRequestBody : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>The artifactTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Microsoft.Agents.M365Copilot.Beta.Models.ArtifactType?>? ArtifactTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Agents.M365Copilot.Beta.Models.ArtifactType?>?>("artifactTypes"); }
            set { BackingStore?.Set("artifactTypes", value); }
        }
#nullable restore
#else
        public List<global::Microsoft.Agents.M365Copilot.Beta.Models.ArtifactType?> ArtifactTypes
        {
            get { return BackingStore?.Get<List<global::Microsoft.Agents.M365Copilot.Beta.Models.ArtifactType?>>("artifactTypes"); }
            set { BackingStore?.Set("artifactTypes", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The maxResults property</summary>
        public int? MaxResults
        {
            get { return BackingStore?.Get<int?>("maxResults"); }
            set { BackingStore?.Set("maxResults", value); }
        }
        /// <summary>The rangeInSec property</summary>
        public int? RangeInSec
        {
            get { return BackingStore?.Get<int?>("rangeInSec"); }
            set { BackingStore?.Set("rangeInSec", value); }
        }
        /// <summary>The seedDateTime property</summary>
        public DateTimeOffset? SeedDateTime
        {
            get { return BackingStore?.Get<DateTimeOffset?>("seedDateTime"); }
            set { BackingStore?.Set("seedDateTime", value); }
        }
        /// <summary>The userId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId
        {
            get { return BackingStore?.Get<string?>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#nullable restore
#else
        public string UserId
        {
            get { return BackingStore?.Get<string>("userId"); }
            set { BackingStore?.Set("userId", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Microsoft.Agents.M365Copilot.Beta.Copilot.Communications.RealtimeActivityFeed.MultiActivitySubscriptions.Item.GetArtifacts.GetArtifactsPostRequestBody"/> and sets the default values.
        /// </summary>
        public GetArtifactsPostRequestBody()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Microsoft.Agents.M365Copilot.Beta.Copilot.Communications.RealtimeActivityFeed.MultiActivitySubscriptions.Item.GetArtifacts.GetArtifactsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Microsoft.Agents.M365Copilot.Beta.Copilot.Communications.RealtimeActivityFeed.MultiActivitySubscriptions.Item.GetArtifacts.GetArtifactsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Microsoft.Agents.M365Copilot.Beta.Copilot.Communications.RealtimeActivityFeed.MultiActivitySubscriptions.Item.GetArtifacts.GetArtifactsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "artifactTypes", n => { ArtifactTypes = n.GetCollectionOfEnumValues<global::Microsoft.Agents.M365Copilot.Beta.Models.ArtifactType>()?.AsList(); } },
                { "maxResults", n => { MaxResults = n.GetIntValue(); } },
                { "rangeInSec", n => { RangeInSec = n.GetIntValue(); } },
                { "seedDateTime", n => { SeedDateTime = n.GetDateTimeOffsetValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Microsoft.Agents.M365Copilot.Beta.Models.ArtifactType>("artifactTypes", ArtifactTypes);
            writer.WriteIntValue("maxResults", MaxResults);
            writer.WriteIntValue("rangeInSec", RangeInSec);
            writer.WriteDateTimeOffsetValue("seedDateTime", SeedDateTime);
            writer.WriteStringValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
