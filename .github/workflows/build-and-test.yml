name: Build and validate generated code

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      dotnet: ${{ steps.check.outputs.dotnet }}
      python: ${{ steps.check.outputs.python }}
      typescript: ${{ steps.check.outputs.typescript }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check changed files
        id: check
        run: |          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "dotnet=true" >> $GITHUB_OUTPUT
            echo "python=true" >> $GITHUB_OUTPUT
            echo "typescript=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Handle cases where github.base_ref is empty (direct push to a branch)
          if [ -z "${{ github.base_ref }}" ]; then
            # For pushes to main, compare with the previous commit
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              echo "Direct push to main - comparing with previous commit"
              CHANGED_FILES=$(git diff --name-only HEAD^..HEAD)
            else
              # For other branches, compare with main
              echo "Direct push to branch - comparing with main"
              git fetch origin main
              CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
            fi
          else
            # Normal PR case - fetch the target branch and compare
            echo "Pull request - comparing with target branch ${{ github.base_ref }}"
            git fetch origin ${{ github.base_ref }}
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          fi
          
          echo "Changed Files:"
          echo "$CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "^dotnet/"; then
            echo "dotnet=true" >> $GITHUB_OUTPUT
          else
            echo "dotnet=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "^python/"; then
            echo "python=true" >> $GITHUB_OUTPUT
          else
            echo "python=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "^typescript/"; then
            echo "typescript=true" >> $GITHUB_OUTPUT
          else
            echo "typescript=false" >> $GITHUB_OUTPUT
          fi

  build-and-test-dotnet:
    needs: check-changes
    if: needs.check-changes.outputs.dotnet == 'true'
    runs-on: ubuntu-latest
    env:
      solutionName: Microsoft.Agents.M365Copilot.sln
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Setup .NET
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: 8.x
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
      - name: Restore dependencies
        run: dotnet restore ${{ env.solutionName }}
        working-directory: dotnet
      - name: Build
        run: dotnet build ${{ env.solutionName }} --no-restore -c Release /p:UseSharedCompilation=false
        working-directory: dotnet
      - name: Test
        run: dotnet test ${{ env.solutionName }} --no-build --verbosity normal -c Release /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=opencover
        working-directory: dotnet
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-and-test-python:
    needs: check-changes
    if: needs.check-changes.outputs.python == 'true'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r microsoft_agents_m365copilot_core/requirements-dev.txt
        working-directory: python
      - name: Lint SDK with Pylint
        run: pylint microsoft_agents_m365copilot_beta --disable=W --rcfile=.pylintrc
        working-directory: python

      - name: Lint Core Library with Pylint
        run: pylint microsoft_agents_m365copilot_core --disable=W --rcfile=microsoft_agents_m365copilot_core/.pylintrc
        working-directory: python

      - name: Test Core Library
        run: pytest microsoft_agents_m365copilot_core
        working-directory: python

      # CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  build-and-test-typescript:
    needs: check-changes
    if: needs.check-changes.outputs.typescript == 'true'
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max_old_space_size=9182"
    environment:
      name: build_test

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # Single version should work for compilation testing

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
        working-directory: typescript
      - run: npm run build
        working-directory: typescript
      - run: npm run test
        working-directory: typescript
      - name: Check for Secret availability
        id: my-key-check
        # perform secret check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ secrets.client_secret }}" != '' ]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi
      - run: npm run test
        if: steps.my-key-check.outputs.defined == 'true'
        env:
          TENANT_ID: ${{secrets.tenant_id}}
          CLIENT_ID: ${{secrets.client_id}}
          CLIENT_SECRET: ${{secrets.client_secret}}
          USER_ID: ${{secrets.user_id}}
        working-directory: typescript  check-build-matrix:
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Determine job dependencies
        id: deps
        run: |
          DOTNET_TRIGGERED=${{ needs.check-changes.outputs.dotnet == 'true' }}
          PYTHON_TRIGGERED=${{ needs.check-changes.outputs.python == 'true' }}
          TYPESCRIPT_TRIGGERED=${{ needs.check-changes.outputs.typescript == 'true' }}
          
          echo "Dotnet triggered: $DOTNET_TRIGGERED"
          echo "Python triggered: $PYTHON_TRIGGERED"
          echo "TypeScript triggered: $TYPESCRIPT_TRIGGERED"
          
          if [[ "$DOTNET_TRIGGERED" == "true" ]]; then
            echo "need_dotnet=true" >> $GITHUB_OUTPUT
            echo "Will wait for build-and-test-dotnet job"
          else
            echo "need_dotnet=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PYTHON_TRIGGERED" == "true" ]]; then
            echo "need_python=true" >> $GITHUB_OUTPUT
            echo "Will wait for build-and-test-python job"
          else
            echo "need_python=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$TYPESCRIPT_TRIGGERED" == "true" ]]; then
            echo "need_typescript=true" >> $GITHUB_OUTPUT
            echo "Will wait for build-and-test-typescript job"
          else
            echo "need_typescript=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for Dotnet job
        if: steps.deps.outputs.need_dotnet == 'true'
        uses: github/wait-on-check-action@v2
        with:
          check-name: build-and-test-dotnet
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      
      - name: Wait for Python job
        if: steps.deps.outputs.need_python == 'true'
        uses: github/wait-on-check-action@v2
        with:
          check-name: build-and-test-python
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      
      - name: Wait for TypeScript job
        if: steps.deps.outputs.need_typescript == 'true'
        uses: github/wait-on-check-action@v2
        with:
          check-name: build-and-test-typescript
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      
      - name: Check build status
        run: |
          # Check if any builds were triggered
          DOTNET_TRIGGERED=${{ needs.check-changes.outputs.dotnet == 'true' }}
          PYTHON_TRIGGERED=${{ needs.check-changes.outputs.python == 'true' }}
          TYPESCRIPT_TRIGGERED=${{ needs.check-changes.outputs.typescript == 'true' }}
          
          # If no builds were triggered, this means changes were in other folders
          if [[ "$DOTNET_TRIGGERED" == "false" && "$PYTHON_TRIGGERED" == "false" && "$TYPESCRIPT_TRIGGERED" == "false" ]]; then
            echo "No language builds were triggered - changes were in other folders"
            exit 0
          fi
          
          echo "All triggered builds completed successfully"
          exit 0
