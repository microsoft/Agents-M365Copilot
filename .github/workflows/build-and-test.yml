name: Build and validate generated code

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "dotnet/**"
      - "python/**"
      - "typescript/**"
  pull_request:
    branches: ["main"]
    paths:
      - "dotnet/**"
      - "python/**"
      - "typescript/**"

permissions:
  contents: read
  actions: read
  security-events: write

env:
  DOTNET_TRIGGERED: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.changed_files.*, 'dotnet/') || github.event_name == 'workflow_dispatch' }}
  PYTHON_TRIGGERED: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.changed_files.*, 'python/') || github.event_name == 'workflow_dispatch' }}
  TYPESCRIPT_TRIGGERED: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.changed_files.*, 'typescript/') || github.event_name == 'workflow_dispatch' }}

jobs:
  debug-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Debug Changed Files
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Changed Files:"
          echo "${{ toJson(github.event.pull_request.changed_files) }}"
          echo "DOTNET_TRIGGERED: ${{ env.DOTNET_TRIGGERED }}"
          echo "PYTHON_TRIGGERED: ${{ env.PYTHON_TRIGGERED }}"
          echo "TYPESCRIPT_TRIGGERED: ${{ env.TYPESCRIPT_TRIGGERED }}"
  check-build-matrix:
    needs: [debug-changes]
    runs-on: ubuntu-latest
    steps:
      - name: Check Build Matrix
        run: exit 0

  build-and-test-dotnet:
    if: ${{ env.DOTNET_TRIGGERED }}
    runs-on: ubuntu-latest
    env:
      solutionName: Microsoft.Agents.M365Copilot.sln
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Setup .NET
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: 8.x
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
      - name: Restore dependencies
        run: dotnet restore ${{ env.solutionName }}
        working-directory: dotnet
      - name: Build
        run: dotnet build ${{ env.solutionName }} --no-restore -c Release /p:UseSharedCompilation=false
        working-directory: dotnet
      - name: Test
        run: dotnet test ${{ env.solutionName }} --no-build --verbosity normal -c Release /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=opencover
        working-directory: dotnet
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # build-and-test-python:
  #   if: ${{ env.PYTHON_TRIGGERED }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 5
  #     matrix:
  #       python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements-dev.txt
  #         pip install -r microsoft_agents_m365copilot_core/requirements-dev.txt
  #       working-directory: python
  #     - name: Lint SDK with Pylint
  #       run: pylint microsoft_agents_m365copilot_beta --disable=W --rcfile=.pylintrc
  #       working-directory: python

  #     - name: Lint Core Library with Pylint
  #       run: pylint microsoft_agents_m365copilot_core --disable=W --rcfile=microsoft_agents_m365copilot_core/.pylintrc
  #       working-directory: python

  #     - name: Test Core Library
  #       run: pytest microsoft_agents_m365copilot_core
  #       working-directory: python

  #     # CodeQL
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: python
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         category: "/language:python"

  # build-and-test-typescript:
  #   if: ${{ env.TYPESCRIPT_TRIGGERED }}
  #   runs-on: ubuntu-latest
  #   env:
  #     NODE_OPTIONS: "--max_old_space_size=9182"
  #   environment:
  #     name: build_test

  #   strategy:
  #     matrix:
  #       node-version: [18.x, 20.x, 22.x]
  #       # Single version should work for compilation testing

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm ci
  #       working-directory: typescript
  #     - run: npm run build
  #       working-directory: typescript
  #     - name: Check for Secret availability
  #       id: my-key-check
  #       # perform secret check & put boolean result as an output
  #       shell: bash
  #       run: |
  #         if [ "${{ secrets.client_secret }}" != '' ]; then
  #           echo "defined=true" >> $GITHUB_OUTPUT;
  #         else
  #           echo "defined=false" >> $GITHUB_OUTPUT;
  #         fi
  #     - run: npm run test
  #       if: steps.my-key-check.outputs.defined == 'true'
  #       env:
  #         TENANT_ID: ${{secrets.tenant_id}}
  #         CLIENT_ID: ${{secrets.client_id}}
  #         CLIENT_SECRET: ${{secrets.client_secret}}
  #         USER_ID: ${{secrets.user_id}}
  #       working-directory: typescript

  # check-build-matrix:
  #   runs-on: ubuntu-latest
  #   needs:
  #     [debug-changes, build-and-test-dotnet, build-and-test-python, build-and-test-typescript]
  #   if: always()
  #   steps:
  #     - name: No builds triggered - passing check
  #       if: ${{ !env.DOTNET_TRIGGERED && !env.PYTHON_TRIGGERED && !env.TYPESCRIPT_TRIGGERED }}
  #       run: exit 0

  #     - name: All triggered builds are successful
  #       if: |
  #         (env.DOTNET_TRIGGERED || env.PYTHON_TRIGGERED || env.TYPESCRIPT_TRIGGERED) &&
  #         (!env.DOTNET_TRIGGERED || needs.build-and-test-dotnet.result == 'success') &&
  #         (!env.PYTHON_TRIGGERED || needs.build-and-test-python.result == 'success') &&
  #         (!env.TYPESCRIPT_TRIGGERED || needs.build-and-test-typescript.result == 'success')
  #       run: exit 0

  #     - name: One or more triggered builds failed
  #       if: |
  #         (env.DOTNET_TRIGGERED || env.PYTHON_TRIGGERED || env.TYPESCRIPT_TRIGGERED) &&
  #         ((env.DOTNET_TRIGGERED && needs.build-and-test-dotnet.result == 'failure') ||
  #         (env.PYTHON_TRIGGERED && needs.build-and-test-python.result == 'failure') ||
  #         (env.TYPESCRIPT_TRIGGERED && needs.build-and-test-typescript.result == 'failure'))
  #       run: exit 1
